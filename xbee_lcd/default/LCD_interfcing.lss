
LCD_interfcing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00003408  0000349c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003408  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800308  00800308  000035a4  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000035a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003e0  00000000  00000000  000035c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d9a  00000000  00000000  000039a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000019f  00000000  00000000  0000473e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013ca  00000000  00000000  000048dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  00005ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000431  00000000  00000000  00005fb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_5>
      18:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <__vector_51>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e0       	ldi	r30, 0x08	; 8
      fc:	f4 e3       	ldi	r31, 0x34	; 52
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a5 32       	cpi	r26, 0x25	; 37
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 67 0e 	call	0x1cce	; 0x1cce <main>
     122:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_port_config>:
unsigned int thousand;
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     132:	a7 e2       	ldi	r26, 0x27	; 39
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	e7 e2       	ldi	r30, 0x27	; 39
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	87 6f       	ori	r24, 0xF7	; 247
     13e:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     140:	a8 e2       	ldi	r26, 0x28	; 40
     142:	b0 e0       	ldi	r27, 0x00	; 0
     144:	e8 e2       	ldi	r30, 0x28	; 40
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	80 78       	andi	r24, 0x80	; 128
     14c:	8c 93       	st	X, r24
}
     14e:	cf 91       	pop	r28
     150:	df 91       	pop	r29
     152:	08 95       	ret

00000154 <lcd_set_4bit>:


//Function to Reset LCD
void lcd_set_4bit()
{
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	df 93       	push	r29
     15a:	cf 93       	push	r28
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	c0 57       	subi	r28, 0x70	; 112
     162:	d0 40       	sbci	r29, 0x00	; 0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	f8 94       	cli
     168:	de bf       	out	0x3e, r29	; 62
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	cd bf       	out	0x3d, r28	; 61
     16e:	fe 01       	movw	r30, r28
     170:	e3 59       	subi	r30, 0x93	; 147
     172:	ff 4f       	sbci	r31, 0xFF	; 255
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	a0 e8       	ldi	r26, 0x80	; 128
     17a:	bf e3       	ldi	r27, 0x3F	; 63
     17c:	80 83       	st	Z, r24
     17e:	91 83       	std	Z+1, r25	; 0x01
     180:	a2 83       	std	Z+2, r26	; 0x02
     182:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     184:	8e 01       	movw	r16, r28
     186:	07 59       	subi	r16, 0x97	; 151
     188:	1f 4f       	sbci	r17, 0xFF	; 255
     18a:	fe 01       	movw	r30, r28
     18c:	e3 59       	subi	r30, 0x93	; 147
     18e:	ff 4f       	sbci	r31, 0xFF	; 255
     190:	60 81       	ld	r22, Z
     192:	71 81       	ldd	r23, Z+1	; 0x01
     194:	82 81       	ldd	r24, Z+2	; 0x02
     196:	93 81       	ldd	r25, Z+3	; 0x03
     198:	26 e6       	ldi	r18, 0x66	; 102
     19a:	36 e6       	ldi	r19, 0x66	; 102
     19c:	46 e6       	ldi	r20, 0x66	; 102
     19e:	55 e4       	ldi	r21, 0x45	; 69
     1a0:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     1a4:	dc 01       	movw	r26, r24
     1a6:	cb 01       	movw	r24, r22
     1a8:	f8 01       	movw	r30, r16
     1aa:	80 83       	st	Z, r24
     1ac:	91 83       	std	Z+1, r25	; 0x01
     1ae:	a2 83       	std	Z+2, r26	; 0x02
     1b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     1b2:	fe 01       	movw	r30, r28
     1b4:	e7 59       	subi	r30, 0x97	; 151
     1b6:	ff 4f       	sbci	r31, 0xFF	; 255
     1b8:	60 81       	ld	r22, Z
     1ba:	71 81       	ldd	r23, Z+1	; 0x01
     1bc:	82 81       	ldd	r24, Z+2	; 0x02
     1be:	93 81       	ldd	r25, Z+3	; 0x03
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	40 e8       	ldi	r20, 0x80	; 128
     1c6:	5f e3       	ldi	r21, 0x3F	; 63
     1c8:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
     1cc:	88 23       	and	r24, r24
     1ce:	44 f4       	brge	.+16     	; 0x1e0 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1d0:	fe 01       	movw	r30, r28
     1d2:	e9 59       	subi	r30, 0x99	; 153
     1d4:	ff 4f       	sbci	r31, 0xFF	; 255
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	91 83       	std	Z+1, r25	; 0x01
     1dc:	80 83       	st	Z, r24
     1de:	64 c0       	rjmp	.+200    	; 0x2a8 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1e0:	fe 01       	movw	r30, r28
     1e2:	e7 59       	subi	r30, 0x97	; 151
     1e4:	ff 4f       	sbci	r31, 0xFF	; 255
     1e6:	60 81       	ld	r22, Z
     1e8:	71 81       	ldd	r23, Z+1	; 0x01
     1ea:	82 81       	ldd	r24, Z+2	; 0x02
     1ec:	93 81       	ldd	r25, Z+3	; 0x03
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	3f ef       	ldi	r19, 0xFF	; 255
     1f2:	4f e7       	ldi	r20, 0x7F	; 127
     1f4:	57 e4       	ldi	r21, 0x47	; 71
     1f6:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
     1fa:	18 16       	cp	r1, r24
     1fc:	0c f0       	brlt	.+2      	; 0x200 <lcd_set_4bit+0xac>
     1fe:	43 c0       	rjmp	.+134    	; 0x286 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     200:	fe 01       	movw	r30, r28
     202:	e3 59       	subi	r30, 0x93	; 147
     204:	ff 4f       	sbci	r31, 0xFF	; 255
     206:	60 81       	ld	r22, Z
     208:	71 81       	ldd	r23, Z+1	; 0x01
     20a:	82 81       	ldd	r24, Z+2	; 0x02
     20c:	93 81       	ldd	r25, Z+3	; 0x03
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	40 e2       	ldi	r20, 0x20	; 32
     214:	51 e4       	ldi	r21, 0x41	; 65
     216:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     21a:	dc 01       	movw	r26, r24
     21c:	cb 01       	movw	r24, r22
     21e:	8e 01       	movw	r16, r28
     220:	09 59       	subi	r16, 0x99	; 153
     222:	1f 4f       	sbci	r17, 0xFF	; 255
     224:	bc 01       	movw	r22, r24
     226:	cd 01       	movw	r24, r26
     228:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     22c:	dc 01       	movw	r26, r24
     22e:	cb 01       	movw	r24, r22
     230:	f8 01       	movw	r30, r16
     232:	91 83       	std	Z+1, r25	; 0x01
     234:	80 83       	st	Z, r24
     236:	1f c0       	rjmp	.+62     	; 0x276 <lcd_set_4bit+0x122>
     238:	fe 01       	movw	r30, r28
     23a:	eb 59       	subi	r30, 0x9B	; 155
     23c:	ff 4f       	sbci	r31, 0xFF	; 255
     23e:	80 e7       	ldi	r24, 0x70	; 112
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	91 83       	std	Z+1, r25	; 0x01
     244:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     246:	fe 01       	movw	r30, r28
     248:	eb 59       	subi	r30, 0x9B	; 155
     24a:	ff 4f       	sbci	r31, 0xFF	; 255
     24c:	80 81       	ld	r24, Z
     24e:	91 81       	ldd	r25, Z+1	; 0x01
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <lcd_set_4bit+0xfc>
     254:	fe 01       	movw	r30, r28
     256:	eb 59       	subi	r30, 0x9B	; 155
     258:	ff 4f       	sbci	r31, 0xFF	; 255
     25a:	91 83       	std	Z+1, r25	; 0x01
     25c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     25e:	de 01       	movw	r26, r28
     260:	a9 59       	subi	r26, 0x99	; 153
     262:	bf 4f       	sbci	r27, 0xFF	; 255
     264:	fe 01       	movw	r30, r28
     266:	e9 59       	subi	r30, 0x99	; 153
     268:	ff 4f       	sbci	r31, 0xFF	; 255
     26a:	80 81       	ld	r24, Z
     26c:	91 81       	ldd	r25, Z+1	; 0x01
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	11 96       	adiw	r26, 0x01	; 1
     272:	9c 93       	st	X, r25
     274:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     276:	fe 01       	movw	r30, r28
     278:	e9 59       	subi	r30, 0x99	; 153
     27a:	ff 4f       	sbci	r31, 0xFF	; 255
     27c:	80 81       	ld	r24, Z
     27e:	91 81       	ldd	r25, Z+1	; 0x01
     280:	00 97       	sbiw	r24, 0x00	; 0
     282:	d1 f6       	brne	.-76     	; 0x238 <lcd_set_4bit+0xe4>
     284:	27 c0       	rjmp	.+78     	; 0x2d4 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     286:	8e 01       	movw	r16, r28
     288:	09 59       	subi	r16, 0x99	; 153
     28a:	1f 4f       	sbci	r17, 0xFF	; 255
     28c:	fe 01       	movw	r30, r28
     28e:	e7 59       	subi	r30, 0x97	; 151
     290:	ff 4f       	sbci	r31, 0xFF	; 255
     292:	60 81       	ld	r22, Z
     294:	71 81       	ldd	r23, Z+1	; 0x01
     296:	82 81       	ldd	r24, Z+2	; 0x02
     298:	93 81       	ldd	r25, Z+3	; 0x03
     29a:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	f8 01       	movw	r30, r16
     2a4:	91 83       	std	Z+1, r25	; 0x01
     2a6:	80 83       	st	Z, r24
     2a8:	de 01       	movw	r26, r28
     2aa:	ad 59       	subi	r26, 0x9D	; 157
     2ac:	bf 4f       	sbci	r27, 0xFF	; 255
     2ae:	fe 01       	movw	r30, r28
     2b0:	e9 59       	subi	r30, 0x99	; 153
     2b2:	ff 4f       	sbci	r31, 0xFF	; 255
     2b4:	80 81       	ld	r24, Z
     2b6:	91 81       	ldd	r25, Z+1	; 0x01
     2b8:	8d 93       	st	X+, r24
     2ba:	9c 93       	st	X, r25
     2bc:	fe 01       	movw	r30, r28
     2be:	ed 59       	subi	r30, 0x9D	; 157
     2c0:	ff 4f       	sbci	r31, 0xFF	; 255
     2c2:	80 81       	ld	r24, Z
     2c4:	91 81       	ldd	r25, Z+1	; 0x01
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_set_4bit+0x172>
     2ca:	fe 01       	movw	r30, r28
     2cc:	ed 59       	subi	r30, 0x9D	; 157
     2ce:	ff 4f       	sbci	r31, 0xFF	; 255
     2d0:	91 83       	std	Z+1, r25	; 0x01
     2d2:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2d4:	a8 e2       	ldi	r26, 0x28	; 40
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	e8 e2       	ldi	r30, 0x28	; 40
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	8e 7f       	andi	r24, 0xFE	; 254
     2e0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2e2:	a8 e2       	ldi	r26, 0x28	; 40
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	e8 e2       	ldi	r30, 0x28	; 40
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	8d 7f       	andi	r24, 0xFD	; 253
     2ee:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2f0:	e8 e2       	ldi	r30, 0x28	; 40
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 e3       	ldi	r24, 0x30	; 48
     2f6:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2f8:	a8 e2       	ldi	r26, 0x28	; 40
     2fa:	b0 e0       	ldi	r27, 0x00	; 0
     2fc:	e8 e2       	ldi	r30, 0x28	; 40
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	80 81       	ld	r24, Z
     302:	84 60       	ori	r24, 0x04	; 4
     304:	8c 93       	st	X, r24
     306:	fe 01       	movw	r30, r28
     308:	e1 5a       	subi	r30, 0xA1	; 161
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	a0 ea       	ldi	r26, 0xA0	; 160
     312:	b0 e4       	ldi	r27, 0x40	; 64
     314:	80 83       	st	Z, r24
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	a2 83       	std	Z+2, r26	; 0x02
     31a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     31c:	8e 01       	movw	r16, r28
     31e:	05 5a       	subi	r16, 0xA5	; 165
     320:	1f 4f       	sbci	r17, 0xFF	; 255
     322:	fe 01       	movw	r30, r28
     324:	e1 5a       	subi	r30, 0xA1	; 161
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	60 81       	ld	r22, Z
     32a:	71 81       	ldd	r23, Z+1	; 0x01
     32c:	82 81       	ldd	r24, Z+2	; 0x02
     32e:	93 81       	ldd	r25, Z+3	; 0x03
     330:	26 e6       	ldi	r18, 0x66	; 102
     332:	36 e6       	ldi	r19, 0x66	; 102
     334:	46 e6       	ldi	r20, 0x66	; 102
     336:	55 e4       	ldi	r21, 0x45	; 69
     338:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     33c:	dc 01       	movw	r26, r24
     33e:	cb 01       	movw	r24, r22
     340:	f8 01       	movw	r30, r16
     342:	80 83       	st	Z, r24
     344:	91 83       	std	Z+1, r25	; 0x01
     346:	a2 83       	std	Z+2, r26	; 0x02
     348:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     34a:	fe 01       	movw	r30, r28
     34c:	e5 5a       	subi	r30, 0xA5	; 165
     34e:	ff 4f       	sbci	r31, 0xFF	; 255
     350:	60 81       	ld	r22, Z
     352:	71 81       	ldd	r23, Z+1	; 0x01
     354:	82 81       	ldd	r24, Z+2	; 0x02
     356:	93 81       	ldd	r25, Z+3	; 0x03
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	40 e8       	ldi	r20, 0x80	; 128
     35e:	5f e3       	ldi	r21, 0x3F	; 63
     360:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
     364:	88 23       	and	r24, r24
     366:	44 f4       	brge	.+16     	; 0x378 <lcd_set_4bit+0x224>
		__ticks = 1;
     368:	fe 01       	movw	r30, r28
     36a:	e7 5a       	subi	r30, 0xA7	; 167
     36c:	ff 4f       	sbci	r31, 0xFF	; 255
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	91 83       	std	Z+1, r25	; 0x01
     374:	80 83       	st	Z, r24
     376:	64 c0       	rjmp	.+200    	; 0x440 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     378:	fe 01       	movw	r30, r28
     37a:	e5 5a       	subi	r30, 0xA5	; 165
     37c:	ff 4f       	sbci	r31, 0xFF	; 255
     37e:	60 81       	ld	r22, Z
     380:	71 81       	ldd	r23, Z+1	; 0x01
     382:	82 81       	ldd	r24, Z+2	; 0x02
     384:	93 81       	ldd	r25, Z+3	; 0x03
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	3f ef       	ldi	r19, 0xFF	; 255
     38a:	4f e7       	ldi	r20, 0x7F	; 127
     38c:	57 e4       	ldi	r21, 0x47	; 71
     38e:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
     392:	18 16       	cp	r1, r24
     394:	0c f0       	brlt	.+2      	; 0x398 <lcd_set_4bit+0x244>
     396:	43 c0       	rjmp	.+134    	; 0x41e <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     398:	fe 01       	movw	r30, r28
     39a:	e1 5a       	subi	r30, 0xA1	; 161
     39c:	ff 4f       	sbci	r31, 0xFF	; 255
     39e:	60 81       	ld	r22, Z
     3a0:	71 81       	ldd	r23, Z+1	; 0x01
     3a2:	82 81       	ldd	r24, Z+2	; 0x02
     3a4:	93 81       	ldd	r25, Z+3	; 0x03
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e2       	ldi	r20, 0x20	; 32
     3ac:	51 e4       	ldi	r21, 0x41	; 65
     3ae:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     3b2:	dc 01       	movw	r26, r24
     3b4:	cb 01       	movw	r24, r22
     3b6:	8e 01       	movw	r16, r28
     3b8:	07 5a       	subi	r16, 0xA7	; 167
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	bc 01       	movw	r22, r24
     3be:	cd 01       	movw	r24, r26
     3c0:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     3c4:	dc 01       	movw	r26, r24
     3c6:	cb 01       	movw	r24, r22
     3c8:	f8 01       	movw	r30, r16
     3ca:	91 83       	std	Z+1, r25	; 0x01
     3cc:	80 83       	st	Z, r24
     3ce:	1f c0       	rjmp	.+62     	; 0x40e <lcd_set_4bit+0x2ba>
     3d0:	fe 01       	movw	r30, r28
     3d2:	e9 5a       	subi	r30, 0xA9	; 169
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	80 e7       	ldi	r24, 0x70	; 112
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	91 83       	std	Z+1, r25	; 0x01
     3dc:	80 83       	st	Z, r24
     3de:	fe 01       	movw	r30, r28
     3e0:	e9 5a       	subi	r30, 0xA9	; 169
     3e2:	ff 4f       	sbci	r31, 0xFF	; 255
     3e4:	80 81       	ld	r24, Z
     3e6:	91 81       	ldd	r25, Z+1	; 0x01
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <lcd_set_4bit+0x294>
     3ec:	fe 01       	movw	r30, r28
     3ee:	e9 5a       	subi	r30, 0xA9	; 169
     3f0:	ff 4f       	sbci	r31, 0xFF	; 255
     3f2:	91 83       	std	Z+1, r25	; 0x01
     3f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3f6:	de 01       	movw	r26, r28
     3f8:	a7 5a       	subi	r26, 0xA7	; 167
     3fa:	bf 4f       	sbci	r27, 0xFF	; 255
     3fc:	fe 01       	movw	r30, r28
     3fe:	e7 5a       	subi	r30, 0xA7	; 167
     400:	ff 4f       	sbci	r31, 0xFF	; 255
     402:	80 81       	ld	r24, Z
     404:	91 81       	ldd	r25, Z+1	; 0x01
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	11 96       	adiw	r26, 0x01	; 1
     40a:	9c 93       	st	X, r25
     40c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     40e:	fe 01       	movw	r30, r28
     410:	e7 5a       	subi	r30, 0xA7	; 167
     412:	ff 4f       	sbci	r31, 0xFF	; 255
     414:	80 81       	ld	r24, Z
     416:	91 81       	ldd	r25, Z+1	; 0x01
     418:	00 97       	sbiw	r24, 0x00	; 0
     41a:	d1 f6       	brne	.-76     	; 0x3d0 <lcd_set_4bit+0x27c>
     41c:	27 c0       	rjmp	.+78     	; 0x46c <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     41e:	8e 01       	movw	r16, r28
     420:	07 5a       	subi	r16, 0xA7	; 167
     422:	1f 4f       	sbci	r17, 0xFF	; 255
     424:	fe 01       	movw	r30, r28
     426:	e5 5a       	subi	r30, 0xA5	; 165
     428:	ff 4f       	sbci	r31, 0xFF	; 255
     42a:	60 81       	ld	r22, Z
     42c:	71 81       	ldd	r23, Z+1	; 0x01
     42e:	82 81       	ldd	r24, Z+2	; 0x02
     430:	93 81       	ldd	r25, Z+3	; 0x03
     432:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     436:	dc 01       	movw	r26, r24
     438:	cb 01       	movw	r24, r22
     43a:	f8 01       	movw	r30, r16
     43c:	91 83       	std	Z+1, r25	; 0x01
     43e:	80 83       	st	Z, r24
     440:	de 01       	movw	r26, r28
     442:	ab 5a       	subi	r26, 0xAB	; 171
     444:	bf 4f       	sbci	r27, 0xFF	; 255
     446:	fe 01       	movw	r30, r28
     448:	e7 5a       	subi	r30, 0xA7	; 167
     44a:	ff 4f       	sbci	r31, 0xFF	; 255
     44c:	80 81       	ld	r24, Z
     44e:	91 81       	ldd	r25, Z+1	; 0x01
     450:	8d 93       	st	X+, r24
     452:	9c 93       	st	X, r25
     454:	fe 01       	movw	r30, r28
     456:	eb 5a       	subi	r30, 0xAB	; 171
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	80 81       	ld	r24, Z
     45c:	91 81       	ldd	r25, Z+1	; 0x01
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <lcd_set_4bit+0x30a>
     462:	fe 01       	movw	r30, r28
     464:	eb 5a       	subi	r30, 0xAB	; 171
     466:	ff 4f       	sbci	r31, 0xFF	; 255
     468:	91 83       	std	Z+1, r25	; 0x01
     46a:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     46c:	a8 e2       	ldi	r26, 0x28	; 40
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	e8 e2       	ldi	r30, 0x28	; 40
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	8b 7f       	andi	r24, 0xFB	; 251
     478:	8c 93       	st	X, r24
     47a:	fe 01       	movw	r30, r28
     47c:	ef 5a       	subi	r30, 0xAF	; 175
     47e:	ff 4f       	sbci	r31, 0xFF	; 255
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	a0 e8       	ldi	r26, 0x80	; 128
     486:	bf e3       	ldi	r27, 0x3F	; 63
     488:	80 83       	st	Z, r24
     48a:	91 83       	std	Z+1, r25	; 0x01
     48c:	a2 83       	std	Z+2, r26	; 0x02
     48e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     490:	8e 01       	movw	r16, r28
     492:	03 5b       	subi	r16, 0xB3	; 179
     494:	1f 4f       	sbci	r17, 0xFF	; 255
     496:	fe 01       	movw	r30, r28
     498:	ef 5a       	subi	r30, 0xAF	; 175
     49a:	ff 4f       	sbci	r31, 0xFF	; 255
     49c:	60 81       	ld	r22, Z
     49e:	71 81       	ldd	r23, Z+1	; 0x01
     4a0:	82 81       	ldd	r24, Z+2	; 0x02
     4a2:	93 81       	ldd	r25, Z+3	; 0x03
     4a4:	26 e6       	ldi	r18, 0x66	; 102
     4a6:	36 e6       	ldi	r19, 0x66	; 102
     4a8:	46 e6       	ldi	r20, 0x66	; 102
     4aa:	55 e4       	ldi	r21, 0x45	; 69
     4ac:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     4b0:	dc 01       	movw	r26, r24
     4b2:	cb 01       	movw	r24, r22
     4b4:	f8 01       	movw	r30, r16
     4b6:	80 83       	st	Z, r24
     4b8:	91 83       	std	Z+1, r25	; 0x01
     4ba:	a2 83       	std	Z+2, r26	; 0x02
     4bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     4be:	fe 01       	movw	r30, r28
     4c0:	e3 5b       	subi	r30, 0xB3	; 179
     4c2:	ff 4f       	sbci	r31, 0xFF	; 255
     4c4:	60 81       	ld	r22, Z
     4c6:	71 81       	ldd	r23, Z+1	; 0x01
     4c8:	82 81       	ldd	r24, Z+2	; 0x02
     4ca:	93 81       	ldd	r25, Z+3	; 0x03
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	40 e8       	ldi	r20, 0x80	; 128
     4d2:	5f e3       	ldi	r21, 0x3F	; 63
     4d4:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
     4d8:	88 23       	and	r24, r24
     4da:	44 f4       	brge	.+16     	; 0x4ec <lcd_set_4bit+0x398>
		__ticks = 1;
     4dc:	fe 01       	movw	r30, r28
     4de:	e5 5b       	subi	r30, 0xB5	; 181
     4e0:	ff 4f       	sbci	r31, 0xFF	; 255
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	91 83       	std	Z+1, r25	; 0x01
     4e8:	80 83       	st	Z, r24
     4ea:	64 c0       	rjmp	.+200    	; 0x5b4 <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4ec:	fe 01       	movw	r30, r28
     4ee:	e3 5b       	subi	r30, 0xB3	; 179
     4f0:	ff 4f       	sbci	r31, 0xFF	; 255
     4f2:	60 81       	ld	r22, Z
     4f4:	71 81       	ldd	r23, Z+1	; 0x01
     4f6:	82 81       	ldd	r24, Z+2	; 0x02
     4f8:	93 81       	ldd	r25, Z+3	; 0x03
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	3f ef       	ldi	r19, 0xFF	; 255
     4fe:	4f e7       	ldi	r20, 0x7F	; 127
     500:	57 e4       	ldi	r21, 0x47	; 71
     502:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
     506:	18 16       	cp	r1, r24
     508:	0c f0       	brlt	.+2      	; 0x50c <lcd_set_4bit+0x3b8>
     50a:	43 c0       	rjmp	.+134    	; 0x592 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     50c:	fe 01       	movw	r30, r28
     50e:	ef 5a       	subi	r30, 0xAF	; 175
     510:	ff 4f       	sbci	r31, 0xFF	; 255
     512:	60 81       	ld	r22, Z
     514:	71 81       	ldd	r23, Z+1	; 0x01
     516:	82 81       	ldd	r24, Z+2	; 0x02
     518:	93 81       	ldd	r25, Z+3	; 0x03
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	40 e2       	ldi	r20, 0x20	; 32
     520:	51 e4       	ldi	r21, 0x41	; 65
     522:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     526:	dc 01       	movw	r26, r24
     528:	cb 01       	movw	r24, r22
     52a:	8e 01       	movw	r16, r28
     52c:	05 5b       	subi	r16, 0xB5	; 181
     52e:	1f 4f       	sbci	r17, 0xFF	; 255
     530:	bc 01       	movw	r22, r24
     532:	cd 01       	movw	r24, r26
     534:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     538:	dc 01       	movw	r26, r24
     53a:	cb 01       	movw	r24, r22
     53c:	f8 01       	movw	r30, r16
     53e:	91 83       	std	Z+1, r25	; 0x01
     540:	80 83       	st	Z, r24
     542:	1f c0       	rjmp	.+62     	; 0x582 <lcd_set_4bit+0x42e>
     544:	fe 01       	movw	r30, r28
     546:	e7 5b       	subi	r30, 0xB7	; 183
     548:	ff 4f       	sbci	r31, 0xFF	; 255
     54a:	80 e7       	ldi	r24, 0x70	; 112
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	80 83       	st	Z, r24
     552:	fe 01       	movw	r30, r28
     554:	e7 5b       	subi	r30, 0xB7	; 183
     556:	ff 4f       	sbci	r31, 0xFF	; 255
     558:	80 81       	ld	r24, Z
     55a:	91 81       	ldd	r25, Z+1	; 0x01
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <lcd_set_4bit+0x408>
     560:	fe 01       	movw	r30, r28
     562:	e7 5b       	subi	r30, 0xB7	; 183
     564:	ff 4f       	sbci	r31, 0xFF	; 255
     566:	91 83       	std	Z+1, r25	; 0x01
     568:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     56a:	de 01       	movw	r26, r28
     56c:	a5 5b       	subi	r26, 0xB5	; 181
     56e:	bf 4f       	sbci	r27, 0xFF	; 255
     570:	fe 01       	movw	r30, r28
     572:	e5 5b       	subi	r30, 0xB5	; 181
     574:	ff 4f       	sbci	r31, 0xFF	; 255
     576:	80 81       	ld	r24, Z
     578:	91 81       	ldd	r25, Z+1	; 0x01
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	11 96       	adiw	r26, 0x01	; 1
     57e:	9c 93       	st	X, r25
     580:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     582:	fe 01       	movw	r30, r28
     584:	e5 5b       	subi	r30, 0xB5	; 181
     586:	ff 4f       	sbci	r31, 0xFF	; 255
     588:	80 81       	ld	r24, Z
     58a:	91 81       	ldd	r25, Z+1	; 0x01
     58c:	00 97       	sbiw	r24, 0x00	; 0
     58e:	d1 f6       	brne	.-76     	; 0x544 <lcd_set_4bit+0x3f0>
     590:	27 c0       	rjmp	.+78     	; 0x5e0 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     592:	8e 01       	movw	r16, r28
     594:	05 5b       	subi	r16, 0xB5	; 181
     596:	1f 4f       	sbci	r17, 0xFF	; 255
     598:	fe 01       	movw	r30, r28
     59a:	e3 5b       	subi	r30, 0xB3	; 179
     59c:	ff 4f       	sbci	r31, 0xFF	; 255
     59e:	60 81       	ld	r22, Z
     5a0:	71 81       	ldd	r23, Z+1	; 0x01
     5a2:	82 81       	ldd	r24, Z+2	; 0x02
     5a4:	93 81       	ldd	r25, Z+3	; 0x03
     5a6:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     5aa:	dc 01       	movw	r26, r24
     5ac:	cb 01       	movw	r24, r22
     5ae:	f8 01       	movw	r30, r16
     5b0:	91 83       	std	Z+1, r25	; 0x01
     5b2:	80 83       	st	Z, r24
     5b4:	de 01       	movw	r26, r28
     5b6:	a9 5b       	subi	r26, 0xB9	; 185
     5b8:	bf 4f       	sbci	r27, 0xFF	; 255
     5ba:	fe 01       	movw	r30, r28
     5bc:	e5 5b       	subi	r30, 0xB5	; 181
     5be:	ff 4f       	sbci	r31, 0xFF	; 255
     5c0:	80 81       	ld	r24, Z
     5c2:	91 81       	ldd	r25, Z+1	; 0x01
     5c4:	8d 93       	st	X+, r24
     5c6:	9c 93       	st	X, r25
     5c8:	fe 01       	movw	r30, r28
     5ca:	e9 5b       	subi	r30, 0xB9	; 185
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	80 81       	ld	r24, Z
     5d0:	91 81       	ldd	r25, Z+1	; 0x01
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <lcd_set_4bit+0x47e>
     5d6:	fe 01       	movw	r30, r28
     5d8:	e9 5b       	subi	r30, 0xB9	; 185
     5da:	ff 4f       	sbci	r31, 0xFF	; 255
     5dc:	91 83       	std	Z+1, r25	; 0x01
     5de:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5e0:	a8 e2       	ldi	r26, 0x28	; 40
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	e8 e2       	ldi	r30, 0x28	; 40
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	80 81       	ld	r24, Z
     5ea:	8e 7f       	andi	r24, 0xFE	; 254
     5ec:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5ee:	a8 e2       	ldi	r26, 0x28	; 40
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	e8 e2       	ldi	r30, 0x28	; 40
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	8d 7f       	andi	r24, 0xFD	; 253
     5fa:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5fc:	e8 e2       	ldi	r30, 0x28	; 40
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 e3       	ldi	r24, 0x30	; 48
     602:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     604:	a8 e2       	ldi	r26, 0x28	; 40
     606:	b0 e0       	ldi	r27, 0x00	; 0
     608:	e8 e2       	ldi	r30, 0x28	; 40
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	84 60       	ori	r24, 0x04	; 4
     610:	8c 93       	st	X, r24
     612:	fe 01       	movw	r30, r28
     614:	ed 5b       	subi	r30, 0xBD	; 189
     616:	ff 4f       	sbci	r31, 0xFF	; 255
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 ea       	ldi	r26, 0xA0	; 160
     61e:	b0 e4       	ldi	r27, 0x40	; 64
     620:	80 83       	st	Z, r24
     622:	91 83       	std	Z+1, r25	; 0x01
     624:	a2 83       	std	Z+2, r26	; 0x02
     626:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     628:	8e 01       	movw	r16, r28
     62a:	01 5c       	subi	r16, 0xC1	; 193
     62c:	1f 4f       	sbci	r17, 0xFF	; 255
     62e:	fe 01       	movw	r30, r28
     630:	ed 5b       	subi	r30, 0xBD	; 189
     632:	ff 4f       	sbci	r31, 0xFF	; 255
     634:	60 81       	ld	r22, Z
     636:	71 81       	ldd	r23, Z+1	; 0x01
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	26 e6       	ldi	r18, 0x66	; 102
     63e:	36 e6       	ldi	r19, 0x66	; 102
     640:	46 e6       	ldi	r20, 0x66	; 102
     642:	55 e4       	ldi	r21, 0x45	; 69
     644:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	f8 01       	movw	r30, r16
     64e:	80 83       	st	Z, r24
     650:	91 83       	std	Z+1, r25	; 0x01
     652:	a2 83       	std	Z+2, r26	; 0x02
     654:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     656:	fe 01       	movw	r30, r28
     658:	ff 96       	adiw	r30, 0x3f	; 63
     65a:	60 81       	ld	r22, Z
     65c:	71 81       	ldd	r23, Z+1	; 0x01
     65e:	82 81       	ldd	r24, Z+2	; 0x02
     660:	93 81       	ldd	r25, Z+3	; 0x03
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 e8       	ldi	r20, 0x80	; 128
     668:	5f e3       	ldi	r21, 0x3F	; 63
     66a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
     66e:	88 23       	and	r24, r24
     670:	2c f4       	brge	.+10     	; 0x67c <lcd_set_4bit+0x528>
		__ticks = 1;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	9e af       	std	Y+62, r25	; 0x3e
     678:	8d af       	std	Y+61, r24	; 0x3d
     67a:	46 c0       	rjmp	.+140    	; 0x708 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     67c:	fe 01       	movw	r30, r28
     67e:	ff 96       	adiw	r30, 0x3f	; 63
     680:	60 81       	ld	r22, Z
     682:	71 81       	ldd	r23, Z+1	; 0x01
     684:	82 81       	ldd	r24, Z+2	; 0x02
     686:	93 81       	ldd	r25, Z+3	; 0x03
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	3f ef       	ldi	r19, 0xFF	; 255
     68c:	4f e7       	ldi	r20, 0x7F	; 127
     68e:	57 e4       	ldi	r21, 0x47	; 71
     690:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
     694:	18 16       	cp	r1, r24
     696:	64 f5       	brge	.+88     	; 0x6f0 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     698:	fe 01       	movw	r30, r28
     69a:	ed 5b       	subi	r30, 0xBD	; 189
     69c:	ff 4f       	sbci	r31, 0xFF	; 255
     69e:	60 81       	ld	r22, Z
     6a0:	71 81       	ldd	r23, Z+1	; 0x01
     6a2:	82 81       	ldd	r24, Z+2	; 0x02
     6a4:	93 81       	ldd	r25, Z+3	; 0x03
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	40 e2       	ldi	r20, 0x20	; 32
     6ac:	51 e4       	ldi	r21, 0x41	; 65
     6ae:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	bc 01       	movw	r22, r24
     6b8:	cd 01       	movw	r24, r26
     6ba:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	9e af       	std	Y+62, r25	; 0x3e
     6c4:	8d af       	std	Y+61, r24	; 0x3d
     6c6:	0f c0       	rjmp	.+30     	; 0x6e6 <lcd_set_4bit+0x592>
     6c8:	80 e7       	ldi	r24, 0x70	; 112
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	9c af       	std	Y+60, r25	; 0x3c
     6ce:	8b af       	std	Y+59, r24	; 0x3b
     6d0:	8b ad       	ldd	r24, Y+59	; 0x3b
     6d2:	9c ad       	ldd	r25, Y+60	; 0x3c
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <lcd_set_4bit+0x580>
     6d8:	9c af       	std	Y+60, r25	; 0x3c
     6da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6dc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6de:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	9e af       	std	Y+62, r25	; 0x3e
     6e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6e6:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e8:	9e ad       	ldd	r25, Y+62	; 0x3e
     6ea:	00 97       	sbiw	r24, 0x00	; 0
     6ec:	69 f7       	brne	.-38     	; 0x6c8 <lcd_set_4bit+0x574>
     6ee:	16 c0       	rjmp	.+44     	; 0x71c <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6f0:	fe 01       	movw	r30, r28
     6f2:	ff 96       	adiw	r30, 0x3f	; 63
     6f4:	60 81       	ld	r22, Z
     6f6:	71 81       	ldd	r23, Z+1	; 0x01
     6f8:	82 81       	ldd	r24, Z+2	; 0x02
     6fa:	93 81       	ldd	r25, Z+3	; 0x03
     6fc:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     700:	dc 01       	movw	r26, r24
     702:	cb 01       	movw	r24, r22
     704:	9e af       	std	Y+62, r25	; 0x3e
     706:	8d af       	std	Y+61, r24	; 0x3d
     708:	8d ad       	ldd	r24, Y+61	; 0x3d
     70a:	9e ad       	ldd	r25, Y+62	; 0x3e
     70c:	9a af       	std	Y+58, r25	; 0x3a
     70e:	89 af       	std	Y+57, r24	; 0x39
     710:	89 ad       	ldd	r24, Y+57	; 0x39
     712:	9a ad       	ldd	r25, Y+58	; 0x3a
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <lcd_set_4bit+0x5c0>
     718:	9a af       	std	Y+58, r25	; 0x3a
     71a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     71c:	a8 e2       	ldi	r26, 0x28	; 40
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	e8 e2       	ldi	r30, 0x28	; 40
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	80 81       	ld	r24, Z
     726:	8b 7f       	andi	r24, 0xFB	; 251
     728:	8c 93       	st	X, r24
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	a0 e8       	ldi	r26, 0x80	; 128
     730:	bf e3       	ldi	r27, 0x3F	; 63
     732:	8d ab       	std	Y+53, r24	; 0x35
     734:	9e ab       	std	Y+54, r25	; 0x36
     736:	af ab       	std	Y+55, r26	; 0x37
     738:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     73a:	6d a9       	ldd	r22, Y+53	; 0x35
     73c:	7e a9       	ldd	r23, Y+54	; 0x36
     73e:	8f a9       	ldd	r24, Y+55	; 0x37
     740:	98 ad       	ldd	r25, Y+56	; 0x38
     742:	26 e6       	ldi	r18, 0x66	; 102
     744:	36 e6       	ldi	r19, 0x66	; 102
     746:	46 e6       	ldi	r20, 0x66	; 102
     748:	55 e4       	ldi	r21, 0x45	; 69
     74a:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     74e:	dc 01       	movw	r26, r24
     750:	cb 01       	movw	r24, r22
     752:	89 ab       	std	Y+49, r24	; 0x31
     754:	9a ab       	std	Y+50, r25	; 0x32
     756:	ab ab       	std	Y+51, r26	; 0x33
     758:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     75a:	69 a9       	ldd	r22, Y+49	; 0x31
     75c:	7a a9       	ldd	r23, Y+50	; 0x32
     75e:	8b a9       	ldd	r24, Y+51	; 0x33
     760:	9c a9       	ldd	r25, Y+52	; 0x34
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e8       	ldi	r20, 0x80	; 128
     768:	5f e3       	ldi	r21, 0x3F	; 63
     76a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
     76e:	88 23       	and	r24, r24
     770:	2c f4       	brge	.+10     	; 0x77c <lcd_set_4bit+0x628>
		__ticks = 1;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	98 ab       	std	Y+48, r25	; 0x30
     778:	8f a7       	std	Y+47, r24	; 0x2f
     77a:	3f c0       	rjmp	.+126    	; 0x7fa <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     77c:	69 a9       	ldd	r22, Y+49	; 0x31
     77e:	7a a9       	ldd	r23, Y+50	; 0x32
     780:	8b a9       	ldd	r24, Y+51	; 0x33
     782:	9c a9       	ldd	r25, Y+52	; 0x34
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	3f ef       	ldi	r19, 0xFF	; 255
     788:	4f e7       	ldi	r20, 0x7F	; 127
     78a:	57 e4       	ldi	r21, 0x47	; 71
     78c:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
     790:	18 16       	cp	r1, r24
     792:	4c f5       	brge	.+82     	; 0x7e6 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     794:	6d a9       	ldd	r22, Y+53	; 0x35
     796:	7e a9       	ldd	r23, Y+54	; 0x36
     798:	8f a9       	ldd	r24, Y+55	; 0x37
     79a:	98 ad       	ldd	r25, Y+56	; 0x38
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	40 e2       	ldi	r20, 0x20	; 32
     7a2:	51 e4       	ldi	r21, 0x41	; 65
     7a4:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     7a8:	dc 01       	movw	r26, r24
     7aa:	cb 01       	movw	r24, r22
     7ac:	bc 01       	movw	r22, r24
     7ae:	cd 01       	movw	r24, r26
     7b0:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     7b4:	dc 01       	movw	r26, r24
     7b6:	cb 01       	movw	r24, r22
     7b8:	98 ab       	std	Y+48, r25	; 0x30
     7ba:	8f a7       	std	Y+47, r24	; 0x2f
     7bc:	0f c0       	rjmp	.+30     	; 0x7dc <lcd_set_4bit+0x688>
     7be:	80 e7       	ldi	r24, 0x70	; 112
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	9e a7       	std	Y+46, r25	; 0x2e
     7c4:	8d a7       	std	Y+45, r24	; 0x2d
     7c6:	8d a5       	ldd	r24, Y+45	; 0x2d
     7c8:	9e a5       	ldd	r25, Y+46	; 0x2e
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <lcd_set_4bit+0x676>
     7ce:	9e a7       	std	Y+46, r25	; 0x2e
     7d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7d2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d4:	98 a9       	ldd	r25, Y+48	; 0x30
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	98 ab       	std	Y+48, r25	; 0x30
     7da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7dc:	8f a5       	ldd	r24, Y+47	; 0x2f
     7de:	98 a9       	ldd	r25, Y+48	; 0x30
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	69 f7       	brne	.-38     	; 0x7be <lcd_set_4bit+0x66a>
     7e4:	14 c0       	rjmp	.+40     	; 0x80e <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7e6:	69 a9       	ldd	r22, Y+49	; 0x31
     7e8:	7a a9       	ldd	r23, Y+50	; 0x32
     7ea:	8b a9       	ldd	r24, Y+51	; 0x33
     7ec:	9c a9       	ldd	r25, Y+52	; 0x34
     7ee:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     7f2:	dc 01       	movw	r26, r24
     7f4:	cb 01       	movw	r24, r22
     7f6:	98 ab       	std	Y+48, r25	; 0x30
     7f8:	8f a7       	std	Y+47, r24	; 0x2f
     7fa:	8f a5       	ldd	r24, Y+47	; 0x2f
     7fc:	98 a9       	ldd	r25, Y+48	; 0x30
     7fe:	9c a7       	std	Y+44, r25	; 0x2c
     800:	8b a7       	std	Y+43, r24	; 0x2b
     802:	8b a5       	ldd	r24, Y+43	; 0x2b
     804:	9c a5       	ldd	r25, Y+44	; 0x2c
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <lcd_set_4bit+0x6b2>
     80a:	9c a7       	std	Y+44, r25	; 0x2c
     80c:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     80e:	a8 e2       	ldi	r26, 0x28	; 40
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	e8 e2       	ldi	r30, 0x28	; 40
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	8e 7f       	andi	r24, 0xFE	; 254
     81a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     81c:	a8 e2       	ldi	r26, 0x28	; 40
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	e8 e2       	ldi	r30, 0x28	; 40
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	8d 7f       	andi	r24, 0xFD	; 253
     828:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     82a:	e8 e2       	ldi	r30, 0x28	; 40
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	80 e3       	ldi	r24, 0x30	; 48
     830:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     832:	a8 e2       	ldi	r26, 0x28	; 40
     834:	b0 e0       	ldi	r27, 0x00	; 0
     836:	e8 e2       	ldi	r30, 0x28	; 40
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	84 60       	ori	r24, 0x04	; 4
     83e:	8c 93       	st	X, r24
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	a0 ea       	ldi	r26, 0xA0	; 160
     846:	b0 e4       	ldi	r27, 0x40	; 64
     848:	8f a3       	std	Y+39, r24	; 0x27
     84a:	98 a7       	std	Y+40, r25	; 0x28
     84c:	a9 a7       	std	Y+41, r26	; 0x29
     84e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     850:	6f a1       	ldd	r22, Y+39	; 0x27
     852:	78 a5       	ldd	r23, Y+40	; 0x28
     854:	89 a5       	ldd	r24, Y+41	; 0x29
     856:	9a a5       	ldd	r25, Y+42	; 0x2a
     858:	26 e6       	ldi	r18, 0x66	; 102
     85a:	36 e6       	ldi	r19, 0x66	; 102
     85c:	46 e6       	ldi	r20, 0x66	; 102
     85e:	55 e4       	ldi	r21, 0x45	; 69
     860:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	8b a3       	std	Y+35, r24	; 0x23
     86a:	9c a3       	std	Y+36, r25	; 0x24
     86c:	ad a3       	std	Y+37, r26	; 0x25
     86e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     870:	6b a1       	ldd	r22, Y+35	; 0x23
     872:	7c a1       	ldd	r23, Y+36	; 0x24
     874:	8d a1       	ldd	r24, Y+37	; 0x25
     876:	9e a1       	ldd	r25, Y+38	; 0x26
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 e8       	ldi	r20, 0x80	; 128
     87e:	5f e3       	ldi	r21, 0x3F	; 63
     880:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
     884:	88 23       	and	r24, r24
     886:	2c f4       	brge	.+10     	; 0x892 <lcd_set_4bit+0x73e>
		__ticks = 1;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	9a a3       	std	Y+34, r25	; 0x22
     88e:	89 a3       	std	Y+33, r24	; 0x21
     890:	3f c0       	rjmp	.+126    	; 0x910 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     892:	6b a1       	ldd	r22, Y+35	; 0x23
     894:	7c a1       	ldd	r23, Y+36	; 0x24
     896:	8d a1       	ldd	r24, Y+37	; 0x25
     898:	9e a1       	ldd	r25, Y+38	; 0x26
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	3f ef       	ldi	r19, 0xFF	; 255
     89e:	4f e7       	ldi	r20, 0x7F	; 127
     8a0:	57 e4       	ldi	r21, 0x47	; 71
     8a2:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
     8a6:	18 16       	cp	r1, r24
     8a8:	4c f5       	brge	.+82     	; 0x8fc <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8aa:	6f a1       	ldd	r22, Y+39	; 0x27
     8ac:	78 a5       	ldd	r23, Y+40	; 0x28
     8ae:	89 a5       	ldd	r24, Y+41	; 0x29
     8b0:	9a a5       	ldd	r25, Y+42	; 0x2a
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 e2       	ldi	r20, 0x20	; 32
     8b8:	51 e4       	ldi	r21, 0x41	; 65
     8ba:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     8be:	dc 01       	movw	r26, r24
     8c0:	cb 01       	movw	r24, r22
     8c2:	bc 01       	movw	r22, r24
     8c4:	cd 01       	movw	r24, r26
     8c6:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     8ca:	dc 01       	movw	r26, r24
     8cc:	cb 01       	movw	r24, r22
     8ce:	9a a3       	std	Y+34, r25	; 0x22
     8d0:	89 a3       	std	Y+33, r24	; 0x21
     8d2:	0f c0       	rjmp	.+30     	; 0x8f2 <lcd_set_4bit+0x79e>
     8d4:	80 e7       	ldi	r24, 0x70	; 112
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	98 a3       	std	Y+32, r25	; 0x20
     8da:	8f 8f       	std	Y+31, r24	; 0x1f
     8dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8de:	98 a1       	ldd	r25, Y+32	; 0x20
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <lcd_set_4bit+0x78c>
     8e4:	98 a3       	std	Y+32, r25	; 0x20
     8e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ea:	9a a1       	ldd	r25, Y+34	; 0x22
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	9a a3       	std	Y+34, r25	; 0x22
     8f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f2:	89 a1       	ldd	r24, Y+33	; 0x21
     8f4:	9a a1       	ldd	r25, Y+34	; 0x22
     8f6:	00 97       	sbiw	r24, 0x00	; 0
     8f8:	69 f7       	brne	.-38     	; 0x8d4 <lcd_set_4bit+0x780>
     8fa:	14 c0       	rjmp	.+40     	; 0x924 <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8fc:	6b a1       	ldd	r22, Y+35	; 0x23
     8fe:	7c a1       	ldd	r23, Y+36	; 0x24
     900:	8d a1       	ldd	r24, Y+37	; 0x25
     902:	9e a1       	ldd	r25, Y+38	; 0x26
     904:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     908:	dc 01       	movw	r26, r24
     90a:	cb 01       	movw	r24, r22
     90c:	9a a3       	std	Y+34, r25	; 0x22
     90e:	89 a3       	std	Y+33, r24	; 0x21
     910:	89 a1       	ldd	r24, Y+33	; 0x21
     912:	9a a1       	ldd	r25, Y+34	; 0x22
     914:	9e 8f       	std	Y+30, r25	; 0x1e
     916:	8d 8f       	std	Y+29, r24	; 0x1d
     918:	8d 8d       	ldd	r24, Y+29	; 0x1d
     91a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	f1 f7       	brne	.-4      	; 0x91c <lcd_set_4bit+0x7c8>
     920:	9e 8f       	std	Y+30, r25	; 0x1e
     922:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     924:	a8 e2       	ldi	r26, 0x28	; 40
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	e8 e2       	ldi	r30, 0x28	; 40
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	8b 7f       	andi	r24, 0xFB	; 251
     930:	8c 93       	st	X, r24
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	a0 e8       	ldi	r26, 0x80	; 128
     938:	bf e3       	ldi	r27, 0x3F	; 63
     93a:	89 8f       	std	Y+25, r24	; 0x19
     93c:	9a 8f       	std	Y+26, r25	; 0x1a
     93e:	ab 8f       	std	Y+27, r26	; 0x1b
     940:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     942:	69 8d       	ldd	r22, Y+25	; 0x19
     944:	7a 8d       	ldd	r23, Y+26	; 0x1a
     946:	8b 8d       	ldd	r24, Y+27	; 0x1b
     948:	9c 8d       	ldd	r25, Y+28	; 0x1c
     94a:	26 e6       	ldi	r18, 0x66	; 102
     94c:	36 e6       	ldi	r19, 0x66	; 102
     94e:	46 e6       	ldi	r20, 0x66	; 102
     950:	55 e4       	ldi	r21, 0x45	; 69
     952:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     956:	dc 01       	movw	r26, r24
     958:	cb 01       	movw	r24, r22
     95a:	8d 8b       	std	Y+21, r24	; 0x15
     95c:	9e 8b       	std	Y+22, r25	; 0x16
     95e:	af 8b       	std	Y+23, r26	; 0x17
     960:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     962:	6d 89       	ldd	r22, Y+21	; 0x15
     964:	7e 89       	ldd	r23, Y+22	; 0x16
     966:	8f 89       	ldd	r24, Y+23	; 0x17
     968:	98 8d       	ldd	r25, Y+24	; 0x18
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e8       	ldi	r20, 0x80	; 128
     970:	5f e3       	ldi	r21, 0x3F	; 63
     972:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
     976:	88 23       	and	r24, r24
     978:	2c f4       	brge	.+10     	; 0x984 <lcd_set_4bit+0x830>
		__ticks = 1;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	9c 8b       	std	Y+20, r25	; 0x14
     980:	8b 8b       	std	Y+19, r24	; 0x13
     982:	3f c0       	rjmp	.+126    	; 0xa02 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     984:	6d 89       	ldd	r22, Y+21	; 0x15
     986:	7e 89       	ldd	r23, Y+22	; 0x16
     988:	8f 89       	ldd	r24, Y+23	; 0x17
     98a:	98 8d       	ldd	r25, Y+24	; 0x18
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	3f ef       	ldi	r19, 0xFF	; 255
     990:	4f e7       	ldi	r20, 0x7F	; 127
     992:	57 e4       	ldi	r21, 0x47	; 71
     994:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
     998:	18 16       	cp	r1, r24
     99a:	4c f5       	brge	.+82     	; 0x9ee <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     99c:	69 8d       	ldd	r22, Y+25	; 0x19
     99e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	40 e2       	ldi	r20, 0x20	; 32
     9aa:	51 e4       	ldi	r21, 0x41	; 65
     9ac:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	bc 01       	movw	r22, r24
     9b6:	cd 01       	movw	r24, r26
     9b8:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     9bc:	dc 01       	movw	r26, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	9c 8b       	std	Y+20, r25	; 0x14
     9c2:	8b 8b       	std	Y+19, r24	; 0x13
     9c4:	0f c0       	rjmp	.+30     	; 0x9e4 <lcd_set_4bit+0x890>
     9c6:	80 e7       	ldi	r24, 0x70	; 112
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	9a 8b       	std	Y+18, r25	; 0x12
     9cc:	89 8b       	std	Y+17, r24	; 0x11
     9ce:	89 89       	ldd	r24, Y+17	; 0x11
     9d0:	9a 89       	ldd	r25, Y+18	; 0x12
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	f1 f7       	brne	.-4      	; 0x9d2 <lcd_set_4bit+0x87e>
     9d6:	9a 8b       	std	Y+18, r25	; 0x12
     9d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9da:	8b 89       	ldd	r24, Y+19	; 0x13
     9dc:	9c 89       	ldd	r25, Y+20	; 0x14
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	9c 8b       	std	Y+20, r25	; 0x14
     9e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9e4:	8b 89       	ldd	r24, Y+19	; 0x13
     9e6:	9c 89       	ldd	r25, Y+20	; 0x14
     9e8:	00 97       	sbiw	r24, 0x00	; 0
     9ea:	69 f7       	brne	.-38     	; 0x9c6 <lcd_set_4bit+0x872>
     9ec:	14 c0       	rjmp	.+40     	; 0xa16 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9ee:	6d 89       	ldd	r22, Y+21	; 0x15
     9f0:	7e 89       	ldd	r23, Y+22	; 0x16
     9f2:	8f 89       	ldd	r24, Y+23	; 0x17
     9f4:	98 8d       	ldd	r25, Y+24	; 0x18
     9f6:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     9fa:	dc 01       	movw	r26, r24
     9fc:	cb 01       	movw	r24, r22
     9fe:	9c 8b       	std	Y+20, r25	; 0x14
     a00:	8b 8b       	std	Y+19, r24	; 0x13
     a02:	8b 89       	ldd	r24, Y+19	; 0x13
     a04:	9c 89       	ldd	r25, Y+20	; 0x14
     a06:	98 8b       	std	Y+16, r25	; 0x10
     a08:	8f 87       	std	Y+15, r24	; 0x0f
     a0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     a0c:	98 89       	ldd	r25, Y+16	; 0x10
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <lcd_set_4bit+0x8ba>
     a12:	98 8b       	std	Y+16, r25	; 0x10
     a14:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     a16:	a8 e2       	ldi	r26, 0x28	; 40
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e8 e2       	ldi	r30, 0x28	; 40
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	8e 7f       	andi	r24, 0xFE	; 254
     a22:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     a24:	a8 e2       	ldi	r26, 0x28	; 40
     a26:	b0 e0       	ldi	r27, 0x00	; 0
     a28:	e8 e2       	ldi	r30, 0x28	; 40
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	80 81       	ld	r24, Z
     a2e:	8d 7f       	andi	r24, 0xFD	; 253
     a30:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a32:	e8 e2       	ldi	r30, 0x28	; 40
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 e2       	ldi	r24, 0x20	; 32
     a38:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a3a:	a8 e2       	ldi	r26, 0x28	; 40
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	e8 e2       	ldi	r30, 0x28	; 40
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	84 60       	ori	r24, 0x04	; 4
     a46:	8c 93       	st	X, r24
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	a0 e8       	ldi	r26, 0x80	; 128
     a4e:	bf e3       	ldi	r27, 0x3F	; 63
     a50:	8b 87       	std	Y+11, r24	; 0x0b
     a52:	9c 87       	std	Y+12, r25	; 0x0c
     a54:	ad 87       	std	Y+13, r26	; 0x0d
     a56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a58:	6b 85       	ldd	r22, Y+11	; 0x0b
     a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a60:	26 e6       	ldi	r18, 0x66	; 102
     a62:	36 e6       	ldi	r19, 0x66	; 102
     a64:	46 e6       	ldi	r20, 0x66	; 102
     a66:	55 e4       	ldi	r21, 0x45	; 69
     a68:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     a6c:	dc 01       	movw	r26, r24
     a6e:	cb 01       	movw	r24, r22
     a70:	8f 83       	std	Y+7, r24	; 0x07
     a72:	98 87       	std	Y+8, r25	; 0x08
     a74:	a9 87       	std	Y+9, r26	; 0x09
     a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a78:	6f 81       	ldd	r22, Y+7	; 0x07
     a7a:	78 85       	ldd	r23, Y+8	; 0x08
     a7c:	89 85       	ldd	r24, Y+9	; 0x09
     a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e8       	ldi	r20, 0x80	; 128
     a86:	5f e3       	ldi	r21, 0x3F	; 63
     a88:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
     a8c:	88 23       	and	r24, r24
     a8e:	2c f4       	brge	.+10     	; 0xa9a <lcd_set_4bit+0x946>
		__ticks = 1;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	9e 83       	std	Y+6, r25	; 0x06
     a96:	8d 83       	std	Y+5, r24	; 0x05
     a98:	3f c0       	rjmp	.+126    	; 0xb18 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a9a:	6f 81       	ldd	r22, Y+7	; 0x07
     a9c:	78 85       	ldd	r23, Y+8	; 0x08
     a9e:	89 85       	ldd	r24, Y+9	; 0x09
     aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	3f ef       	ldi	r19, 0xFF	; 255
     aa6:	4f e7       	ldi	r20, 0x7F	; 127
     aa8:	57 e4       	ldi	r21, 0x47	; 71
     aaa:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
     aae:	18 16       	cp	r1, r24
     ab0:	4c f5       	brge	.+82     	; 0xb04 <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e2       	ldi	r20, 0x20	; 32
     ac0:	51 e4       	ldi	r21, 0x41	; 65
     ac2:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     ac6:	dc 01       	movw	r26, r24
     ac8:	cb 01       	movw	r24, r22
     aca:	bc 01       	movw	r22, r24
     acc:	cd 01       	movw	r24, r26
     ace:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     ad2:	dc 01       	movw	r26, r24
     ad4:	cb 01       	movw	r24, r22
     ad6:	9e 83       	std	Y+6, r25	; 0x06
     ad8:	8d 83       	std	Y+5, r24	; 0x05
     ada:	0f c0       	rjmp	.+30     	; 0xafa <lcd_set_4bit+0x9a6>
     adc:	80 e7       	ldi	r24, 0x70	; 112
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	9c 83       	std	Y+4, r25	; 0x04
     ae2:	8b 83       	std	Y+3, r24	; 0x03
     ae4:	8b 81       	ldd	r24, Y+3	; 0x03
     ae6:	9c 81       	ldd	r25, Y+4	; 0x04
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	f1 f7       	brne	.-4      	; 0xae8 <lcd_set_4bit+0x994>
     aec:	9c 83       	std	Y+4, r25	; 0x04
     aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     af0:	8d 81       	ldd	r24, Y+5	; 0x05
     af2:	9e 81       	ldd	r25, Y+6	; 0x06
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	9e 83       	std	Y+6, r25	; 0x06
     af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     afa:	8d 81       	ldd	r24, Y+5	; 0x05
     afc:	9e 81       	ldd	r25, Y+6	; 0x06
     afe:	00 97       	sbiw	r24, 0x00	; 0
     b00:	69 f7       	brne	.-38     	; 0xadc <lcd_set_4bit+0x988>
     b02:	14 c0       	rjmp	.+40     	; 0xb2c <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b04:	6f 81       	ldd	r22, Y+7	; 0x07
     b06:	78 85       	ldd	r23, Y+8	; 0x08
     b08:	89 85       	ldd	r24, Y+9	; 0x09
     b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b0c:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     b10:	dc 01       	movw	r26, r24
     b12:	cb 01       	movw	r24, r22
     b14:	9e 83       	std	Y+6, r25	; 0x06
     b16:	8d 83       	std	Y+5, r24	; 0x05
     b18:	8d 81       	ldd	r24, Y+5	; 0x05
     b1a:	9e 81       	ldd	r25, Y+6	; 0x06
     b1c:	9a 83       	std	Y+2, r25	; 0x02
     b1e:	89 83       	std	Y+1, r24	; 0x01
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	9a 81       	ldd	r25, Y+2	; 0x02
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <lcd_set_4bit+0x9d0>
     b28:	9a 83       	std	Y+2, r25	; 0x02
     b2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b2c:	a8 e2       	ldi	r26, 0x28	; 40
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e8 e2       	ldi	r30, 0x28	; 40
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	8b 7f       	andi	r24, 0xFB	; 251
     b38:	8c 93       	st	X, r24

	
}
     b3a:	c0 59       	subi	r28, 0x90	; 144
     b3c:	df 4f       	sbci	r29, 0xFF	; 255
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	de bf       	out	0x3e, r29	; 62
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	cd bf       	out	0x3d, r28	; 61
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	08 95       	ret

00000b52 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	2e 97       	sbiw	r28, 0x0e	; 14
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	cd bf       	out	0x3d, r28	; 61
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e8       	ldi	r26, 0x80	; 128
     b6c:	bf e3       	ldi	r27, 0x3F	; 63
     b6e:	8b 87       	std	Y+11, r24	; 0x0b
     b70:	9c 87       	std	Y+12, r25	; 0x0c
     b72:	ad 87       	std	Y+13, r26	; 0x0d
     b74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b76:	6b 85       	ldd	r22, Y+11	; 0x0b
     b78:	7c 85       	ldd	r23, Y+12	; 0x0c
     b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b7e:	26 e6       	ldi	r18, 0x66	; 102
     b80:	36 e6       	ldi	r19, 0x66	; 102
     b82:	46 e6       	ldi	r20, 0x66	; 102
     b84:	55 e4       	ldi	r21, 0x45	; 69
     b86:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	8f 83       	std	Y+7, r24	; 0x07
     b90:	98 87       	std	Y+8, r25	; 0x08
     b92:	a9 87       	std	Y+9, r26	; 0x09
     b94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b96:	6f 81       	ldd	r22, Y+7	; 0x07
     b98:	78 85       	ldd	r23, Y+8	; 0x08
     b9a:	89 85       	ldd	r24, Y+9	; 0x09
     b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e8       	ldi	r20, 0x80	; 128
     ba4:	5f e3       	ldi	r21, 0x3F	; 63
     ba6:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
     baa:	88 23       	and	r24, r24
     bac:	2c f4       	brge	.+10     	; 0xbb8 <lcd_init+0x66>
		__ticks = 1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	9e 83       	std	Y+6, r25	; 0x06
     bb4:	8d 83       	std	Y+5, r24	; 0x05
     bb6:	3f c0       	rjmp	.+126    	; 0xc36 <lcd_init+0xe4>
	else if (__tmp > 65535)
     bb8:	6f 81       	ldd	r22, Y+7	; 0x07
     bba:	78 85       	ldd	r23, Y+8	; 0x08
     bbc:	89 85       	ldd	r24, Y+9	; 0x09
     bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	3f ef       	ldi	r19, 0xFF	; 255
     bc4:	4f e7       	ldi	r20, 0x7F	; 127
     bc6:	57 e4       	ldi	r21, 0x47	; 71
     bc8:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
     bcc:	18 16       	cp	r1, r24
     bce:	4c f5       	brge	.+82     	; 0xc22 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e2       	ldi	r20, 0x20	; 32
     bde:	51 e4       	ldi	r21, 0x41	; 65
     be0:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	bc 01       	movw	r22, r24
     bea:	cd 01       	movw	r24, r26
     bec:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	9e 83       	std	Y+6, r25	; 0x06
     bf6:	8d 83       	std	Y+5, r24	; 0x05
     bf8:	0f c0       	rjmp	.+30     	; 0xc18 <lcd_init+0xc6>
     bfa:	80 e7       	ldi	r24, 0x70	; 112
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	9c 83       	std	Y+4, r25	; 0x04
     c00:	8b 83       	std	Y+3, r24	; 0x03
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	9c 81       	ldd	r25, Y+4	; 0x04
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <lcd_init+0xb4>
     c0a:	9c 83       	std	Y+4, r25	; 0x04
     c0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c0e:	8d 81       	ldd	r24, Y+5	; 0x05
     c10:	9e 81       	ldd	r25, Y+6	; 0x06
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	9e 83       	std	Y+6, r25	; 0x06
     c16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c18:	8d 81       	ldd	r24, Y+5	; 0x05
     c1a:	9e 81       	ldd	r25, Y+6	; 0x06
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	69 f7       	brne	.-38     	; 0xbfa <lcd_init+0xa8>
     c20:	14 c0       	rjmp	.+40     	; 0xc4a <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c22:	6f 81       	ldd	r22, Y+7	; 0x07
     c24:	78 85       	ldd	r23, Y+8	; 0x08
     c26:	89 85       	ldd	r24, Y+9	; 0x09
     c28:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2a:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	9e 83       	std	Y+6, r25	; 0x06
     c34:	8d 83       	std	Y+5, r24	; 0x05
     c36:	8d 81       	ldd	r24, Y+5	; 0x05
     c38:	9e 81       	ldd	r25, Y+6	; 0x06
     c3a:	9a 83       	std	Y+2, r25	; 0x02
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	9a 81       	ldd	r25, Y+2	; 0x02
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <lcd_init+0xf0>
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c4a:	88 e2       	ldi	r24, 0x28	; 40
     c4c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
	lcd_wr_command(0x01);
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
	lcd_wr_command(0x06);
     c56:	86 e0       	ldi	r24, 0x06	; 6
     c58:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
	lcd_wr_command(0x0E);
     c5c:	8e e0       	ldi	r24, 0x0E	; 14
     c5e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
	lcd_wr_command(0x80);
     c62:	80 e8       	ldi	r24, 0x80	; 128
     c64:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
		
}
     c68:	2e 96       	adiw	r28, 0x0e	; 14
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <lcd_wr_command>:

	 
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	6e 97       	sbiw	r28, 0x1e	; 30
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     c90:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c92:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     c94:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c96:	80 7f       	andi	r24, 0xF0	; 240
     c98:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c9a:	a8 e2       	ldi	r26, 0x28	; 40
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e8 e2       	ldi	r30, 0x28	; 40
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	8f 70       	andi	r24, 0x0F	; 15
     ca6:	8c 93       	st	X, r24
	lcd_port |= temp;
     ca8:	a8 e2       	ldi	r26, 0x28	; 40
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e8 e2       	ldi	r30, 0x28	; 40
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	90 81       	ld	r25, Z
     cb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cb4:	89 2b       	or	r24, r25
     cb6:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     cb8:	a8 e2       	ldi	r26, 0x28	; 40
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 e2       	ldi	r30, 0x28	; 40
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8e 7f       	andi	r24, 0xFE	; 254
     cc4:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     cc6:	a8 e2       	ldi	r26, 0x28	; 40
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e8 e2       	ldi	r30, 0x28	; 40
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	8d 7f       	andi	r24, 0xFD	; 253
     cd2:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     cd4:	a8 e2       	ldi	r26, 0x28	; 40
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e8 e2       	ldi	r30, 0x28	; 40
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	84 60       	ori	r24, 0x04	; 4
     ce0:	8c 93       	st	X, r24
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 ea       	ldi	r26, 0xA0	; 160
     ce8:	b0 e4       	ldi	r27, 0x40	; 64
     cea:	89 8f       	std	Y+25, r24	; 0x19
     cec:	9a 8f       	std	Y+26, r25	; 0x1a
     cee:	ab 8f       	std	Y+27, r26	; 0x1b
     cf0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf2:	69 8d       	ldd	r22, Y+25	; 0x19
     cf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cfa:	26 e6       	ldi	r18, 0x66	; 102
     cfc:	36 e6       	ldi	r19, 0x66	; 102
     cfe:	46 e6       	ldi	r20, 0x66	; 102
     d00:	55 e4       	ldi	r21, 0x45	; 69
     d02:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	8d 8b       	std	Y+21, r24	; 0x15
     d0c:	9e 8b       	std	Y+22, r25	; 0x16
     d0e:	af 8b       	std	Y+23, r26	; 0x17
     d10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d12:	6d 89       	ldd	r22, Y+21	; 0x15
     d14:	7e 89       	ldd	r23, Y+22	; 0x16
     d16:	8f 89       	ldd	r24, Y+23	; 0x17
     d18:	98 8d       	ldd	r25, Y+24	; 0x18
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e8       	ldi	r20, 0x80	; 128
     d20:	5f e3       	ldi	r21, 0x3F	; 63
     d22:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
     d26:	88 23       	and	r24, r24
     d28:	2c f4       	brge	.+10     	; 0xd34 <lcd_wr_command+0xba>
		__ticks = 1;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	9c 8b       	std	Y+20, r25	; 0x14
     d30:	8b 8b       	std	Y+19, r24	; 0x13
     d32:	3f c0       	rjmp	.+126    	; 0xdb2 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d34:	6d 89       	ldd	r22, Y+21	; 0x15
     d36:	7e 89       	ldd	r23, Y+22	; 0x16
     d38:	8f 89       	ldd	r24, Y+23	; 0x17
     d3a:	98 8d       	ldd	r25, Y+24	; 0x18
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	3f ef       	ldi	r19, 0xFF	; 255
     d40:	4f e7       	ldi	r20, 0x7F	; 127
     d42:	57 e4       	ldi	r21, 0x47	; 71
     d44:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
     d48:	18 16       	cp	r1, r24
     d4a:	4c f5       	brge	.+82     	; 0xd9e <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4c:	69 8d       	ldd	r22, Y+25	; 0x19
     d4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d50:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d52:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e2       	ldi	r20, 0x20	; 32
     d5a:	51 e4       	ldi	r21, 0x41	; 65
     d5c:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	bc 01       	movw	r22, r24
     d66:	cd 01       	movw	r24, r26
     d68:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	9c 8b       	std	Y+20, r25	; 0x14
     d72:	8b 8b       	std	Y+19, r24	; 0x13
     d74:	0f c0       	rjmp	.+30     	; 0xd94 <lcd_wr_command+0x11a>
     d76:	80 e7       	ldi	r24, 0x70	; 112
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	9a 8b       	std	Y+18, r25	; 0x12
     d7c:	89 8b       	std	Y+17, r24	; 0x11
     d7e:	89 89       	ldd	r24, Y+17	; 0x11
     d80:	9a 89       	ldd	r25, Y+18	; 0x12
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <lcd_wr_command+0x108>
     d86:	9a 8b       	std	Y+18, r25	; 0x12
     d88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8a:	8b 89       	ldd	r24, Y+19	; 0x13
     d8c:	9c 89       	ldd	r25, Y+20	; 0x14
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	9c 8b       	std	Y+20, r25	; 0x14
     d92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d94:	8b 89       	ldd	r24, Y+19	; 0x13
     d96:	9c 89       	ldd	r25, Y+20	; 0x14
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	69 f7       	brne	.-38     	; 0xd76 <lcd_wr_command+0xfc>
     d9c:	14 c0       	rjmp	.+40     	; 0xdc6 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9e:	6d 89       	ldd	r22, Y+21	; 0x15
     da0:	7e 89       	ldd	r23, Y+22	; 0x16
     da2:	8f 89       	ldd	r24, Y+23	; 0x17
     da4:	98 8d       	ldd	r25, Y+24	; 0x18
     da6:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	9c 8b       	std	Y+20, r25	; 0x14
     db0:	8b 8b       	std	Y+19, r24	; 0x13
     db2:	8b 89       	ldd	r24, Y+19	; 0x13
     db4:	9c 89       	ldd	r25, Y+20	; 0x14
     db6:	98 8b       	std	Y+16, r25	; 0x10
     db8:	8f 87       	std	Y+15, r24	; 0x0f
     dba:	8f 85       	ldd	r24, Y+15	; 0x0f
     dbc:	98 89       	ldd	r25, Y+16	; 0x10
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <lcd_wr_command+0x144>
     dc2:	98 8b       	std	Y+16, r25	; 0x10
     dc4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     dc6:	a8 e2       	ldi	r26, 0x28	; 40
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e2       	ldi	r30, 0x28	; 40
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8b 7f       	andi	r24, 0xFB	; 251
     dd2:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     dd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd6:	8f 70       	andi	r24, 0x0F	; 15
     dd8:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     dda:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ddc:	82 95       	swap	r24
     dde:	80 7f       	andi	r24, 0xF0	; 240
     de0:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     de2:	a8 e2       	ldi	r26, 0x28	; 40
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e2       	ldi	r30, 0x28	; 40
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	8f 70       	andi	r24, 0x0F	; 15
     dee:	8c 93       	st	X, r24
	lcd_port |= cmd;
     df0:	a8 e2       	ldi	r26, 0x28	; 40
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e8 e2       	ldi	r30, 0x28	; 40
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	90 81       	ld	r25, Z
     dfa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dfc:	89 2b       	or	r24, r25
     dfe:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     e00:	a8 e2       	ldi	r26, 0x28	; 40
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e8 e2       	ldi	r30, 0x28	; 40
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	8e 7f       	andi	r24, 0xFE	; 254
     e0c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     e0e:	a8 e2       	ldi	r26, 0x28	; 40
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e8 e2       	ldi	r30, 0x28	; 40
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8d 7f       	andi	r24, 0xFD	; 253
     e1a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     e1c:	a8 e2       	ldi	r26, 0x28	; 40
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e8 e2       	ldi	r30, 0x28	; 40
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	84 60       	ori	r24, 0x04	; 4
     e28:	8c 93       	st	X, r24
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	a0 ea       	ldi	r26, 0xA0	; 160
     e30:	b0 e4       	ldi	r27, 0x40	; 64
     e32:	8b 87       	std	Y+11, r24	; 0x0b
     e34:	9c 87       	std	Y+12, r25	; 0x0c
     e36:	ad 87       	std	Y+13, r26	; 0x0d
     e38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e40:	9e 85       	ldd	r25, Y+14	; 0x0e
     e42:	26 e6       	ldi	r18, 0x66	; 102
     e44:	36 e6       	ldi	r19, 0x66	; 102
     e46:	46 e6       	ldi	r20, 0x66	; 102
     e48:	55 e4       	ldi	r21, 0x45	; 69
     e4a:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	8f 83       	std	Y+7, r24	; 0x07
     e54:	98 87       	std	Y+8, r25	; 0x08
     e56:	a9 87       	std	Y+9, r26	; 0x09
     e58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e5a:	6f 81       	ldd	r22, Y+7	; 0x07
     e5c:	78 85       	ldd	r23, Y+8	; 0x08
     e5e:	89 85       	ldd	r24, Y+9	; 0x09
     e60:	9a 85       	ldd	r25, Y+10	; 0x0a
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e8       	ldi	r20, 0x80	; 128
     e68:	5f e3       	ldi	r21, 0x3F	; 63
     e6a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
     e6e:	88 23       	and	r24, r24
     e70:	2c f4       	brge	.+10     	; 0xe7c <lcd_wr_command+0x202>
		__ticks = 1;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	9e 83       	std	Y+6, r25	; 0x06
     e78:	8d 83       	std	Y+5, r24	; 0x05
     e7a:	3f c0       	rjmp	.+126    	; 0xefa <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e7c:	6f 81       	ldd	r22, Y+7	; 0x07
     e7e:	78 85       	ldd	r23, Y+8	; 0x08
     e80:	89 85       	ldd	r24, Y+9	; 0x09
     e82:	9a 85       	ldd	r25, Y+10	; 0x0a
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	3f ef       	ldi	r19, 0xFF	; 255
     e88:	4f e7       	ldi	r20, 0x7F	; 127
     e8a:	57 e4       	ldi	r21, 0x47	; 71
     e8c:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
     e90:	18 16       	cp	r1, r24
     e92:	4c f5       	brge	.+82     	; 0xee6 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e94:	6b 85       	ldd	r22, Y+11	; 0x0b
     e96:	7c 85       	ldd	r23, Y+12	; 0x0c
     e98:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e2       	ldi	r20, 0x20	; 32
     ea2:	51 e4       	ldi	r21, 0x41	; 65
     ea4:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	bc 01       	movw	r22, r24
     eae:	cd 01       	movw	r24, r26
     eb0:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	9e 83       	std	Y+6, r25	; 0x06
     eba:	8d 83       	std	Y+5, r24	; 0x05
     ebc:	0f c0       	rjmp	.+30     	; 0xedc <lcd_wr_command+0x262>
     ebe:	80 e7       	ldi	r24, 0x70	; 112
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	9c 83       	std	Y+4, r25	; 0x04
     ec4:	8b 83       	std	Y+3, r24	; 0x03
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	9c 81       	ldd	r25, Y+4	; 0x04
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <lcd_wr_command+0x250>
     ece:	9c 83       	std	Y+4, r25	; 0x04
     ed0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	9e 81       	ldd	r25, Y+6	; 0x06
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	9e 83       	std	Y+6, r25	; 0x06
     eda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	9e 81       	ldd	r25, Y+6	; 0x06
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	69 f7       	brne	.-38     	; 0xebe <lcd_wr_command+0x244>
     ee4:	14 c0       	rjmp	.+40     	; 0xf0e <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee6:	6f 81       	ldd	r22, Y+7	; 0x07
     ee8:	78 85       	ldd	r23, Y+8	; 0x08
     eea:	89 85       	ldd	r24, Y+9	; 0x09
     eec:	9a 85       	ldd	r25, Y+10	; 0x0a
     eee:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	9e 83       	std	Y+6, r25	; 0x06
     ef8:	8d 83       	std	Y+5, r24	; 0x05
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	9e 81       	ldd	r25, Y+6	; 0x06
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	9a 81       	ldd	r25, Y+2	; 0x02
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <lcd_wr_command+0x28c>
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     f0e:	a8 e2       	ldi	r26, 0x28	; 40
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e8 e2       	ldi	r30, 0x28	; 40
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8b 7f       	andi	r24, 0xFB	; 251
     f1a:	8c 93       	st	X, r24
}
     f1c:	6e 96       	adiw	r28, 0x1e	; 30
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	6e 97       	sbiw	r28, 0x1e	; 30
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f44:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f46:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f48:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f4a:	80 7f       	andi	r24, 0xF0	; 240
     f4c:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f4e:	a8 e2       	ldi	r26, 0x28	; 40
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e8 e2       	ldi	r30, 0x28	; 40
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8f 70       	andi	r24, 0x0F	; 15
     f5a:	8c 93       	st	X, r24
	lcd_port |= temp;
     f5c:	a8 e2       	ldi	r26, 0x28	; 40
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e8 e2       	ldi	r30, 0x28	; 40
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	90 81       	ld	r25, Z
     f66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f68:	89 2b       	or	r24, r25
     f6a:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f6c:	a8 e2       	ldi	r26, 0x28	; 40
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e8 e2       	ldi	r30, 0x28	; 40
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	81 60       	ori	r24, 0x01	; 1
     f78:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f7a:	a8 e2       	ldi	r26, 0x28	; 40
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e8 e2       	ldi	r30, 0x28	; 40
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	8d 7f       	andi	r24, 0xFD	; 253
     f86:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f88:	a8 e2       	ldi	r26, 0x28	; 40
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e8 e2       	ldi	r30, 0x28	; 40
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	84 60       	ori	r24, 0x04	; 4
     f94:	8c 93       	st	X, r24
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a0 ea       	ldi	r26, 0xA0	; 160
     f9c:	b0 e4       	ldi	r27, 0x40	; 64
     f9e:	89 8f       	std	Y+25, r24	; 0x19
     fa0:	9a 8f       	std	Y+26, r25	; 0x1a
     fa2:	ab 8f       	std	Y+27, r26	; 0x1b
     fa4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa6:	69 8d       	ldd	r22, Y+25	; 0x19
     fa8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     faa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fae:	26 e6       	ldi	r18, 0x66	; 102
     fb0:	36 e6       	ldi	r19, 0x66	; 102
     fb2:	46 e6       	ldi	r20, 0x66	; 102
     fb4:	55 e4       	ldi	r21, 0x45	; 69
     fb6:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	8d 8b       	std	Y+21, r24	; 0x15
     fc0:	9e 8b       	std	Y+22, r25	; 0x16
     fc2:	af 8b       	std	Y+23, r26	; 0x17
     fc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fc6:	6d 89       	ldd	r22, Y+21	; 0x15
     fc8:	7e 89       	ldd	r23, Y+22	; 0x16
     fca:	8f 89       	ldd	r24, Y+23	; 0x17
     fcc:	98 8d       	ldd	r25, Y+24	; 0x18
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e8       	ldi	r20, 0x80	; 128
     fd4:	5f e3       	ldi	r21, 0x3F	; 63
     fd6:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
     fda:	88 23       	and	r24, r24
     fdc:	2c f4       	brge	.+10     	; 0xfe8 <lcd_wr_char+0xba>
		__ticks = 1;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	9c 8b       	std	Y+20, r25	; 0x14
     fe4:	8b 8b       	std	Y+19, r24	; 0x13
     fe6:	3f c0       	rjmp	.+126    	; 0x1066 <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     fe8:	6d 89       	ldd	r22, Y+21	; 0x15
     fea:	7e 89       	ldd	r23, Y+22	; 0x16
     fec:	8f 89       	ldd	r24, Y+23	; 0x17
     fee:	98 8d       	ldd	r25, Y+24	; 0x18
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	3f ef       	ldi	r19, 0xFF	; 255
     ff4:	4f e7       	ldi	r20, 0x7F	; 127
     ff6:	57 e4       	ldi	r21, 0x47	; 71
     ff8:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
     ffc:	18 16       	cp	r1, r24
     ffe:	4c f5       	brge	.+82     	; 0x1052 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1000:	69 8d       	ldd	r22, Y+25	; 0x19
    1002:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1004:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1006:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e2       	ldi	r20, 0x20	; 32
    100e:	51 e4       	ldi	r21, 0x41	; 65
    1010:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	bc 01       	movw	r22, r24
    101a:	cd 01       	movw	r24, r26
    101c:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	9c 8b       	std	Y+20, r25	; 0x14
    1026:	8b 8b       	std	Y+19, r24	; 0x13
    1028:	0f c0       	rjmp	.+30     	; 0x1048 <lcd_wr_char+0x11a>
    102a:	80 e7       	ldi	r24, 0x70	; 112
    102c:	91 e0       	ldi	r25, 0x01	; 1
    102e:	9a 8b       	std	Y+18, r25	; 0x12
    1030:	89 8b       	std	Y+17, r24	; 0x11
    1032:	89 89       	ldd	r24, Y+17	; 0x11
    1034:	9a 89       	ldd	r25, Y+18	; 0x12
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <lcd_wr_char+0x108>
    103a:	9a 8b       	std	Y+18, r25	; 0x12
    103c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103e:	8b 89       	ldd	r24, Y+19	; 0x13
    1040:	9c 89       	ldd	r25, Y+20	; 0x14
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	9c 8b       	std	Y+20, r25	; 0x14
    1046:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1048:	8b 89       	ldd	r24, Y+19	; 0x13
    104a:	9c 89       	ldd	r25, Y+20	; 0x14
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	69 f7       	brne	.-38     	; 0x102a <lcd_wr_char+0xfc>
    1050:	14 c0       	rjmp	.+40     	; 0x107a <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1052:	6d 89       	ldd	r22, Y+21	; 0x15
    1054:	7e 89       	ldd	r23, Y+22	; 0x16
    1056:	8f 89       	ldd	r24, Y+23	; 0x17
    1058:	98 8d       	ldd	r25, Y+24	; 0x18
    105a:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	9c 8b       	std	Y+20, r25	; 0x14
    1064:	8b 8b       	std	Y+19, r24	; 0x13
    1066:	8b 89       	ldd	r24, Y+19	; 0x13
    1068:	9c 89       	ldd	r25, Y+20	; 0x14
    106a:	98 8b       	std	Y+16, r25	; 0x10
    106c:	8f 87       	std	Y+15, r24	; 0x0f
    106e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1070:	98 89       	ldd	r25, Y+16	; 0x10
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <lcd_wr_char+0x144>
    1076:	98 8b       	std	Y+16, r25	; 0x10
    1078:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    107a:	a8 e2       	ldi	r26, 0x28	; 40
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e2       	ldi	r30, 0x28	; 40
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8b 7f       	andi	r24, 0xFB	; 251
    1086:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    1088:	8e 8d       	ldd	r24, Y+30	; 0x1e
    108a:	8f 70       	andi	r24, 0x0F	; 15
    108c:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    108e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1090:	82 95       	swap	r24
    1092:	80 7f       	andi	r24, 0xF0	; 240
    1094:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1096:	a8 e2       	ldi	r26, 0x28	; 40
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e8 e2       	ldi	r30, 0x28	; 40
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	8f 70       	andi	r24, 0x0F	; 15
    10a2:	8c 93       	st	X, r24
	lcd_port |= letter;
    10a4:	a8 e2       	ldi	r26, 0x28	; 40
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e8 e2       	ldi	r30, 0x28	; 40
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	90 81       	ld	r25, Z
    10ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10b0:	89 2b       	or	r24, r25
    10b2:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    10b4:	a8 e2       	ldi	r26, 0x28	; 40
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e8 e2       	ldi	r30, 0x28	; 40
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	81 60       	ori	r24, 0x01	; 1
    10c0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    10c2:	a8 e2       	ldi	r26, 0x28	; 40
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e8 e2       	ldi	r30, 0x28	; 40
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8d 7f       	andi	r24, 0xFD	; 253
    10ce:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10d0:	a8 e2       	ldi	r26, 0x28	; 40
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e8 e2       	ldi	r30, 0x28	; 40
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	84 60       	ori	r24, 0x04	; 4
    10dc:	8c 93       	st	X, r24
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	a0 ea       	ldi	r26, 0xA0	; 160
    10e4:	b0 e4       	ldi	r27, 0x40	; 64
    10e6:	8b 87       	std	Y+11, r24	; 0x0b
    10e8:	9c 87       	std	Y+12, r25	; 0x0c
    10ea:	ad 87       	std	Y+13, r26	; 0x0d
    10ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f6:	26 e6       	ldi	r18, 0x66	; 102
    10f8:	36 e6       	ldi	r19, 0x66	; 102
    10fa:	46 e6       	ldi	r20, 0x66	; 102
    10fc:	55 e4       	ldi	r21, 0x45	; 69
    10fe:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	8f 83       	std	Y+7, r24	; 0x07
    1108:	98 87       	std	Y+8, r25	; 0x08
    110a:	a9 87       	std	Y+9, r26	; 0x09
    110c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    110e:	6f 81       	ldd	r22, Y+7	; 0x07
    1110:	78 85       	ldd	r23, Y+8	; 0x08
    1112:	89 85       	ldd	r24, Y+9	; 0x09
    1114:	9a 85       	ldd	r25, Y+10	; 0x0a
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	40 e8       	ldi	r20, 0x80	; 128
    111c:	5f e3       	ldi	r21, 0x3F	; 63
    111e:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
    1122:	88 23       	and	r24, r24
    1124:	2c f4       	brge	.+10     	; 0x1130 <lcd_wr_char+0x202>
		__ticks = 1;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	9e 83       	std	Y+6, r25	; 0x06
    112c:	8d 83       	std	Y+5, r24	; 0x05
    112e:	3f c0       	rjmp	.+126    	; 0x11ae <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1130:	6f 81       	ldd	r22, Y+7	; 0x07
    1132:	78 85       	ldd	r23, Y+8	; 0x08
    1134:	89 85       	ldd	r24, Y+9	; 0x09
    1136:	9a 85       	ldd	r25, Y+10	; 0x0a
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	3f ef       	ldi	r19, 0xFF	; 255
    113c:	4f e7       	ldi	r20, 0x7F	; 127
    113e:	57 e4       	ldi	r21, 0x47	; 71
    1140:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
    1144:	18 16       	cp	r1, r24
    1146:	4c f5       	brge	.+82     	; 0x119a <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1148:	6b 85       	ldd	r22, Y+11	; 0x0b
    114a:	7c 85       	ldd	r23, Y+12	; 0x0c
    114c:	8d 85       	ldd	r24, Y+13	; 0x0d
    114e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e2       	ldi	r20, 0x20	; 32
    1156:	51 e4       	ldi	r21, 0x41	; 65
    1158:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	bc 01       	movw	r22, r24
    1162:	cd 01       	movw	r24, r26
    1164:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	9e 83       	std	Y+6, r25	; 0x06
    116e:	8d 83       	std	Y+5, r24	; 0x05
    1170:	0f c0       	rjmp	.+30     	; 0x1190 <lcd_wr_char+0x262>
    1172:	80 e7       	ldi	r24, 0x70	; 112
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	9c 83       	std	Y+4, r25	; 0x04
    1178:	8b 83       	std	Y+3, r24	; 0x03
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	9c 81       	ldd	r25, Y+4	; 0x04
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	f1 f7       	brne	.-4      	; 0x117e <lcd_wr_char+0x250>
    1182:	9c 83       	std	Y+4, r25	; 0x04
    1184:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	9e 83       	std	Y+6, r25	; 0x06
    118e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1190:	8d 81       	ldd	r24, Y+5	; 0x05
    1192:	9e 81       	ldd	r25, Y+6	; 0x06
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	69 f7       	brne	.-38     	; 0x1172 <lcd_wr_char+0x244>
    1198:	14 c0       	rjmp	.+40     	; 0x11c2 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119a:	6f 81       	ldd	r22, Y+7	; 0x07
    119c:	78 85       	ldd	r23, Y+8	; 0x08
    119e:	89 85       	ldd	r24, Y+9	; 0x09
    11a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a2:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	9a 83       	std	Y+2, r25	; 0x02
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <lcd_wr_char+0x28c>
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    11c2:	a8 e2       	ldi	r26, 0x28	; 40
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e8 e2       	ldi	r30, 0x28	; 40
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8b 7f       	andi	r24, 0xFB	; 251
    11ce:	8c 93       	st	X, r24
}
    11d0:	6e 96       	adiw	r28, 0x1e	; 30
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11ea:	80 e8       	ldi	r24, 0x80	; 128
    11ec:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	0f 92       	push	r0
    11fc:	0f 92       	push	r0
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	0a c0       	rjmp	.+20     	; 0x121c <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1208:	e9 81       	ldd	r30, Y+1	; 0x01
    120a:	fa 81       	ldd	r31, Y+2	; 0x02
    120c:	80 81       	ld	r24, Z
    120e:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_wr_char>
		str++;
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	9a 81       	ldd	r25, Y+2	; 0x02
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	9a 83       	std	Y+2, r25	; 0x02
    121a:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    121c:	e9 81       	ldd	r30, Y+1	; 0x01
    121e:	fa 81       	ldd	r31, Y+2	; 0x02
    1220:	80 81       	ld	r24, Z
    1222:	88 23       	and	r24, r24
    1224:	89 f7       	brne	.-30     	; 0x1208 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	00 d0       	rcall	.+0      	; 0x1236 <lcd_cursor+0x6>
    1236:	0f 92       	push	r0
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3c 83       	std	Y+4, r19	; 0x04
    1248:	2b 83       	std	Y+3, r18	; 0x03
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	91 05       	cpc	r25, r1
    1252:	d9 f0       	breq	.+54     	; 0x128a <lcd_cursor+0x5a>
    1254:	2b 81       	ldd	r18, Y+3	; 0x03
    1256:	3c 81       	ldd	r19, Y+4	; 0x04
    1258:	23 30       	cpi	r18, 0x03	; 3
    125a:	31 05       	cpc	r19, r1
    125c:	34 f4       	brge	.+12     	; 0x126a <lcd_cursor+0x3a>
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	91 05       	cpc	r25, r1
    1266:	61 f0       	breq	.+24     	; 0x1280 <lcd_cursor+0x50>
    1268:	1e c0       	rjmp	.+60     	; 0x12a6 <lcd_cursor+0x76>
    126a:	2b 81       	ldd	r18, Y+3	; 0x03
    126c:	3c 81       	ldd	r19, Y+4	; 0x04
    126e:	23 30       	cpi	r18, 0x03	; 3
    1270:	31 05       	cpc	r19, r1
    1272:	81 f0       	breq	.+32     	; 0x1294 <lcd_cursor+0x64>
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	84 30       	cpi	r24, 0x04	; 4
    127a:	91 05       	cpc	r25, r1
    127c:	81 f0       	breq	.+32     	; 0x129e <lcd_cursor+0x6e>
    127e:	13 c0       	rjmp	.+38     	; 0x12a6 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	81 58       	subi	r24, 0x81	; 129
    1284:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
    1288:	0e c0       	rjmp	.+28     	; 0x12a6 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	81 54       	subi	r24, 0x41	; 65
    128e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
    1292:	09 c0       	rjmp	.+18     	; 0x12a6 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	8d 56       	subi	r24, 0x6D	; 109
    1298:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
    129c:	04 c0       	rjmp	.+8      	; 0x12a6 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	8d 52       	subi	r24, 0x2D	; 45
    12a2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <lcd_wr_command>
		default: break;
	}
}
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	27 97       	sbiw	r28, 0x07	; 7
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	8a 83       	std	Y+2, r24	; 0x02
    12ca:	6b 83       	std	Y+3, r22	; 0x03
    12cc:	5d 83       	std	Y+5, r21	; 0x05
    12ce:	4c 83       	std	Y+4, r20	; 0x04
    12d0:	3f 83       	std	Y+7, r19	; 0x07
    12d2:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12d4:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	88 23       	and	r24, r24
    12da:	19 f0       	breq	.+6      	; 0x12e2 <lcd_print+0x2e>
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 23       	and	r24, r24
    12e0:	19 f4       	brne	.+6      	; 0x12e8 <lcd_print+0x34>
	{
		lcd_home();
    12e2:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <lcd_home>
    12e6:	04 c0       	rjmp	.+8      	; 0x12f0 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	6b 81       	ldd	r22, Y+3	; 0x03
    12ec:	0e 94 18 09 	call	0x1230	; 0x1230 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    12f0:	8e 81       	ldd	r24, Y+6	; 0x06
    12f2:	9f 81       	ldd	r25, Y+7	; 0x07
    12f4:	85 30       	cpi	r24, 0x05	; 5
    12f6:	91 05       	cpc	r25, r1
    12f8:	19 f0       	breq	.+6      	; 0x1300 <lcd_print+0x4c>
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	a9 f4       	brne	.+42     	; 0x132a <lcd_print+0x76>
	{
		million=value/10000+48;
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	9d 81       	ldd	r25, Y+5	; 0x05
    1304:	20 e1       	ldi	r18, 0x10	; 16
    1306:	37 e2       	ldi	r19, 0x27	; 39
    1308:	b9 01       	movw	r22, r18
    130a:	0e 94 b7 19 	call	0x336e	; 0x336e <__udivmodhi4>
    130e:	cb 01       	movw	r24, r22
    1310:	c0 96       	adiw	r24, 0x30	; 48
    1312:	90 93 19 03 	sts	0x0319, r25
    1316:	80 93 18 03 	sts	0x0318, r24
		lcd_wr_char(million);
    131a:	80 91 18 03 	lds	r24, 0x0318
    131e:	90 91 19 03 	lds	r25, 0x0319
    1322:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_wr_char>
		flag=1;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    132a:	8e 81       	ldd	r24, Y+6	; 0x06
    132c:	9f 81       	ldd	r25, Y+7	; 0x07
    132e:	84 30       	cpi	r24, 0x04	; 4
    1330:	91 05       	cpc	r25, r1
    1332:	19 f0       	breq	.+6      	; 0x133a <lcd_print+0x86>
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	11 f5       	brne	.+68     	; 0x137e <lcd_print+0xca>
	{
		temp = value/1000;
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	9d 81       	ldd	r25, Y+5	; 0x05
    133e:	28 ee       	ldi	r18, 0xE8	; 232
    1340:	33 e0       	ldi	r19, 0x03	; 3
    1342:	b9 01       	movw	r22, r18
    1344:	0e 94 b7 19 	call	0x336e	; 0x336e <__udivmodhi4>
    1348:	cb 01       	movw	r24, r22
    134a:	90 93 1b 03 	sts	0x031B, r25
    134e:	80 93 1a 03 	sts	0x031A, r24
		thousand = temp%10 + 48;
    1352:	80 91 1a 03 	lds	r24, 0x031A
    1356:	90 91 1b 03 	lds	r25, 0x031B
    135a:	2a e0       	ldi	r18, 0x0A	; 10
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	b9 01       	movw	r22, r18
    1360:	0e 94 b7 19 	call	0x336e	; 0x336e <__udivmodhi4>
    1364:	c0 96       	adiw	r24, 0x30	; 48
    1366:	90 93 24 03 	sts	0x0324, r25
    136a:	80 93 23 03 	sts	0x0323, r24
		lcd_wr_char(thousand);
    136e:	80 91 23 03 	lds	r24, 0x0323
    1372:	90 91 24 03 	lds	r25, 0x0324
    1376:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_wr_char>
		flag=1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    137e:	8e 81       	ldd	r24, Y+6	; 0x06
    1380:	9f 81       	ldd	r25, Y+7	; 0x07
    1382:	83 30       	cpi	r24, 0x03	; 3
    1384:	91 05       	cpc	r25, r1
    1386:	19 f0       	breq	.+6      	; 0x138e <lcd_print+0xda>
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	11 f5       	brne	.+68     	; 0x13d2 <lcd_print+0x11e>
	{
		temp = value/100;
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	24 e6       	ldi	r18, 0x64	; 100
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	b9 01       	movw	r22, r18
    1398:	0e 94 b7 19 	call	0x336e	; 0x336e <__udivmodhi4>
    139c:	cb 01       	movw	r24, r22
    139e:	90 93 1b 03 	sts	0x031B, r25
    13a2:	80 93 1a 03 	sts	0x031A, r24
		hundred = temp%10 + 48;
    13a6:	80 91 1a 03 	lds	r24, 0x031A
    13aa:	90 91 1b 03 	lds	r25, 0x031B
    13ae:	2a e0       	ldi	r18, 0x0A	; 10
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	b9 01       	movw	r22, r18
    13b4:	0e 94 b7 19 	call	0x336e	; 0x336e <__udivmodhi4>
    13b8:	c0 96       	adiw	r24, 0x30	; 48
    13ba:	90 93 20 03 	sts	0x0320, r25
    13be:	80 93 1f 03 	sts	0x031F, r24
		lcd_wr_char(hundred);
    13c2:	80 91 1f 03 	lds	r24, 0x031F
    13c6:	90 91 20 03 	lds	r25, 0x0320
    13ca:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_wr_char>
		flag=1;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13d2:	8e 81       	ldd	r24, Y+6	; 0x06
    13d4:	9f 81       	ldd	r25, Y+7	; 0x07
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	91 05       	cpc	r25, r1
    13da:	19 f0       	breq	.+6      	; 0x13e2 <lcd_print+0x12e>
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	11 f5       	brne	.+68     	; 0x1426 <lcd_print+0x172>
	{
		temp = value/10;
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	2a e0       	ldi	r18, 0x0A	; 10
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	b9 01       	movw	r22, r18
    13ec:	0e 94 b7 19 	call	0x336e	; 0x336e <__udivmodhi4>
    13f0:	cb 01       	movw	r24, r22
    13f2:	90 93 1b 03 	sts	0x031B, r25
    13f6:	80 93 1a 03 	sts	0x031A, r24
		tens = temp%10 + 48;
    13fa:	80 91 1a 03 	lds	r24, 0x031A
    13fe:	90 91 1b 03 	lds	r25, 0x031B
    1402:	2a e0       	ldi	r18, 0x0A	; 10
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	b9 01       	movw	r22, r18
    1408:	0e 94 b7 19 	call	0x336e	; 0x336e <__udivmodhi4>
    140c:	c0 96       	adiw	r24, 0x30	; 48
    140e:	90 93 1d 03 	sts	0x031D, r25
    1412:	80 93 1c 03 	sts	0x031C, r24
		lcd_wr_char(tens);
    1416:	80 91 1c 03 	lds	r24, 0x031C
    141a:	90 91 1d 03 	lds	r25, 0x031D
    141e:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_wr_char>
		flag=1;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1426:	8e 81       	ldd	r24, Y+6	; 0x06
    1428:	9f 81       	ldd	r25, Y+7	; 0x07
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	91 05       	cpc	r25, r1
    142e:	19 f0       	breq	.+6      	; 0x1436 <lcd_print+0x182>
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	91 f4       	brne	.+36     	; 0x145a <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	9d 81       	ldd	r25, Y+5	; 0x05
    143a:	2a e0       	ldi	r18, 0x0A	; 10
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	b9 01       	movw	r22, r18
    1440:	0e 94 b7 19 	call	0x336e	; 0x336e <__udivmodhi4>
    1444:	c0 96       	adiw	r24, 0x30	; 48
    1446:	90 93 22 03 	sts	0x0322, r25
    144a:	80 93 21 03 	sts	0x0321, r24
		lcd_wr_char(unit);
    144e:	80 91 21 03 	lds	r24, 0x0321
    1452:	90 91 22 03 	lds	r25, 0x0322
    1456:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_wr_char>
	}
	if(digits>5)
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	9f 81       	ldd	r25, Y+7	; 0x07
    145e:	86 30       	cpi	r24, 0x06	; 6
    1460:	91 05       	cpc	r25, r1
    1462:	1c f0       	brlt	.+6      	; 0x146a <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    1464:	85 e4       	ldi	r24, 0x45	; 69
    1466:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_wr_char>
	}
	
}
    146a:	27 96       	adiw	r28, 0x07	; 7
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <uart0_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
    1484:	e1 ec       	ldi	r30, 0xC1	; 193
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    148a:	e0 ec       	ldi	r30, 0xC0	; 192
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	10 82       	st	Z, r1
 UCSR0C = 0x06;
    1490:	e2 ec       	ldi	r30, 0xC2	; 194
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	86 e0       	ldi	r24, 0x06	; 6
    1496:	80 83       	st	Z, r24
 UBRR0L = 0x5F; //set baud rate lo
    1498:	e4 ec       	ldi	r30, 0xC4	; 196
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8f e5       	ldi	r24, 0x5F	; 95
    149e:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
    14a0:	e5 ec       	ldi	r30, 0xC5	; 197
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	10 82       	st	Z, r1
 UCSR0B = 0x98;
    14a6:	e1 ec       	ldi	r30, 0xC1	; 193
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	88 e9       	ldi	r24, 0x98	; 152
    14ac:	80 83       	st	Z, r24
}
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <uart2_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
 UCSR2B = 0x00; //disable while setting baud rate
    14bc:	e1 ed       	ldi	r30, 0xD1	; 209
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	10 82       	st	Z, r1
 UCSR2A = 0x00;
    14c2:	e0 ed       	ldi	r30, 0xD0	; 208
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	10 82       	st	Z, r1
 UCSR2C = 0x06;
    14c8:	e2 ed       	ldi	r30, 0xD2	; 210
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	86 e0       	ldi	r24, 0x06	; 6
    14ce:	80 83       	st	Z, r24
 UBRR2L = 0x5F; //set baud rate lo
    14d0:	e4 ed       	ldi	r30, 0xD4	; 212
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	8f e5       	ldi	r24, 0x5F	; 95
    14d6:	80 83       	st	Z, r24
 UBRR2H = 0x00; //set baud rate hi
    14d8:	e5 ed       	ldi	r30, 0xD5	; 213
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	10 82       	st	Z, r1
 UCSR2B = 0x98;
    14de:	e1 ed       	ldi	r30, 0xD1	; 209
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	88 e9       	ldi	r24, 0x98	; 152
    14e4:	80 83       	st	Z, r24
}
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <__vector_25>:


SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    14ec:	1f 92       	push	r1
    14ee:	0f 92       	push	r0
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	0f 92       	push	r0
    14f4:	00 90 5b 00 	lds	r0, 0x005B
    14f8:	0f 92       	push	r0
    14fa:	11 24       	eor	r1, r1
    14fc:	2f 93       	push	r18
    14fe:	8f 93       	push	r24
    1500:	9f 93       	push	r25
    1502:	ef 93       	push	r30
    1504:	ff 93       	push	r31
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable 
    150e:	e6 ec       	ldi	r30, 0xC6	; 198
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	80 93 1e 03 	sts	0x031E, r24

	UDR2 = data; 				//echo data back to PC
    1518:	e6 ed       	ldi	r30, 0xD6	; 214
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 91 1e 03 	lds	r24, 0x031E
    1520:	80 83       	st	Z, r24
	
	a[i]=data;
    1522:	80 91 0c 03 	lds	r24, 0x030C
    1526:	90 91 0d 03 	lds	r25, 0x030D
    152a:	20 91 1e 03 	lds	r18, 0x031E
    152e:	fc 01       	movw	r30, r24
    1530:	e8 5f       	subi	r30, 0xF8	; 248
    1532:	fc 4f       	sbci	r31, 0xFC	; 252
    1534:	20 83       	st	Z, r18
	i++;
    1536:	80 91 0c 03 	lds	r24, 0x030C
    153a:	90 91 0d 03 	lds	r25, 0x030D
    153e:	01 96       	adiw	r24, 0x01	; 1
    1540:	90 93 0d 03 	sts	0x030D, r25
    1544:	80 93 0c 03 	sts	0x030C, r24
}
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	ff 91       	pop	r31
    154e:	ef 91       	pop	r30
    1550:	9f 91       	pop	r25
    1552:	8f 91       	pop	r24
    1554:	2f 91       	pop	r18
    1556:	0f 90       	pop	r0
    1558:	00 92 5b 00 	sts	0x005B, r0
    155c:	0f 90       	pop	r0
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	0f 90       	pop	r0
    1562:	1f 90       	pop	r1
    1564:	18 95       	reti

00001566 <__vector_51>:


SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
    1566:	1f 92       	push	r1
    1568:	0f 92       	push	r0
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	0f 92       	push	r0
    156e:	00 90 5b 00 	lds	r0, 0x005B
    1572:	0f 92       	push	r0
    1574:	11 24       	eor	r1, r1
    1576:	8f 93       	push	r24
    1578:	ef 93       	push	r30
    157a:	ff 93       	push	r31
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
	data = UDR2; 				//making copy of data from UDR0 in 'data' variable 
    1584:	e6 ed       	ldi	r30, 0xD6	; 214
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	80 93 1e 03 	sts	0x031E, r24

	UDR0 = data; 				//echo data back to PC
    158e:	e6 ec       	ldi	r30, 0xC6	; 198
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 91 1e 03 	lds	r24, 0x031E
    1596:	80 83       	st	Z, r24

}
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	ff 91       	pop	r31
    159e:	ef 91       	pop	r30
    15a0:	8f 91       	pop	r24
    15a2:	0f 90       	pop	r0
    15a4:	00 92 5b 00 	sts	0x005B, r0
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	0f 90       	pop	r0
    15ae:	1f 90       	pop	r1
    15b0:	18 95       	reti

000015b2 <motion_pin_config>:
unsigned long int ShaftCountRight = 0; //to keep track of right position encoder
unsigned int Degrees; //to accept angle in degrees for turning

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    15ba:	a1 e2       	ldi	r26, 0x21	; 33
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e1 e2       	ldi	r30, 0x21	; 33
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8f 60       	ori	r24, 0x0F	; 15
    15c6:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
    15c8:	a2 e2       	ldi	r26, 0x22	; 34
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e2 e2       	ldi	r30, 0x22	; 34
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	80 7f       	andi	r24, 0xF0	; 240
    15d4:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    15d6:	aa e0       	ldi	r26, 0x0A	; 10
    15d8:	b1 e0       	ldi	r27, 0x01	; 1
    15da:	ea e0       	ldi	r30, 0x0A	; 10
    15dc:	f1 e0       	ldi	r31, 0x01	; 1
    15de:	80 81       	ld	r24, Z
    15e0:	88 61       	ori	r24, 0x18	; 24
    15e2:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    15e4:	ab e0       	ldi	r26, 0x0B	; 11
    15e6:	b1 e0       	ldi	r27, 0x01	; 1
    15e8:	eb e0       	ldi	r30, 0x0B	; 11
    15ea:	f1 e0       	ldi	r31, 0x01	; 1
    15ec:	80 81       	ld	r24, Z
    15ee:	88 61       	ori	r24, 0x18	; 24
    15f0:	8c 93       	st	X, r24
}
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    1600:	ad e2       	ldi	r26, 0x2D	; 45
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	ed e2       	ldi	r30, 0x2D	; 45
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	8f 7e       	andi	r24, 0xEF	; 239
    160c:	8c 93       	st	X, r24
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    160e:	ae e2       	ldi	r26, 0x2E	; 46
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ee e2       	ldi	r30, 0x2E	; 46
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	80 61       	ori	r24, 0x10	; 16
    161a:	8c 93       	st	X, r24
}
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    162a:	ad e2       	ldi	r26, 0x2D	; 45
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	ed e2       	ldi	r30, 0x2D	; 45
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	8f 7d       	andi	r24, 0xDF	; 223
    1636:	8c 93       	st	X, r24
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    1638:	ae e2       	ldi	r26, 0x2E	; 46
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	ee e2       	ldi	r30, 0x2E	; 46
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	80 62       	ori	r24, 0x20	; 32
    1644:	8c 93       	st	X, r24
}
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <left_position_encoder_interrupt_init>:


void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    1654:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1656:	aa e6       	ldi	r26, 0x6A	; 106
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	ea e6       	ldi	r30, 0x6A	; 106
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	82 60       	ori	r24, 0x02	; 2
    1662:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1664:	ad e3       	ldi	r26, 0x3D	; 61
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	ed e3       	ldi	r30, 0x3D	; 61
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	80 61       	ori	r24, 0x10	; 16
    1670:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
    1672:	78 94       	sei
}
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    1682:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    1684:	aa e6       	ldi	r26, 0x6A	; 106
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	ea e6       	ldi	r30, 0x6A	; 106
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	88 60       	ori	r24, 0x08	; 8
    1690:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    1692:	ad e3       	ldi	r26, 0x3D	; 61
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ed e3       	ldi	r30, 0x3D	; 61
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	80 62       	ori	r24, 0x20	; 32
    169e:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
    16a0:	78 94       	sei
}
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	08 95       	ret

000016a8 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
    16a8:	1f 92       	push	r1
    16aa:	0f 92       	push	r0
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	0f 92       	push	r0
    16b0:	11 24       	eor	r1, r1
    16b2:	8f 93       	push	r24
    16b4:	9f 93       	push	r25
    16b6:	af 93       	push	r26
    16b8:	bf 93       	push	r27
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
 ShaftCountRight++;  //increment right shaft position count
    16c2:	80 91 12 03 	lds	r24, 0x0312
    16c6:	90 91 13 03 	lds	r25, 0x0313
    16ca:	a0 91 14 03 	lds	r26, 0x0314
    16ce:	b0 91 15 03 	lds	r27, 0x0315
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	a1 1d       	adc	r26, r1
    16d6:	b1 1d       	adc	r27, r1
    16d8:	80 93 12 03 	sts	0x0312, r24
    16dc:	90 93 13 03 	sts	0x0313, r25
    16e0:	a0 93 14 03 	sts	0x0314, r26
    16e4:	b0 93 15 03 	sts	0x0315, r27
}
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	bf 91       	pop	r27
    16ee:	af 91       	pop	r26
    16f0:	9f 91       	pop	r25
    16f2:	8f 91       	pop	r24
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
    16fe:	1f 92       	push	r1
    1700:	0f 92       	push	r0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	0f 92       	push	r0
    1706:	11 24       	eor	r1, r1
    1708:	8f 93       	push	r24
    170a:	9f 93       	push	r25
    170c:	af 93       	push	r26
    170e:	bf 93       	push	r27
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
 ShaftCountLeft++;  //increment left shaft position count
    1718:	80 91 0e 03 	lds	r24, 0x030E
    171c:	90 91 0f 03 	lds	r25, 0x030F
    1720:	a0 91 10 03 	lds	r26, 0x0310
    1724:	b0 91 11 03 	lds	r27, 0x0311
    1728:	01 96       	adiw	r24, 0x01	; 1
    172a:	a1 1d       	adc	r26, r1
    172c:	b1 1d       	adc	r27, r1
    172e:	80 93 0e 03 	sts	0x030E, r24
    1732:	90 93 0f 03 	sts	0x030F, r25
    1736:	a0 93 10 03 	sts	0x0310, r26
    173a:	b0 93 11 03 	sts	0x0311, r27
}
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	bf 91       	pop	r27
    1744:	af 91       	pop	r26
    1746:	9f 91       	pop	r25
    1748:	8f 91       	pop	r24
    174a:	0f 90       	pop	r0
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	0f 90       	pop	r0
    1750:	1f 90       	pop	r1
    1752:	18 95       	reti

00001754 <motion_set>:


//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	0f 92       	push	r0
    175a:	0f 92       	push	r0
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    1762:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	8f 70       	andi	r24, 0x0F	; 15
    1768:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
    176a:	e2 e2       	ldi	r30, 0x22	; 34
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	80 7f       	andi	r24, 0xF0	; 240
    1776:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1778:	99 81       	ldd	r25, Y+1	; 0x01
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	89 2b       	or	r24, r25
    177e:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
    1780:	e2 e2       	ldi	r30, 0x22	; 34
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	80 83       	st	Z, r24
}
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <forward>:

void forward (void) //both wheels forward
{
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
    179a:	86 e0       	ldi	r24, 0x06	; 6
    179c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <motion_set>
}
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <back>:

void back (void) //both wheels backward
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
    17ae:	89 e0       	ldi	r24, 0x09	; 9
    17b0:	0e 94 aa 0b 	call	0x1754	; 0x1754 <motion_set>
}
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <left>:

void left (void) //Left wheel backward, Right wheel forward
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
    17c2:	85 e0       	ldi	r24, 0x05	; 5
    17c4:	0e 94 aa 0b 	call	0x1754	; 0x1754 <motion_set>
}
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
    17d6:	8a e0       	ldi	r24, 0x0A	; 10
    17d8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <motion_set>
}
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
    17ea:	84 e0       	ldi	r24, 0x04	; 4
    17ec:	0e 94 aa 0b 	call	0x1754	; 0x1754 <motion_set>
}
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
    17fe:	82 e0       	ldi	r24, 0x02	; 2
    1800:	0e 94 aa 0b 	call	0x1754	; 0x1754 <motion_set>
}
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	0e 94 aa 0b 	call	0x1754	; 0x1754 <motion_set>
}
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
    1826:	88 e0       	ldi	r24, 0x08	; 8
    1828:	0e 94 aa 0b 	call	0x1754	; 0x1754 <motion_set>
}
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <stop>:

void stop (void)
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <motion_set>
}
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <angle_rotate>:


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	2c 97       	sbiw	r28, 0x0c	; 12
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	9a 87       	std	Y+10, r25	; 0x0a
    185c:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a0 e0       	ldi	r26, 0x00	; 0
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	8d 83       	std	Y+5, r24	; 0x05
    1868:	9e 83       	std	Y+6, r25	; 0x06
    186a:	af 83       	std	Y+7, r26	; 0x07
    186c:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
    186e:	19 82       	std	Y+1, r1	; 0x01
    1870:	1a 82       	std	Y+2, r1	; 0x02
    1872:	1b 82       	std	Y+3, r1	; 0x03
    1874:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1876:	89 85       	ldd	r24, Y+9	; 0x09
    1878:	9a 85       	ldd	r25, Y+10	; 0x0a
    187a:	cc 01       	movw	r24, r24
    187c:	a0 e0       	ldi	r26, 0x00	; 0
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	bc 01       	movw	r22, r24
    1882:	cd 01       	movw	r24, r26
    1884:	0e 94 49 17 	call	0x2e92	; 0x2e92 <__floatunsisf>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	bc 01       	movw	r22, r24
    188e:	cd 01       	movw	r24, r26
    1890:	28 e4       	ldi	r18, 0x48	; 72
    1892:	31 ee       	ldi	r19, 0xE1	; 225
    1894:	42 e8       	ldi	r20, 0x82	; 130
    1896:	50 e4       	ldi	r21, 0x40	; 64
    1898:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__divsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	8d 83       	std	Y+5, r24	; 0x05
    18a2:	9e 83       	std	Y+6, r25	; 0x06
    18a4:	af 83       	std	Y+7, r26	; 0x07
    18a6:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    18a8:	6d 81       	ldd	r22, Y+5	; 0x05
    18aa:	7e 81       	ldd	r23, Y+6	; 0x06
    18ac:	8f 81       	ldd	r24, Y+7	; 0x07
    18ae:	98 85       	ldd	r25, Y+8	; 0x08
    18b0:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	cc 01       	movw	r24, r24
    18ba:	a0 e0       	ldi	r26, 0x00	; 0
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	9a 83       	std	Y+2, r25	; 0x02
    18c2:	ab 83       	std	Y+3, r26	; 0x03
    18c4:	bc 83       	std	Y+4, r27	; 0x04
 ShaftCountRight = 0; 
    18c6:	10 92 12 03 	sts	0x0312, r1
    18ca:	10 92 13 03 	sts	0x0313, r1
    18ce:	10 92 14 03 	sts	0x0314, r1
    18d2:	10 92 15 03 	sts	0x0315, r1
 ShaftCountLeft = 0; 
    18d6:	10 92 0e 03 	sts	0x030E, r1
    18da:	10 92 0f 03 	sts	0x030F, r1
    18de:	10 92 10 03 	sts	0x0310, r1
    18e2:	10 92 11 03 	sts	0x0311, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    18e6:	20 91 12 03 	lds	r18, 0x0312
    18ea:	30 91 13 03 	lds	r19, 0x0313
    18ee:	40 91 14 03 	lds	r20, 0x0314
    18f2:	50 91 15 03 	lds	r21, 0x0315
    18f6:	1c 86       	std	Y+12, r1	; 0x0c
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	ab 81       	ldd	r26, Y+3	; 0x03
    18fe:	bc 81       	ldd	r27, Y+4	; 0x04
    1900:	28 17       	cp	r18, r24
    1902:	39 07       	cpc	r19, r25
    1904:	4a 07       	cpc	r20, r26
    1906:	5b 07       	cpc	r21, r27
    1908:	10 f0       	brcs	.+4      	; 0x190e <angle_rotate+0xc8>
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	8c 87       	std	Y+12, r24	; 0x0c
    190e:	20 91 0e 03 	lds	r18, 0x030E
    1912:	30 91 0f 03 	lds	r19, 0x030F
    1916:	40 91 10 03 	lds	r20, 0x0310
    191a:	50 91 11 03 	lds	r21, 0x0311
    191e:	1b 86       	std	Y+11, r1	; 0x0b
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	9a 81       	ldd	r25, Y+2	; 0x02
    1924:	ab 81       	ldd	r26, Y+3	; 0x03
    1926:	bc 81       	ldd	r27, Y+4	; 0x04
    1928:	28 17       	cp	r18, r24
    192a:	39 07       	cpc	r19, r25
    192c:	4a 07       	cpc	r20, r26
    192e:	5b 07       	cpc	r21, r27
    1930:	10 f0       	brcs	.+4      	; 0x1936 <angle_rotate+0xf0>
    1932:	91 e0       	ldi	r25, 0x01	; 1
    1934:	9b 87       	std	Y+11, r25	; 0x0b
    1936:	8c 85       	ldd	r24, Y+12	; 0x0c
    1938:	9b 85       	ldd	r25, Y+11	; 0x0b
    193a:	89 2b       	or	r24, r25
    193c:	88 23       	and	r24, r24
    193e:	99 f2       	breq	.-90     	; 0x18e6 <angle_rotate+0xa0>
  break;
 }
 stop(); //Stop robot
    1940:	0e 94 19 0c 	call	0x1832	; 0x1832 <stop>
}
    1944:	2c 96       	adiw	r28, 0x0c	; 12
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	2a 97       	sbiw	r28, 0x0a	; 10
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	9a 87       	std	Y+10, r25	; 0x0a
    196c:	89 87       	std	Y+9, r24	; 0x09
 float ReqdShaftCount = 0;
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	a0 e0       	ldi	r26, 0x00	; 0
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	8d 83       	std	Y+5, r24	; 0x05
    1978:	9e 83       	std	Y+6, r25	; 0x06
    197a:	af 83       	std	Y+7, r26	; 0x07
    197c:	b8 87       	std	Y+8, r27	; 0x08
 unsigned long int ReqdShaftCountInt = 0;
    197e:	19 82       	std	Y+1, r1	; 0x01
    1980:	1a 82       	std	Y+2, r1	; 0x02
    1982:	1b 82       	std	Y+3, r1	; 0x03
    1984:	1c 82       	std	Y+4, r1	; 0x04

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1986:	89 85       	ldd	r24, Y+9	; 0x09
    1988:	9a 85       	ldd	r25, Y+10	; 0x0a
    198a:	cc 01       	movw	r24, r24
    198c:	a0 e0       	ldi	r26, 0x00	; 0
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	bc 01       	movw	r22, r24
    1992:	cd 01       	movw	r24, r26
    1994:	0e 94 49 17 	call	0x2e92	; 0x2e92 <__floatunsisf>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	bc 01       	movw	r22, r24
    199e:	cd 01       	movw	r24, r26
    19a0:	25 ee       	ldi	r18, 0xE5	; 229
    19a2:	30 ed       	ldi	r19, 0xD0	; 208
    19a4:	4a ea       	ldi	r20, 0xAA	; 170
    19a6:	50 e4       	ldi	r21, 0x40	; 64
    19a8:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__divsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	8d 83       	std	Y+5, r24	; 0x05
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	af 83       	std	Y+7, r26	; 0x07
    19b6:	b8 87       	std	Y+8, r27	; 0x08
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    19b8:	6d 81       	ldd	r22, Y+5	; 0x05
    19ba:	7e 81       	ldd	r23, Y+6	; 0x06
    19bc:	8f 81       	ldd	r24, Y+7	; 0x07
    19be:	98 85       	ldd	r25, Y+8	; 0x08
    19c0:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	89 83       	std	Y+1, r24	; 0x01
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	ab 83       	std	Y+3, r26	; 0x03
    19ce:	bc 83       	std	Y+4, r27	; 0x04
  
 ShaftCountRight = 0;
    19d0:	10 92 12 03 	sts	0x0312, r1
    19d4:	10 92 13 03 	sts	0x0313, r1
    19d8:	10 92 14 03 	sts	0x0314, r1
    19dc:	10 92 15 03 	sts	0x0315, r1
 while(1)
 {
  if(ShaftCountRight > ReqdShaftCountInt)
    19e0:	20 91 12 03 	lds	r18, 0x0312
    19e4:	30 91 13 03 	lds	r19, 0x0313
    19e8:	40 91 14 03 	lds	r20, 0x0314
    19ec:	50 91 15 03 	lds	r21, 0x0315
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	9a 81       	ldd	r25, Y+2	; 0x02
    19f4:	ab 81       	ldd	r26, Y+3	; 0x03
    19f6:	bc 81       	ldd	r27, Y+4	; 0x04
    19f8:	82 17       	cp	r24, r18
    19fa:	93 07       	cpc	r25, r19
    19fc:	a4 07       	cpc	r26, r20
    19fe:	b5 07       	cpc	r27, r21
    1a00:	78 f7       	brcc	.-34     	; 0x19e0 <linear_distance_mm+0x8a>
  {
  	break;
  }
 } 
 stop(); //Stop robot
    1a02:	0e 94 19 0c 	call	0x1832	; 0x1832 <stop>
}
    1a06:	2a 96       	adiw	r28, 0x0a	; 10
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	0f 92       	push	r0
    1a1e:	0f 92       	push	r0
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	9a 83       	std	Y+2, r25	; 0x02
    1a26:	89 83       	std	Y+1, r24	; 0x01
 forward();
    1a28:	0e 94 c9 0b 	call	0x1792	; 0x1792 <forward>
 linear_distance_mm(DistanceInMM);
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a30:	0e 94 ab 0c 	call	0x1956	; 0x1956 <linear_distance_mm>
}
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	0f 92       	push	r0
    1a44:	0f 92       	push	r0
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	9a 83       	std	Y+2, r25	; 0x02
    1a4c:	89 83       	std	Y+1, r24	; 0x01
 back();
    1a4e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <back>
 linear_distance_mm(DistanceInMM);
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	9a 81       	ldd	r25, Y+2	; 0x02
    1a56:	0e 94 ab 0c 	call	0x1956	; 0x1956 <linear_distance_mm>
}
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <left_degrees>:

void left_degrees(unsigned int Degrees) 
{
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	0f 92       	push	r0
    1a6a:	0f 92       	push	r0
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	9a 83       	std	Y+2, r25	; 0x02
    1a72:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
    1a74:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <left>
 angle_rotate(Degrees);
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7c:	0e 94 23 0c 	call	0x1846	; 0x1846 <angle_rotate>
}
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <right_degrees>:



void right_degrees(unsigned int Degrees)
{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	0f 92       	push	r0
    1a90:	0f 92       	push	r0
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	9a 83       	std	Y+2, r25	; 0x02
    1a98:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
    1a9a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <right>
 angle_rotate(Degrees);
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	0e 94 23 0c 	call	0x1846	; 0x1846 <angle_rotate>
}
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <soft_left_degrees>:


void soft_left_degrees(unsigned int Degrees)
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	0f 92       	push	r0
    1ab6:	0f 92       	push	r0
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	9a 83       	std	Y+2, r25	; 0x02
    1abe:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left(); //Turn soft left
    1ac0:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <soft_left>
 Degrees=Degrees*2;
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad4:	0e 94 23 0c 	call	0x1846	; 0x1846 <angle_rotate>
}
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <soft_right_degrees>:

void soft_right_degrees(unsigned int Degrees)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	0f 92       	push	r0
    1ae8:	0f 92       	push	r0
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	9a 83       	std	Y+2, r25	; 0x02
    1af0:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right();  //Turn soft right
    1af2:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <soft_right>
 Degrees=Degrees*2;
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	9a 83       	std	Y+2, r25	; 0x02
    1b00:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	9a 81       	ldd	r25, Y+2	; 0x02
    1b06:	0e 94 23 0c 	call	0x1846	; 0x1846 <angle_rotate>
}
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <soft_left_2_degrees>:

void soft_left_2_degrees(unsigned int Degrees)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	0f 92       	push	r0
    1b1a:	0f 92       	push	r0
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left_2(); //Turn reverse soft left
    1b24:	0e 94 05 0c 	call	0x180a	; 0x180a <soft_left_2>
 Degrees=Degrees*2;
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	0e 94 23 0c 	call	0x1846	; 0x1846 <angle_rotate>
}
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	0f 92       	push	r0
    1b4c:	0f 92       	push	r0
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right_2();  //Turn reverse soft right
    1b56:	0e 94 0f 0c 	call	0x181e	; 0x181e <soft_right_2>
 Degrees=Degrees*2;
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6a:	0e 94 23 0c 	call	0x1846	; 0x1846 <angle_rotate>
}
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <buzzer_pin_config>:
//Function to initialize Buzzer 
void buzzer_pin_config (void)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
    1b80:	a7 e2       	ldi	r26, 0x27	; 39
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e7 e2       	ldi	r30, 0x27	; 39
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	88 60       	ori	r24, 0x08	; 8
    1b8c:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    1b8e:	a8 e2       	ldi	r26, 0x28	; 40
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e8 e2       	ldi	r30, 0x28	; 40
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	87 7f       	andi	r24, 0xF7	; 247
    1b9a:	8c 93       	st	X, r24
}
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <buzzer_on>:



void buzzer_on (void)
{
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	0f 92       	push	r0
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1bac:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    1bae:	e6 e2       	ldi	r30, 0x26	; 38
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	88 60       	ori	r24, 0x08	; 8
    1bba:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1bbc:	e8 e2       	ldi	r30, 0x28	; 40
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	80 83       	st	Z, r24
}
    1bc4:	0f 90       	pop	r0
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <buzzer_off>:

void buzzer_off (void)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	0f 92       	push	r0
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1bd6:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    1bd8:	e6 e2       	ldi	r30, 0x26	; 38
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	87 7f       	andi	r24, 0xF7	; 247
    1be4:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1be6:	e8 e2       	ldi	r30, 0x28	; 40
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	80 83       	st	Z, r24
}
    1bee:	0f 90       	pop	r0
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    1bfe:	e1 e2       	ldi	r30, 0x21	; 33
    1c00:	f1 e0       	ldi	r31, 0x01	; 1
    1c02:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    1c04:	e5 e2       	ldi	r30, 0x25	; 37
    1c06:	f1 e0       	ldi	r31, 0x01	; 1
    1c08:	8f ef       	ldi	r24, 0xFF	; 255
    1c0a:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    1c0c:	e4 e2       	ldi	r30, 0x24	; 36
    1c0e:	f1 e0       	ldi	r31, 0x01	; 1
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    1c14:	e9 e2       	ldi	r30, 0x29	; 41
    1c16:	f1 e0       	ldi	r31, 0x01	; 1
    1c18:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    1c1a:	e8 e2       	ldi	r30, 0x28	; 40
    1c1c:	f1 e0       	ldi	r31, 0x01	; 1
    1c1e:	8f ef       	ldi	r24, 0xFF	; 255
    1c20:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    1c22:	eb e2       	ldi	r30, 0x2B	; 43
    1c24:	f1 e0       	ldi	r31, 0x01	; 1
    1c26:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    1c28:	ea e2       	ldi	r30, 0x2A	; 42
    1c2a:	f1 e0       	ldi	r31, 0x01	; 1
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    1c30:	ed e2       	ldi	r30, 0x2D	; 45
    1c32:	f1 e0       	ldi	r31, 0x01	; 1
    1c34:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    1c36:	ec e2       	ldi	r30, 0x2C	; 44
    1c38:	f1 e0       	ldi	r31, 0x01	; 1
    1c3a:	8f ef       	ldi	r24, 0xFF	; 255
    1c3c:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    1c3e:	e0 e2       	ldi	r30, 0x20	; 32
    1c40:	f1 e0       	ldi	r31, 0x01	; 1
    1c42:	89 ea       	ldi	r24, 0xA9	; 169
    1c44:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    1c46:	e1 e2       	ldi	r30, 0x21	; 33
    1c48:	f1 e0       	ldi	r31, 0x01	; 1
    1c4a:	8b e0       	ldi	r24, 0x0B	; 11
    1c4c:	80 83       	st	Z, r24
}
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <velocity>:

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	0f 92       	push	r0
    1c5a:	0f 92       	push	r0
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    1c64:	e8 e2       	ldi	r30, 0x28	; 40
    1c66:	f1 e0       	ldi	r31, 0x01	; 1
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1c6c:	ea e2       	ldi	r30, 0x2A	; 42
    1c6e:	f1 e0       	ldi	r31, 0x01	; 1
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	80 83       	st	Z, r24
}
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <port_init>:
#include "velocity.h"


//Function to Initialize PORTS
void port_init()
{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    1c86:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_port_config>
	motion_pin_config(); //robot motion pins config
    1c8a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <motion_pin_config>
 	left_encoder_pin_config(); //left encoder pin config
    1c8e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <left_encoder_pin_config>
 	right_encoder_pin_config(); //right encoder pin config
    1c92:	0e 94 11 0b 	call	0x1622	; 0x1622 <right_encoder_pin_config>
	buzzer_pin_config();
    1c96:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <buzzer_pin_config>
	
}
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <init_devices>:


void init_devices (void)
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    1ca8:	f8 94       	cli
 port_init();
    1caa:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <port_init>
 uart0_init(); //Initailize UART0 for serial communiaction
    1cae:	0e 94 3e 0a 	call	0x147c	; 0x147c <uart0_init>
 uart2_init(); //Initailize UART1 for serial communiaction
    1cb2:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <uart2_init>
 port_init();  //Initializes all the ports for motion, buzzer, LCD etc.
    1cb6:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <port_init>
 left_position_encoder_interrupt_init();
    1cba:	0e 94 26 0b 	call	0x164c	; 0x164c <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
    1cbe:	0e 94 3d 0b 	call	0x167a	; 0x167a <right_position_encoder_interrupt_init>
 timer5_init();
    1cc2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <timer5_init>
 sei();   //Enables the global interrupts
    1cc6:	78 94       	sei
}		
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <main>:



//=======================Main Function==================================================
int main(void)
{	
    1cce:	0f 93       	push	r16
    1cd0:	1f 93       	push	r17
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	cd 55       	subi	r28, 0x5D	; 93
    1cdc:	d0 40       	sbci	r29, 0x00	; 0
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61

	
	init_devices();
    1ce8:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <init_devices>
//	lcd_string("CARETAKER KJSCE");
					
	
	int hun,ten,one,angle;
	unsigned char dir;
	int onr1=0,ong1=0,onb1=0,onr2=0,ong2=0,onb2=0;	
    1cec:	fe 01       	movw	r30, r28
    1cee:	ef 5a       	subi	r30, 0xAF	; 175
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	11 82       	std	Z+1, r1	; 0x01
    1cf4:	10 82       	st	Z, r1
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e1 5b       	subi	r30, 0xB1	; 177
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	11 82       	std	Z+1, r1	; 0x01
    1cfe:	10 82       	st	Z, r1
    1d00:	fe 01       	movw	r30, r28
    1d02:	e3 5b       	subi	r30, 0xB3	; 179
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	11 82       	std	Z+1, r1	; 0x01
    1d08:	10 82       	st	Z, r1
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e5 5b       	subi	r30, 0xB5	; 181
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	11 82       	std	Z+1, r1	; 0x01
    1d12:	10 82       	st	Z, r1
    1d14:	fe 01       	movw	r30, r28
    1d16:	e7 5b       	subi	r30, 0xB7	; 183
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	11 82       	std	Z+1, r1	; 0x01
    1d1c:	10 82       	st	Z, r1
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e9 5b       	subi	r30, 0xB9	; 185
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	11 82       	std	Z+1, r1	; 0x01
    1d26:	10 82       	st	Z, r1
	DDRJ = 0xFF;
    1d28:	e4 e0       	ldi	r30, 0x04	; 4
    1d2a:	f1 e0       	ldi	r31, 0x01	; 1
    1d2c:	8f ef       	ldi	r24, 0xFF	; 255
    1d2e:	80 83       	st	Z, r24
	
	
	while(1)
		{
		
		velocity(245,245);
    1d30:	85 ef       	ldi	r24, 0xF5	; 245
    1d32:	65 ef       	ldi	r22, 0xF5	; 245
    1d34:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <velocity>
    1d38:	fe 01       	movw	r30, r28
    1d3a:	ed 5b       	subi	r30, 0xBD	; 189
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	a0 e2       	ldi	r26, 0x20	; 32
    1d44:	b1 e4       	ldi	r27, 0x41	; 65
    1d46:	80 83       	st	Z, r24
    1d48:	91 83       	std	Z+1, r25	; 0x01
    1d4a:	a2 83       	std	Z+2, r26	; 0x02
    1d4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4e:	8e 01       	movw	r16, r28
    1d50:	01 5c       	subi	r16, 0xC1	; 193
    1d52:	1f 4f       	sbci	r17, 0xFF	; 255
    1d54:	fe 01       	movw	r30, r28
    1d56:	ed 5b       	subi	r30, 0xBD	; 189
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	26 e6       	ldi	r18, 0x66	; 102
    1d64:	36 e6       	ldi	r19, 0x66	; 102
    1d66:	46 e6       	ldi	r20, 0x66	; 102
    1d68:	55 e4       	ldi	r21, 0x45	; 69
    1d6a:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	f8 01       	movw	r30, r16
    1d74:	80 83       	st	Z, r24
    1d76:	91 83       	std	Z+1, r25	; 0x01
    1d78:	a2 83       	std	Z+2, r26	; 0x02
    1d7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	ff 96       	adiw	r30, 0x3f	; 63
    1d80:	60 81       	ld	r22, Z
    1d82:	71 81       	ldd	r23, Z+1	; 0x01
    1d84:	82 81       	ldd	r24, Z+2	; 0x02
    1d86:	93 81       	ldd	r25, Z+3	; 0x03
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e8       	ldi	r20, 0x80	; 128
    1d8e:	5f e3       	ldi	r21, 0x3F	; 63
    1d90:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
    1d94:	88 23       	and	r24, r24
    1d96:	2c f4       	brge	.+10     	; 0x1da2 <main+0xd4>
		__ticks = 1;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9e af       	std	Y+62, r25	; 0x3e
    1d9e:	8d af       	std	Y+61, r24	; 0x3d
    1da0:	46 c0       	rjmp	.+140    	; 0x1e2e <main+0x160>
	else if (__tmp > 65535)
    1da2:	fe 01       	movw	r30, r28
    1da4:	ff 96       	adiw	r30, 0x3f	; 63
    1da6:	60 81       	ld	r22, Z
    1da8:	71 81       	ldd	r23, Z+1	; 0x01
    1daa:	82 81       	ldd	r24, Z+2	; 0x02
    1dac:	93 81       	ldd	r25, Z+3	; 0x03
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	4f e7       	ldi	r20, 0x7F	; 127
    1db4:	57 e4       	ldi	r21, 0x47	; 71
    1db6:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	64 f5       	brge	.+88     	; 0x1e16 <main+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	ed 5b       	subi	r30, 0xBD	; 189
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e2       	ldi	r20, 0x20	; 32
    1dd2:	51 e4       	ldi	r21, 0x41	; 65
    1dd4:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	bc 01       	movw	r22, r24
    1dde:	cd 01       	movw	r24, r26
    1de0:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	9e af       	std	Y+62, r25	; 0x3e
    1dea:	8d af       	std	Y+61, r24	; 0x3d
    1dec:	0f c0       	rjmp	.+30     	; 0x1e0c <main+0x13e>
    1dee:	80 e7       	ldi	r24, 0x70	; 112
    1df0:	91 e0       	ldi	r25, 0x01	; 1
    1df2:	9c af       	std	Y+60, r25	; 0x3c
    1df4:	8b af       	std	Y+59, r24	; 0x3b
    1df6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1df8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	f1 f7       	brne	.-4      	; 0x1dfa <main+0x12c>
    1dfe:	9c af       	std	Y+60, r25	; 0x3c
    1e00:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e02:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e04:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	9e af       	std	Y+62, r25	; 0x3e
    1e0a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e0e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	69 f7       	brne	.-38     	; 0x1dee <main+0x120>
    1e14:	16 c0       	rjmp	.+44     	; 0x1e42 <main+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e16:	fe 01       	movw	r30, r28
    1e18:	ff 96       	adiw	r30, 0x3f	; 63
    1e1a:	60 81       	ld	r22, Z
    1e1c:	71 81       	ldd	r23, Z+1	; 0x01
    1e1e:	82 81       	ldd	r24, Z+2	; 0x02
    1e20:	93 81       	ldd	r25, Z+3	; 0x03
    1e22:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	9e af       	std	Y+62, r25	; 0x3e
    1e2c:	8d af       	std	Y+61, r24	; 0x3d
    1e2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e30:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e32:	9a af       	std	Y+58, r25	; 0x3a
    1e34:	89 af       	std	Y+57, r24	; 0x39
    1e36:	89 ad       	ldd	r24, Y+57	; 0x39
    1e38:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <main+0x16c>
    1e3e:	9a af       	std	Y+58, r25	; 0x3a
    1e40:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(10);
		dir=a[0];		
    1e42:	fe 01       	movw	r30, r28
    1e44:	ed 5a       	subi	r30, 0xAD	; 173
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	80 91 08 03 	lds	r24, 0x0308
    1e4c:	80 83       	st	Z, r24
		hun=a[1]-48;
    1e4e:	80 91 09 03 	lds	r24, 0x0309
    1e52:	88 2f       	mov	r24, r24
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	fe 01       	movw	r30, r28
    1e58:	e6 5a       	subi	r30, 0xA6	; 166
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	c0 97       	sbiw	r24, 0x30	; 48
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	80 83       	st	Z, r24
		ten=a[2]-48;
    1e62:	80 91 0a 03 	lds	r24, 0x030A
    1e66:	88 2f       	mov	r24, r24
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e8 5a       	subi	r30, 0xA8	; 168
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	c0 97       	sbiw	r24, 0x30	; 48
    1e72:	91 83       	std	Z+1, r25	; 0x01
    1e74:	80 83       	st	Z, r24
		one=a[3]-48;
    1e76:	80 91 0b 03 	lds	r24, 0x030B
    1e7a:	88 2f       	mov	r24, r24
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	fe 01       	movw	r30, r28
    1e80:	ea 5a       	subi	r30, 0xAA	; 170
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	c0 97       	sbiw	r24, 0x30	; 48
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	80 83       	st	Z, r24

		angle = 100*hun + 10*ten + one;
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e6 5a       	subi	r30, 0xA6	; 166
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	20 81       	ld	r18, Z
    1e92:	31 81       	ldd	r19, Z+1	; 0x01
    1e94:	84 e6       	ldi	r24, 0x64	; 100
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	28 9f       	mul	r18, r24
    1e9a:	a0 01       	movw	r20, r0
    1e9c:	29 9f       	mul	r18, r25
    1e9e:	50 0d       	add	r21, r0
    1ea0:	38 9f       	mul	r19, r24
    1ea2:	50 0d       	add	r21, r0
    1ea4:	11 24       	eor	r1, r1
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	e8 5a       	subi	r30, 0xA8	; 168
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	80 81       	ld	r24, Z
    1eae:	91 81       	ldd	r25, Z+1	; 0x01
    1eb0:	9c 01       	movw	r18, r24
    1eb2:	22 0f       	add	r18, r18
    1eb4:	33 1f       	adc	r19, r19
    1eb6:	c9 01       	movw	r24, r18
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	82 0f       	add	r24, r18
    1ec2:	93 1f       	adc	r25, r19
    1ec4:	9a 01       	movw	r18, r20
    1ec6:	28 0f       	add	r18, r24
    1ec8:	39 1f       	adc	r19, r25
    1eca:	de 01       	movw	r26, r28
    1ecc:	ac 5a       	subi	r26, 0xAC	; 172
    1ece:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	ea 5a       	subi	r30, 0xAA	; 170
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	80 81       	ld	r24, Z
    1ed8:	91 81       	ldd	r25, Z+1	; 0x01
    1eda:	82 0f       	add	r24, r18
    1edc:	93 1f       	adc	r25, r19
    1ede:	11 96       	adiw	r26, 0x01	; 1
    1ee0:	9c 93       	st	X, r25
    1ee2:	8e 93       	st	-X, r24

	



	if(a[0]=='l')
    1ee4:	80 91 08 03 	lds	r24, 0x0308
    1ee8:	8c 36       	cpi	r24, 0x6C	; 108
    1eea:	59 f4       	brne	.+22     	; 0x1f02 <main+0x234>
			{
				velocity(225,225);
    1eec:	81 ee       	ldi	r24, 0xE1	; 225
    1eee:	61 ee       	ldi	r22, 0xE1	; 225
    1ef0:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <velocity>
				left_degrees(angle);
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	ec 5a       	subi	r30, 0xAC	; 172
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	80 81       	ld	r24, Z
    1efc:	91 81       	ldd	r25, Z+1	; 0x01
    1efe:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <left_degrees>
			}
		
		if(a[0]=='r')
    1f02:	80 91 08 03 	lds	r24, 0x0308
    1f06:	82 37       	cpi	r24, 0x72	; 114
    1f08:	59 f4       	brne	.+22     	; 0x1f20 <main+0x252>
			{
				velocity(225,225);
    1f0a:	81 ee       	ldi	r24, 0xE1	; 225
    1f0c:	61 ee       	ldi	r22, 0xE1	; 225
    1f0e:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <velocity>
				right_degrees(angle);
    1f12:	fe 01       	movw	r30, r28
    1f14:	ec 5a       	subi	r30, 0xAC	; 172
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	80 81       	ld	r24, Z
    1f1a:	91 81       	ldd	r25, Z+1	; 0x01
    1f1c:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <right_degrees>
			}		
		
		a[0]=0;		//clear array storing Direction for turning string
    1f20:	10 92 08 03 	sts	0x0308, r1
		i=0;
    1f24:	10 92 0d 03 	sts	0x030D, r1
    1f28:	10 92 0c 03 	sts	0x030C, r1


		switch(data)
    1f2c:	80 91 1e 03 	lds	r24, 0x031E
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	6e 96       	adiw	r28, 0x1e	; 30
    1f36:	3f af       	std	Y+63, r19	; 0x3f
    1f38:	2e af       	std	Y+62, r18	; 0x3e
    1f3a:	6e 97       	sbiw	r28, 0x1e	; 30
    1f3c:	6e 96       	adiw	r28, 0x1e	; 30
    1f3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f40:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f42:	6e 97       	sbiw	r28, 0x1e	; 30
    1f44:	8e 36       	cpi	r24, 0x6E	; 110
    1f46:	91 05       	cpc	r25, r1
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <main+0x27e>
    1f4a:	dd c0       	rjmp	.+442    	; 0x2106 <main+0x438>
    1f4c:	6e 96       	adiw	r28, 0x1e	; 30
    1f4e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f50:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f52:	6e 97       	sbiw	r28, 0x1e	; 30
    1f54:	ef 36       	cpi	r30, 0x6F	; 111
    1f56:	f1 05       	cpc	r31, r1
    1f58:	8c f5       	brge	.+98     	; 0x1fbc <main+0x2ee>
    1f5a:	6e 96       	adiw	r28, 0x1e	; 30
    1f5c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1f5e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f60:	6e 97       	sbiw	r28, 0x1e	; 30
    1f62:	24 36       	cpi	r18, 0x64	; 100
    1f64:	31 05       	cpc	r19, r1
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <main+0x29c>
    1f68:	6d c0       	rjmp	.+218    	; 0x2044 <main+0x376>
    1f6a:	6e 96       	adiw	r28, 0x1e	; 30
    1f6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f70:	6e 97       	sbiw	r28, 0x1e	; 30
    1f72:	85 36       	cpi	r24, 0x65	; 101
    1f74:	91 05       	cpc	r25, r1
    1f76:	8c f4       	brge	.+34     	; 0x1f9a <main+0x2cc>
    1f78:	6e 96       	adiw	r28, 0x1e	; 30
    1f7a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f7c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f7e:	6e 97       	sbiw	r28, 0x1e	; 30
    1f80:	e1 36       	cpi	r30, 0x61	; 97
    1f82:	f1 05       	cpc	r31, r1
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <main+0x2ba>
    1f86:	55 c0       	rjmp	.+170    	; 0x2032 <main+0x364>
    1f88:	6e 96       	adiw	r28, 0x1e	; 30
    1f8a:	2e ad       	ldd	r18, Y+62	; 0x3e
    1f8c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f8e:	6e 97       	sbiw	r28, 0x1e	; 30
    1f90:	22 36       	cpi	r18, 0x62	; 98
    1f92:	31 05       	cpc	r19, r1
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <main+0x2ca>
    1f96:	87 c0       	rjmp	.+270    	; 0x20a6 <main+0x3d8>
    1f98:	95 c2       	rjmp	.+1322   	; 0x24c4 <__stack+0x2c5>
    1f9a:	6e 96       	adiw	r28, 0x1e	; 30
    1f9c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fa0:	6e 97       	sbiw	r28, 0x1e	; 30
    1fa2:	87 36       	cpi	r24, 0x67	; 103
    1fa4:	91 05       	cpc	r25, r1
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <main+0x2dc>
    1fa8:	6e c0       	rjmp	.+220    	; 0x2086 <main+0x3b8>
    1faa:	6e 96       	adiw	r28, 0x1e	; 30
    1fac:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fae:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fb0:	6e 97       	sbiw	r28, 0x1e	; 30
    1fb2:	e8 36       	cpi	r30, 0x68	; 104
    1fb4:	f1 05       	cpc	r31, r1
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <main+0x2ec>
    1fb8:	96 c0       	rjmp	.+300    	; 0x20e6 <main+0x418>
    1fba:	84 c2       	rjmp	.+1288   	; 0x24c4 <__stack+0x2c5>
    1fbc:	6e 96       	adiw	r28, 0x1e	; 30
    1fbe:	2e ad       	ldd	r18, Y+62	; 0x3e
    1fc0:	3f ad       	ldd	r19, Y+63	; 0x3f
    1fc2:	6e 97       	sbiw	r28, 0x1e	; 30
    1fc4:	24 37       	cpi	r18, 0x74	; 116
    1fc6:	31 05       	cpc	r19, r1
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <main+0x2fe>
    1fca:	4d c0       	rjmp	.+154    	; 0x2066 <main+0x398>
    1fcc:	6e 96       	adiw	r28, 0x1e	; 30
    1fce:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fd0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fd2:	6e 97       	sbiw	r28, 0x1e	; 30
    1fd4:	85 37       	cpi	r24, 0x75	; 117
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	84 f4       	brge	.+32     	; 0x1ffa <main+0x32c>
    1fda:	6e 96       	adiw	r28, 0x1e	; 30
    1fdc:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fde:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fe0:	6e 97       	sbiw	r28, 0x1e	; 30
    1fe2:	e0 37       	cpi	r30, 0x70	; 112
    1fe4:	f1 05       	cpc	r31, r1
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <main+0x31c>
    1fe8:	9e c0       	rjmp	.+316    	; 0x2126 <main+0x458>
    1fea:	6e 96       	adiw	r28, 0x1e	; 30
    1fec:	2e ad       	ldd	r18, Y+62	; 0x3e
    1fee:	3f ad       	ldd	r19, Y+63	; 0x3f
    1ff0:	6e 97       	sbiw	r28, 0x1e	; 30
    1ff2:	23 37       	cpi	r18, 0x73	; 115
    1ff4:	31 05       	cpc	r19, r1
    1ff6:	79 f1       	breq	.+94     	; 0x2056 <main+0x388>
    1ff8:	65 c2       	rjmp	.+1226   	; 0x24c4 <__stack+0x2c5>
    1ffa:	6e 96       	adiw	r28, 0x1e	; 30
    1ffc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ffe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2000:	6e 97       	sbiw	r28, 0x1e	; 30
    2002:	88 37       	cpi	r24, 0x78	; 120
    2004:	91 05       	cpc	r25, r1
    2006:	51 f1       	breq	.+84     	; 0x205c <main+0x38e>
    2008:	6e 96       	adiw	r28, 0x1e	; 30
    200a:	ee ad       	ldd	r30, Y+62	; 0x3e
    200c:	ff ad       	ldd	r31, Y+63	; 0x3f
    200e:	6e 97       	sbiw	r28, 0x1e	; 30
    2010:	e9 37       	cpi	r30, 0x79	; 121
    2012:	f1 05       	cpc	r31, r1
    2014:	09 f4       	brne	.+2      	; 0x2018 <main+0x34a>
    2016:	57 c0       	rjmp	.+174    	; 0x20c6 <main+0x3f8>
    2018:	6e 96       	adiw	r28, 0x1e	; 30
    201a:	2e ad       	ldd	r18, Y+62	; 0x3e
    201c:	3f ad       	ldd	r19, Y+63	; 0x3f
    201e:	6e 97       	sbiw	r28, 0x1e	; 30
    2020:	27 37       	cpi	r18, 0x77	; 119
    2022:	31 05       	cpc	r19, r1
    2024:	09 f0       	breq	.+2      	; 0x2028 <main+0x35a>
    2026:	4e c2       	rjmp	.+1180   	; 0x24c4 <__stack+0x2c5>
		
		{
		
		case 'w':
		{
		stop();
    2028:	0e 94 19 0c 	call	0x1832	; 0x1832 <stop>
		//_delay_ms(100);
		forward();
    202c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <forward>
    2030:	4b c2       	rjmp	.+1174   	; 0x24c8 <__stack+0x2c9>
		break;
		}
	
		case 'a':
		{
		stop();
    2032:	0e 94 19 0c 	call	0x1832	; 0x1832 <stop>
		//_delay_ms(100);
		left_degrees(90);
    2036:	8a e5       	ldi	r24, 0x5A	; 90
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <left_degrees>
		
		data=0;
    203e:	10 92 1e 03 	sts	0x031E, r1
    2042:	42 c2       	rjmp	.+1156   	; 0x24c8 <__stack+0x2c9>
		}

		
		case 'd':
		{
		stop();
    2044:	0e 94 19 0c 	call	0x1832	; 0x1832 <stop>
	//	_delay_ms(100);
		right_degrees(90);
    2048:	8a e5       	ldi	r24, 0x5A	; 90
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <right_degrees>
		data=0;
    2050:	10 92 1e 03 	sts	0x031E, r1
    2054:	39 c2       	rjmp	.+1138   	; 0x24c8 <__stack+0x2c9>
		break;
		}	

		case 's':
		{
		stop();
    2056:	0e 94 19 0c 	call	0x1832	; 0x1832 <stop>
    205a:	36 c2       	rjmp	.+1132   	; 0x24c8 <__stack+0x2c9>
		break;
		}

		case 'x':
		{
		stop();
    205c:	0e 94 19 0c 	call	0x1832	; 0x1832 <stop>
	//	_delay_ms(100);
		back();
    2060:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <back>
    2064:	31 c2       	rjmp	.+1122   	; 0x24c8 <__stack+0x2c9>
		break;
		}

		case 't':
		{
			onr1=~onr1;
    2066:	de 01       	movw	r26, r28
    2068:	af 5a       	subi	r26, 0xAF	; 175
    206a:	bf 4f       	sbci	r27, 0xFF	; 255
    206c:	fe 01       	movw	r30, r28
    206e:	ef 5a       	subi	r30, 0xAF	; 175
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	80 81       	ld	r24, Z
    2074:	91 81       	ldd	r25, Z+1	; 0x01
    2076:	80 95       	com	r24
    2078:	90 95       	com	r25
    207a:	11 96       	adiw	r26, 0x01	; 1
    207c:	9c 93       	st	X, r25
    207e:	8e 93       	st	-X, r24
			data=0;
    2080:	10 92 1e 03 	sts	0x031E, r1
    2084:	21 c2       	rjmp	.+1090   	; 0x24c8 <__stack+0x2c9>
			break;
		}

		case 'g':
		{
			ong1=~ong1;
    2086:	de 01       	movw	r26, r28
    2088:	a1 5b       	subi	r26, 0xB1	; 177
    208a:	bf 4f       	sbci	r27, 0xFF	; 255
    208c:	fe 01       	movw	r30, r28
    208e:	e1 5b       	subi	r30, 0xB1	; 177
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	80 81       	ld	r24, Z
    2094:	91 81       	ldd	r25, Z+1	; 0x01
    2096:	80 95       	com	r24
    2098:	90 95       	com	r25
    209a:	11 96       	adiw	r26, 0x01	; 1
    209c:	9c 93       	st	X, r25
    209e:	8e 93       	st	-X, r24
			data=0;
    20a0:	10 92 1e 03 	sts	0x031E, r1
    20a4:	11 c2       	rjmp	.+1058   	; 0x24c8 <__stack+0x2c9>
			break;
		}

		case 'b':
		{
			onb1=~onb1;
    20a6:	de 01       	movw	r26, r28
    20a8:	a3 5b       	subi	r26, 0xB3	; 179
    20aa:	bf 4f       	sbci	r27, 0xFF	; 255
    20ac:	fe 01       	movw	r30, r28
    20ae:	e3 5b       	subi	r30, 0xB3	; 179
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	80 81       	ld	r24, Z
    20b4:	91 81       	ldd	r25, Z+1	; 0x01
    20b6:	80 95       	com	r24
    20b8:	90 95       	com	r25
    20ba:	11 96       	adiw	r26, 0x01	; 1
    20bc:	9c 93       	st	X, r25
    20be:	8e 93       	st	-X, r24
			data=0;
    20c0:	10 92 1e 03 	sts	0x031E, r1
    20c4:	01 c2       	rjmp	.+1026   	; 0x24c8 <__stack+0x2c9>
			break;
		}

		case 'y':
		{
			onr2=~onr2;
    20c6:	de 01       	movw	r26, r28
    20c8:	a5 5b       	subi	r26, 0xB5	; 181
    20ca:	bf 4f       	sbci	r27, 0xFF	; 255
    20cc:	fe 01       	movw	r30, r28
    20ce:	e5 5b       	subi	r30, 0xB5	; 181
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	80 81       	ld	r24, Z
    20d4:	91 81       	ldd	r25, Z+1	; 0x01
    20d6:	80 95       	com	r24
    20d8:	90 95       	com	r25
    20da:	11 96       	adiw	r26, 0x01	; 1
    20dc:	9c 93       	st	X, r25
    20de:	8e 93       	st	-X, r24
			data=0;
    20e0:	10 92 1e 03 	sts	0x031E, r1
    20e4:	f1 c1       	rjmp	.+994    	; 0x24c8 <__stack+0x2c9>
			break;
		}

		case 'h':
		{
			ong2=~ong2;
    20e6:	de 01       	movw	r26, r28
    20e8:	a7 5b       	subi	r26, 0xB7	; 183
    20ea:	bf 4f       	sbci	r27, 0xFF	; 255
    20ec:	fe 01       	movw	r30, r28
    20ee:	e7 5b       	subi	r30, 0xB7	; 183
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	80 81       	ld	r24, Z
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
    20f6:	80 95       	com	r24
    20f8:	90 95       	com	r25
    20fa:	11 96       	adiw	r26, 0x01	; 1
    20fc:	9c 93       	st	X, r25
    20fe:	8e 93       	st	-X, r24
			data=0;
    2100:	10 92 1e 03 	sts	0x031E, r1
    2104:	e1 c1       	rjmp	.+962    	; 0x24c8 <__stack+0x2c9>
			break;
		}

		case 'n':
		{
			onb2=~onb2;
    2106:	de 01       	movw	r26, r28
    2108:	a9 5b       	subi	r26, 0xB9	; 185
    210a:	bf 4f       	sbci	r27, 0xFF	; 255
    210c:	fe 01       	movw	r30, r28
    210e:	e9 5b       	subi	r30, 0xB9	; 185
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	80 81       	ld	r24, Z
    2114:	91 81       	ldd	r25, Z+1	; 0x01
    2116:	80 95       	com	r24
    2118:	90 95       	com	r25
    211a:	11 96       	adiw	r26, 0x01	; 1
    211c:	9c 93       	st	X, r25
    211e:	8e 93       	st	-X, r24
			data=0;
    2120:	10 92 1e 03 	sts	0x031E, r1
    2124:	d1 c1       	rjmp	.+930    	; 0x24c8 <__stack+0x2c9>
		}
		

		case 'p': //for buzzer
		{
			stop();
    2126:	0e 94 19 0c 	call	0x1832	; 0x1832 <stop>
			buzzer_on();
    212a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <buzzer_on>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e8       	ldi	r25, 0x80	; 128
    2132:	ab e3       	ldi	r26, 0x3B	; 59
    2134:	b5 e4       	ldi	r27, 0x45	; 69
    2136:	8d ab       	std	Y+53, r24	; 0x35
    2138:	9e ab       	std	Y+54, r25	; 0x36
    213a:	af ab       	std	Y+55, r26	; 0x37
    213c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	6d a9       	ldd	r22, Y+53	; 0x35
    2140:	7e a9       	ldd	r23, Y+54	; 0x36
    2142:	8f a9       	ldd	r24, Y+55	; 0x37
    2144:	98 ad       	ldd	r25, Y+56	; 0x38
    2146:	26 e6       	ldi	r18, 0x66	; 102
    2148:	36 e6       	ldi	r19, 0x66	; 102
    214a:	46 e6       	ldi	r20, 0x66	; 102
    214c:	55 e4       	ldi	r21, 0x45	; 69
    214e:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	89 ab       	std	Y+49, r24	; 0x31
    2158:	9a ab       	std	Y+50, r25	; 0x32
    215a:	ab ab       	std	Y+51, r26	; 0x33
    215c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    215e:	69 a9       	ldd	r22, Y+49	; 0x31
    2160:	7a a9       	ldd	r23, Y+50	; 0x32
    2162:	8b a9       	ldd	r24, Y+51	; 0x33
    2164:	9c a9       	ldd	r25, Y+52	; 0x34
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	5f e3       	ldi	r21, 0x3F	; 63
    216e:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
    2172:	88 23       	and	r24, r24
    2174:	2c f4       	brge	.+10     	; 0x2180 <main+0x4b2>
		__ticks = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	98 ab       	std	Y+48, r25	; 0x30
    217c:	8f a7       	std	Y+47, r24	; 0x2f
    217e:	3f c0       	rjmp	.+126    	; 0x21fe <main+0x530>
	else if (__tmp > 65535)
    2180:	69 a9       	ldd	r22, Y+49	; 0x31
    2182:	7a a9       	ldd	r23, Y+50	; 0x32
    2184:	8b a9       	ldd	r24, Y+51	; 0x33
    2186:	9c a9       	ldd	r25, Y+52	; 0x34
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	4c f5       	brge	.+82     	; 0x21ea <main+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	6d a9       	ldd	r22, Y+53	; 0x35
    219a:	7e a9       	ldd	r23, Y+54	; 0x36
    219c:	8f a9       	ldd	r24, Y+55	; 0x37
    219e:	98 ad       	ldd	r25, Y+56	; 0x38
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	98 ab       	std	Y+48, r25	; 0x30
    21be:	8f a7       	std	Y+47, r24	; 0x2f
    21c0:	0f c0       	rjmp	.+30     	; 0x21e0 <main+0x512>
    21c2:	80 e7       	ldi	r24, 0x70	; 112
    21c4:	91 e0       	ldi	r25, 0x01	; 1
    21c6:	9e a7       	std	Y+46, r25	; 0x2e
    21c8:	8d a7       	std	Y+45, r24	; 0x2d
    21ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    21cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <main+0x500>
    21d2:	9e a7       	std	Y+46, r25	; 0x2e
    21d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d8:	98 a9       	ldd	r25, Y+48	; 0x30
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	98 ab       	std	Y+48, r25	; 0x30
    21de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e2:	98 a9       	ldd	r25, Y+48	; 0x30
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	69 f7       	brne	.-38     	; 0x21c2 <main+0x4f4>
    21e8:	14 c0       	rjmp	.+40     	; 0x2212 <__stack+0x13>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	69 a9       	ldd	r22, Y+49	; 0x31
    21ec:	7a a9       	ldd	r23, Y+50	; 0x32
    21ee:	8b a9       	ldd	r24, Y+51	; 0x33
    21f0:	9c a9       	ldd	r25, Y+52	; 0x34
    21f2:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	98 ab       	std	Y+48, r25	; 0x30
    21fc:	8f a7       	std	Y+47, r24	; 0x2f
    21fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2200:	98 a9       	ldd	r25, Y+48	; 0x30
    2202:	9c a7       	std	Y+44, r25	; 0x2c
    2204:	8b a7       	std	Y+43, r24	; 0x2b
    2206:	8b a5       	ldd	r24, Y+43	; 0x2b
    2208:	9c a5       	ldd	r25, Y+44	; 0x2c
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <__stack+0xb>
    220e:	9c a7       	std	Y+44, r25	; 0x2c
    2210:	8b a7       	std	Y+43, r24	; 0x2b
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	aa ef       	ldi	r26, 0xFA	; 250
    2218:	b4 e4       	ldi	r27, 0x44	; 68
    221a:	8f a3       	std	Y+39, r24	; 0x27
    221c:	98 a7       	std	Y+40, r25	; 0x28
    221e:	a9 a7       	std	Y+41, r26	; 0x29
    2220:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2222:	6f a1       	ldd	r22, Y+39	; 0x27
    2224:	78 a5       	ldd	r23, Y+40	; 0x28
    2226:	89 a5       	ldd	r24, Y+41	; 0x29
    2228:	9a a5       	ldd	r25, Y+42	; 0x2a
    222a:	26 e6       	ldi	r18, 0x66	; 102
    222c:	36 e6       	ldi	r19, 0x66	; 102
    222e:	46 e6       	ldi	r20, 0x66	; 102
    2230:	55 e4       	ldi	r21, 0x45	; 69
    2232:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	8b a3       	std	Y+35, r24	; 0x23
    223c:	9c a3       	std	Y+36, r25	; 0x24
    223e:	ad a3       	std	Y+37, r26	; 0x25
    2240:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2242:	6b a1       	ldd	r22, Y+35	; 0x23
    2244:	7c a1       	ldd	r23, Y+36	; 0x24
    2246:	8d a1       	ldd	r24, Y+37	; 0x25
    2248:	9e a1       	ldd	r25, Y+38	; 0x26
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e8       	ldi	r20, 0x80	; 128
    2250:	5f e3       	ldi	r21, 0x3F	; 63
    2252:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
    2256:	88 23       	and	r24, r24
    2258:	2c f4       	brge	.+10     	; 0x2264 <__stack+0x65>
		__ticks = 1;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	9a a3       	std	Y+34, r25	; 0x22
    2260:	89 a3       	std	Y+33, r24	; 0x21
    2262:	3f c0       	rjmp	.+126    	; 0x22e2 <__stack+0xe3>
	else if (__tmp > 65535)
    2264:	6b a1       	ldd	r22, Y+35	; 0x23
    2266:	7c a1       	ldd	r23, Y+36	; 0x24
    2268:	8d a1       	ldd	r24, Y+37	; 0x25
    226a:	9e a1       	ldd	r25, Y+38	; 0x26
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	3f ef       	ldi	r19, 0xFF	; 255
    2270:	4f e7       	ldi	r20, 0x7F	; 127
    2272:	57 e4       	ldi	r21, 0x47	; 71
    2274:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
    2278:	18 16       	cp	r1, r24
    227a:	4c f5       	brge	.+82     	; 0x22ce <__stack+0xcf>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227c:	6f a1       	ldd	r22, Y+39	; 0x27
    227e:	78 a5       	ldd	r23, Y+40	; 0x28
    2280:	89 a5       	ldd	r24, Y+41	; 0x29
    2282:	9a a5       	ldd	r25, Y+42	; 0x2a
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e2       	ldi	r20, 0x20	; 32
    228a:	51 e4       	ldi	r21, 0x41	; 65
    228c:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	9a a3       	std	Y+34, r25	; 0x22
    22a2:	89 a3       	std	Y+33, r24	; 0x21
    22a4:	0f c0       	rjmp	.+30     	; 0x22c4 <__stack+0xc5>
    22a6:	80 e7       	ldi	r24, 0x70	; 112
    22a8:	91 e0       	ldi	r25, 0x01	; 1
    22aa:	98 a3       	std	Y+32, r25	; 0x20
    22ac:	8f 8f       	std	Y+31, r24	; 0x1f
    22ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22b0:	98 a1       	ldd	r25, Y+32	; 0x20
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <__stack+0xb3>
    22b6:	98 a3       	std	Y+32, r25	; 0x20
    22b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ba:	89 a1       	ldd	r24, Y+33	; 0x21
    22bc:	9a a1       	ldd	r25, Y+34	; 0x22
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	9a a3       	std	Y+34, r25	; 0x22
    22c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c4:	89 a1       	ldd	r24, Y+33	; 0x21
    22c6:	9a a1       	ldd	r25, Y+34	; 0x22
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	69 f7       	brne	.-38     	; 0x22a6 <__stack+0xa7>
    22cc:	14 c0       	rjmp	.+40     	; 0x22f6 <__stack+0xf7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ce:	6b a1       	ldd	r22, Y+35	; 0x23
    22d0:	7c a1       	ldd	r23, Y+36	; 0x24
    22d2:	8d a1       	ldd	r24, Y+37	; 0x25
    22d4:	9e a1       	ldd	r25, Y+38	; 0x26
    22d6:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	9a a3       	std	Y+34, r25	; 0x22
    22e0:	89 a3       	std	Y+33, r24	; 0x21
    22e2:	89 a1       	ldd	r24, Y+33	; 0x21
    22e4:	9a a1       	ldd	r25, Y+34	; 0x22
    22e6:	9e 8f       	std	Y+30, r25	; 0x1e
    22e8:	8d 8f       	std	Y+29, r24	; 0x1d
    22ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <__stack+0xef>
    22f2:	9e 8f       	std	Y+30, r25	; 0x1e
    22f4:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(3000);
			_delay_ms(2000);
here:		buzzer_off();
    22f6:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <buzzer_off>
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	90 ea       	ldi	r25, 0xA0	; 160
    22fe:	ac e0       	ldi	r26, 0x0C	; 12
    2300:	b6 e4       	ldi	r27, 0x46	; 70
    2302:	89 8f       	std	Y+25, r24	; 0x19
    2304:	9a 8f       	std	Y+26, r25	; 0x1a
    2306:	ab 8f       	std	Y+27, r26	; 0x1b
    2308:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230a:	69 8d       	ldd	r22, Y+25	; 0x19
    230c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    230e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2310:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2312:	26 e6       	ldi	r18, 0x66	; 102
    2314:	36 e6       	ldi	r19, 0x66	; 102
    2316:	46 e6       	ldi	r20, 0x66	; 102
    2318:	55 e4       	ldi	r21, 0x45	; 69
    231a:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	8d 8b       	std	Y+21, r24	; 0x15
    2324:	9e 8b       	std	Y+22, r25	; 0x16
    2326:	af 8b       	std	Y+23, r26	; 0x17
    2328:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    232a:	6d 89       	ldd	r22, Y+21	; 0x15
    232c:	7e 89       	ldd	r23, Y+22	; 0x16
    232e:	8f 89       	ldd	r24, Y+23	; 0x17
    2330:	98 8d       	ldd	r25, Y+24	; 0x18
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e8       	ldi	r20, 0x80	; 128
    2338:	5f e3       	ldi	r21, 0x3F	; 63
    233a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
    233e:	88 23       	and	r24, r24
    2340:	2c f4       	brge	.+10     	; 0x234c <__stack+0x14d>
		__ticks = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9c 8b       	std	Y+20, r25	; 0x14
    2348:	8b 8b       	std	Y+19, r24	; 0x13
    234a:	3f c0       	rjmp	.+126    	; 0x23ca <__stack+0x1cb>
	else if (__tmp > 65535)
    234c:	6d 89       	ldd	r22, Y+21	; 0x15
    234e:	7e 89       	ldd	r23, Y+22	; 0x16
    2350:	8f 89       	ldd	r24, Y+23	; 0x17
    2352:	98 8d       	ldd	r25, Y+24	; 0x18
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	3f ef       	ldi	r19, 0xFF	; 255
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	57 e4       	ldi	r21, 0x47	; 71
    235c:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
    2360:	18 16       	cp	r1, r24
    2362:	4c f5       	brge	.+82     	; 0x23b6 <__stack+0x1b7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2364:	69 8d       	ldd	r22, Y+25	; 0x19
    2366:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2368:	8b 8d       	ldd	r24, Y+27	; 0x1b
    236a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e2       	ldi	r20, 0x20	; 32
    2372:	51 e4       	ldi	r21, 0x41	; 65
    2374:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9c 8b       	std	Y+20, r25	; 0x14
    238a:	8b 8b       	std	Y+19, r24	; 0x13
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <__stack+0x1ad>
    238e:	80 e7       	ldi	r24, 0x70	; 112
    2390:	91 e0       	ldi	r25, 0x01	; 1
    2392:	9a 8b       	std	Y+18, r25	; 0x12
    2394:	89 8b       	std	Y+17, r24	; 0x11
    2396:	89 89       	ldd	r24, Y+17	; 0x11
    2398:	9a 89       	ldd	r25, Y+18	; 0x12
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <__stack+0x19b>
    239e:	9a 8b       	std	Y+18, r25	; 0x12
    23a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a2:	8b 89       	ldd	r24, Y+19	; 0x13
    23a4:	9c 89       	ldd	r25, Y+20	; 0x14
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	9c 8b       	std	Y+20, r25	; 0x14
    23aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ac:	8b 89       	ldd	r24, Y+19	; 0x13
    23ae:	9c 89       	ldd	r25, Y+20	; 0x14
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	69 f7       	brne	.-38     	; 0x238e <__stack+0x18f>
    23b4:	14 c0       	rjmp	.+40     	; 0x23de <__stack+0x1df>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b6:	6d 89       	ldd	r22, Y+21	; 0x15
    23b8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ba:	8f 89       	ldd	r24, Y+23	; 0x17
    23bc:	98 8d       	ldd	r25, Y+24	; 0x18
    23be:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9c 8b       	std	Y+20, r25	; 0x14
    23c8:	8b 8b       	std	Y+19, r24	; 0x13
    23ca:	8b 89       	ldd	r24, Y+19	; 0x13
    23cc:	9c 89       	ldd	r25, Y+20	; 0x14
    23ce:	98 8b       	std	Y+16, r25	; 0x10
    23d0:	8f 87       	std	Y+15, r24	; 0x0f
    23d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d4:	98 89       	ldd	r25, Y+16	; 0x10
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <__stack+0x1d7>
    23da:	98 8b       	std	Y+16, r25	; 0x10
    23dc:	8f 87       	std	Y+15, r24	; 0x0f
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e8       	ldi	r25, 0x80	; 128
    23e2:	ab e3       	ldi	r26, 0x3B	; 59
    23e4:	b5 e4       	ldi	r27, 0x45	; 69
    23e6:	8b 87       	std	Y+11, r24	; 0x0b
    23e8:	9c 87       	std	Y+12, r25	; 0x0c
    23ea:	ad 87       	std	Y+13, r26	; 0x0d
    23ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f6:	26 e6       	ldi	r18, 0x66	; 102
    23f8:	36 e6       	ldi	r19, 0x66	; 102
    23fa:	46 e6       	ldi	r20, 0x66	; 102
    23fc:	55 e4       	ldi	r21, 0x45	; 69
    23fe:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	8f 83       	std	Y+7, r24	; 0x07
    2408:	98 87       	std	Y+8, r25	; 0x08
    240a:	a9 87       	std	Y+9, r26	; 0x09
    240c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    240e:	6f 81       	ldd	r22, Y+7	; 0x07
    2410:	78 85       	ldd	r23, Y+8	; 0x08
    2412:	89 85       	ldd	r24, Y+9	; 0x09
    2414:	9a 85       	ldd	r25, Y+10	; 0x0a
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e8       	ldi	r20, 0x80	; 128
    241c:	5f e3       	ldi	r21, 0x3F	; 63
    241e:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__ltsf2>
    2422:	88 23       	and	r24, r24
    2424:	2c f4       	brge	.+10     	; 0x2430 <__stack+0x231>
		__ticks = 1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9e 83       	std	Y+6, r25	; 0x06
    242c:	8d 83       	std	Y+5, r24	; 0x05
    242e:	3f c0       	rjmp	.+126    	; 0x24ae <__stack+0x2af>
	else if (__tmp > 65535)
    2430:	6f 81       	ldd	r22, Y+7	; 0x07
    2432:	78 85       	ldd	r23, Y+8	; 0x08
    2434:	89 85       	ldd	r24, Y+9	; 0x09
    2436:	9a 85       	ldd	r25, Y+10	; 0x0a
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	3f ef       	ldi	r19, 0xFF	; 255
    243c:	4f e7       	ldi	r20, 0x7F	; 127
    243e:	57 e4       	ldi	r21, 0x47	; 71
    2440:	0e 94 65 16 	call	0x2cca	; 0x2cca <__gtsf2>
    2444:	18 16       	cp	r1, r24
    2446:	4c f5       	brge	.+82     	; 0x249a <__stack+0x29b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2448:	6b 85       	ldd	r22, Y+11	; 0x0b
    244a:	7c 85       	ldd	r23, Y+12	; 0x0c
    244c:	8d 85       	ldd	r24, Y+13	; 0x0d
    244e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e2       	ldi	r20, 0x20	; 32
    2456:	51 e4       	ldi	r21, 0x41	; 65
    2458:	0e 94 bf 14 	call	0x297e	; 0x297e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	9e 83       	std	Y+6, r25	; 0x06
    246e:	8d 83       	std	Y+5, r24	; 0x05
    2470:	0f c0       	rjmp	.+30     	; 0x2490 <__stack+0x291>
    2472:	80 e7       	ldi	r24, 0x70	; 112
    2474:	91 e0       	ldi	r25, 0x01	; 1
    2476:	9c 83       	std	Y+4, r25	; 0x04
    2478:	8b 83       	std	Y+3, r24	; 0x03
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	9c 81       	ldd	r25, Y+4	; 0x04
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <__stack+0x27f>
    2482:	9c 83       	std	Y+4, r25	; 0x04
    2484:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	9e 81       	ldd	r25, Y+6	; 0x06
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	9e 83       	std	Y+6, r25	; 0x06
    248e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2490:	8d 81       	ldd	r24, Y+5	; 0x05
    2492:	9e 81       	ldd	r25, Y+6	; 0x06
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	69 f7       	brne	.-38     	; 0x2472 <__stack+0x273>
    2498:	17 c0       	rjmp	.+46     	; 0x24c8 <__stack+0x2c9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249a:	6f 81       	ldd	r22, Y+7	; 0x07
    249c:	78 85       	ldd	r23, Y+8	; 0x08
    249e:	89 85       	ldd	r24, Y+9	; 0x09
    24a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a2:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	9e 83       	std	Y+6, r25	; 0x06
    24ac:	8d 83       	std	Y+5, r24	; 0x05
    24ae:	8d 81       	ldd	r24, Y+5	; 0x05
    24b0:	9e 81       	ldd	r25, Y+6	; 0x06
    24b2:	9a 83       	std	Y+2, r25	; 0x02
    24b4:	89 83       	std	Y+1, r24	; 0x01
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <__stack+0x2bb>
    24be:	9a 83       	std	Y+2, r25	; 0x02
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <__stack+0x2c9>
		}
	
							
		default:
		{
		stop();
    24c4:	0e 94 19 0c 	call	0x1832	; 0x1832 <stop>



		}
//==========================LED operation=============================
	if(onr1!=0)
    24c8:	fe 01       	movw	r30, r28
    24ca:	ef 5a       	subi	r30, 0xAF	; 175
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 81       	ld	r24, Z
    24d0:	91 81       	ldd	r25, Z+1	; 0x01
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	41 f0       	breq	.+16     	; 0x24e6 <__stack+0x2e7>
		{
			PORTJ = PORTJ|0x01;	// Red1 glow
    24d6:	a5 e0       	ldi	r26, 0x05	; 5
    24d8:	b1 e0       	ldi	r27, 0x01	; 1
    24da:	e5 e0       	ldi	r30, 0x05	; 5
    24dc:	f1 e0       	ldi	r31, 0x01	; 1
    24de:	80 81       	ld	r24, Z
    24e0:	81 60       	ori	r24, 0x01	; 1
    24e2:	8c 93       	st	X, r24
    24e4:	07 c0       	rjmp	.+14     	; 0x24f4 <__stack+0x2f5>
		}
	else
		{
			PORTJ = PORTJ & 0x0FE;	//red1 off
    24e6:	a5 e0       	ldi	r26, 0x05	; 5
    24e8:	b1 e0       	ldi	r27, 0x01	; 1
    24ea:	e5 e0       	ldi	r30, 0x05	; 5
    24ec:	f1 e0       	ldi	r31, 0x01	; 1
    24ee:	80 81       	ld	r24, Z
    24f0:	8e 7f       	andi	r24, 0xFE	; 254
    24f2:	8c 93       	st	X, r24
		}
		
	if(ong1!=0)
    24f4:	fe 01       	movw	r30, r28
    24f6:	e1 5b       	subi	r30, 0xB1	; 177
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 81       	ld	r24, Z
    24fc:	91 81       	ldd	r25, Z+1	; 0x01
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	41 f0       	breq	.+16     	; 0x2512 <__stack+0x313>
		{
			PORTJ = PORTJ|0x03;	//yellow1 glow
    2502:	a5 e0       	ldi	r26, 0x05	; 5
    2504:	b1 e0       	ldi	r27, 0x01	; 1
    2506:	e5 e0       	ldi	r30, 0x05	; 5
    2508:	f1 e0       	ldi	r31, 0x01	; 1
    250a:	80 81       	ld	r24, Z
    250c:	83 60       	ori	r24, 0x03	; 3
    250e:	8c 93       	st	X, r24
    2510:	07 c0       	rjmp	.+14     	; 0x2520 <__stack+0x321>
		}
	else
		{
			PORTJ = PORTJ & 0xFD;	//yellow1 off
    2512:	a5 e0       	ldi	r26, 0x05	; 5
    2514:	b1 e0       	ldi	r27, 0x01	; 1
    2516:	e5 e0       	ldi	r30, 0x05	; 5
    2518:	f1 e0       	ldi	r31, 0x01	; 1
    251a:	80 81       	ld	r24, Z
    251c:	8d 7f       	andi	r24, 0xFD	; 253
    251e:	8c 93       	st	X, r24
		}
	
	if(onb1!=0)
    2520:	fe 01       	movw	r30, r28
    2522:	e3 5b       	subi	r30, 0xB3	; 179
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	80 81       	ld	r24, Z
    2528:	91 81       	ldd	r25, Z+1	; 0x01
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	41 f0       	breq	.+16     	; 0x253e <__stack+0x33f>
		{
			PORTJ = PORTJ|0x04; // blue1 on
    252e:	a5 e0       	ldi	r26, 0x05	; 5
    2530:	b1 e0       	ldi	r27, 0x01	; 1
    2532:	e5 e0       	ldi	r30, 0x05	; 5
    2534:	f1 e0       	ldi	r31, 0x01	; 1
    2536:	80 81       	ld	r24, Z
    2538:	84 60       	ori	r24, 0x04	; 4
    253a:	8c 93       	st	X, r24
    253c:	07 c0       	rjmp	.+14     	; 0x254c <__stack+0x34d>
		}
	else
		{
			PORTJ = PORTJ&0xFB;  // blue1 off
    253e:	a5 e0       	ldi	r26, 0x05	; 5
    2540:	b1 e0       	ldi	r27, 0x01	; 1
    2542:	e5 e0       	ldi	r30, 0x05	; 5
    2544:	f1 e0       	ldi	r31, 0x01	; 1
    2546:	80 81       	ld	r24, Z
    2548:	8b 7f       	andi	r24, 0xFB	; 251
    254a:	8c 93       	st	X, r24
		}

	if(onr2!=0)
    254c:	fe 01       	movw	r30, r28
    254e:	e5 5b       	subi	r30, 0xB5	; 181
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	80 81       	ld	r24, Z
    2554:	91 81       	ldd	r25, Z+1	; 0x01
    2556:	00 97       	sbiw	r24, 0x00	; 0
    2558:	41 f0       	breq	.+16     	; 0x256a <__stack+0x36b>
		{
			PORTJ = PORTJ|0x08; //red2 on
    255a:	a5 e0       	ldi	r26, 0x05	; 5
    255c:	b1 e0       	ldi	r27, 0x01	; 1
    255e:	e5 e0       	ldi	r30, 0x05	; 5
    2560:	f1 e0       	ldi	r31, 0x01	; 1
    2562:	80 81       	ld	r24, Z
    2564:	88 60       	ori	r24, 0x08	; 8
    2566:	8c 93       	st	X, r24
    2568:	07 c0       	rjmp	.+14     	; 0x2578 <__stack+0x379>
		}
	else
		{
			PORTJ = PORTJ&0xF7;  //red2 off
    256a:	a5 e0       	ldi	r26, 0x05	; 5
    256c:	b1 e0       	ldi	r27, 0x01	; 1
    256e:	e5 e0       	ldi	r30, 0x05	; 5
    2570:	f1 e0       	ldi	r31, 0x01	; 1
    2572:	80 81       	ld	r24, Z
    2574:	87 7f       	andi	r24, 0xF7	; 247
    2576:	8c 93       	st	X, r24
		}
	
	if(ong2!=0)
    2578:	fe 01       	movw	r30, r28
    257a:	e7 5b       	subi	r30, 0xB7	; 183
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 81       	ld	r24, Z
    2580:	91 81       	ldd	r25, Z+1	; 0x01
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	41 f0       	breq	.+16     	; 0x2596 <__stack+0x397>
		{
			PORTJ = PORTJ|0x18;  //yellow2 on
    2586:	a5 e0       	ldi	r26, 0x05	; 5
    2588:	b1 e0       	ldi	r27, 0x01	; 1
    258a:	e5 e0       	ldi	r30, 0x05	; 5
    258c:	f1 e0       	ldi	r31, 0x01	; 1
    258e:	80 81       	ld	r24, Z
    2590:	88 61       	ori	r24, 0x18	; 24
    2592:	8c 93       	st	X, r24
    2594:	07 c0       	rjmp	.+14     	; 0x25a4 <__stack+0x3a5>
		}
	else
		{
			PORTJ = PORTJ&0xEF;  //yellow2 off
    2596:	a5 e0       	ldi	r26, 0x05	; 5
    2598:	b1 e0       	ldi	r27, 0x01	; 1
    259a:	e5 e0       	ldi	r30, 0x05	; 5
    259c:	f1 e0       	ldi	r31, 0x01	; 1
    259e:	80 81       	ld	r24, Z
    25a0:	8f 7e       	andi	r24, 0xEF	; 239
    25a2:	8c 93       	st	X, r24
 		}

	if(onb2!=0)
    25a4:	fe 01       	movw	r30, r28
    25a6:	e9 5b       	subi	r30, 0xB9	; 185
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	80 81       	ld	r24, Z
    25ac:	91 81       	ldd	r25, Z+1	; 0x01
    25ae:	00 97       	sbiw	r24, 0x00	; 0
    25b0:	41 f0       	breq	.+16     	; 0x25c2 <__stack+0x3c3>
		{
			PORTJ = PORTJ|0x20;  //blue2 on
    25b2:	a5 e0       	ldi	r26, 0x05	; 5
    25b4:	b1 e0       	ldi	r27, 0x01	; 1
    25b6:	e5 e0       	ldi	r30, 0x05	; 5
    25b8:	f1 e0       	ldi	r31, 0x01	; 1
    25ba:	80 81       	ld	r24, Z
    25bc:	80 62       	ori	r24, 0x20	; 32
    25be:	8c 93       	st	X, r24
    25c0:	b7 cb       	rjmp	.-2194   	; 0x1d30 <main+0x62>
		}
	else
		{
			PORTJ = PORTJ&0xDF;  //blue2 off
    25c2:	a5 e0       	ldi	r26, 0x05	; 5
    25c4:	b1 e0       	ldi	r27, 0x01	; 1
    25c6:	e5 e0       	ldi	r30, 0x05	; 5
    25c8:	f1 e0       	ldi	r31, 0x01	; 1
    25ca:	80 81       	ld	r24, Z
    25cc:	8f 7d       	andi	r24, 0xDF	; 223
    25ce:	8c 93       	st	X, r24
    25d0:	af cb       	rjmp	.-2210   	; 0x1d30 <main+0x62>

000025d2 <__fixunssfsi>:
    25d2:	ef 92       	push	r14
    25d4:	ff 92       	push	r15
    25d6:	0f 93       	push	r16
    25d8:	1f 93       	push	r17
    25da:	7b 01       	movw	r14, r22
    25dc:	8c 01       	movw	r16, r24
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e0       	ldi	r20, 0x00	; 0
    25e4:	5f e4       	ldi	r21, 0x4F	; 79
    25e6:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__gesf2>
    25ea:	88 23       	and	r24, r24
    25ec:	8c f0       	brlt	.+34     	; 0x2610 <__fixunssfsi+0x3e>
    25ee:	c8 01       	movw	r24, r16
    25f0:	b7 01       	movw	r22, r14
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	5f e4       	ldi	r21, 0x4F	; 79
    25fa:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__subsf3>
    25fe:	0e 94 f5 16 	call	0x2dea	; 0x2dea <__fixsfsi>
    2602:	9b 01       	movw	r18, r22
    2604:	ac 01       	movw	r20, r24
    2606:	20 50       	subi	r18, 0x00	; 0
    2608:	30 40       	sbci	r19, 0x00	; 0
    260a:	40 40       	sbci	r20, 0x00	; 0
    260c:	50 48       	sbci	r21, 0x80	; 128
    260e:	06 c0       	rjmp	.+12     	; 0x261c <__fixunssfsi+0x4a>
    2610:	c8 01       	movw	r24, r16
    2612:	b7 01       	movw	r22, r14
    2614:	0e 94 f5 16 	call	0x2dea	; 0x2dea <__fixsfsi>
    2618:	9b 01       	movw	r18, r22
    261a:	ac 01       	movw	r20, r24
    261c:	b9 01       	movw	r22, r18
    261e:	ca 01       	movw	r24, r20
    2620:	1f 91       	pop	r17
    2622:	0f 91       	pop	r16
    2624:	ff 90       	pop	r15
    2626:	ef 90       	pop	r14
    2628:	08 95       	ret

0000262a <_fpadd_parts>:
    262a:	a0 e0       	ldi	r26, 0x00	; 0
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	eb e1       	ldi	r30, 0x1B	; 27
    2630:	f3 e1       	ldi	r31, 0x13	; 19
    2632:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <__prologue_saves__>
    2636:	dc 01       	movw	r26, r24
    2638:	2b 01       	movw	r4, r22
    263a:	fa 01       	movw	r30, r20
    263c:	9c 91       	ld	r25, X
    263e:	92 30       	cpi	r25, 0x02	; 2
    2640:	08 f4       	brcc	.+2      	; 0x2644 <_fpadd_parts+0x1a>
    2642:	39 c1       	rjmp	.+626    	; 0x28b6 <_fpadd_parts+0x28c>
    2644:	eb 01       	movw	r28, r22
    2646:	88 81       	ld	r24, Y
    2648:	82 30       	cpi	r24, 0x02	; 2
    264a:	08 f4       	brcc	.+2      	; 0x264e <_fpadd_parts+0x24>
    264c:	33 c1       	rjmp	.+614    	; 0x28b4 <_fpadd_parts+0x28a>
    264e:	94 30       	cpi	r25, 0x04	; 4
    2650:	69 f4       	brne	.+26     	; 0x266c <_fpadd_parts+0x42>
    2652:	84 30       	cpi	r24, 0x04	; 4
    2654:	09 f0       	breq	.+2      	; 0x2658 <_fpadd_parts+0x2e>
    2656:	2f c1       	rjmp	.+606    	; 0x28b6 <_fpadd_parts+0x28c>
    2658:	11 96       	adiw	r26, 0x01	; 1
    265a:	9c 91       	ld	r25, X
    265c:	11 97       	sbiw	r26, 0x01	; 1
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	98 17       	cp	r25, r24
    2662:	09 f4       	brne	.+2      	; 0x2666 <_fpadd_parts+0x3c>
    2664:	28 c1       	rjmp	.+592    	; 0x28b6 <_fpadd_parts+0x28c>
    2666:	a0 e0       	ldi	r26, 0x00	; 0
    2668:	b2 e0       	ldi	r27, 0x02	; 2
    266a:	25 c1       	rjmp	.+586    	; 0x28b6 <_fpadd_parts+0x28c>
    266c:	84 30       	cpi	r24, 0x04	; 4
    266e:	09 f4       	brne	.+2      	; 0x2672 <_fpadd_parts+0x48>
    2670:	21 c1       	rjmp	.+578    	; 0x28b4 <_fpadd_parts+0x28a>
    2672:	82 30       	cpi	r24, 0x02	; 2
    2674:	a9 f4       	brne	.+42     	; 0x26a0 <_fpadd_parts+0x76>
    2676:	92 30       	cpi	r25, 0x02	; 2
    2678:	09 f0       	breq	.+2      	; 0x267c <_fpadd_parts+0x52>
    267a:	1d c1       	rjmp	.+570    	; 0x28b6 <_fpadd_parts+0x28c>
    267c:	9a 01       	movw	r18, r20
    267e:	ad 01       	movw	r20, r26
    2680:	88 e0       	ldi	r24, 0x08	; 8
    2682:	ea 01       	movw	r28, r20
    2684:	09 90       	ld	r0, Y+
    2686:	ae 01       	movw	r20, r28
    2688:	e9 01       	movw	r28, r18
    268a:	09 92       	st	Y+, r0
    268c:	9e 01       	movw	r18, r28
    268e:	81 50       	subi	r24, 0x01	; 1
    2690:	c1 f7       	brne	.-16     	; 0x2682 <_fpadd_parts+0x58>
    2692:	e2 01       	movw	r28, r4
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	11 96       	adiw	r26, 0x01	; 1
    2698:	9c 91       	ld	r25, X
    269a:	89 23       	and	r24, r25
    269c:	81 83       	std	Z+1, r24	; 0x01
    269e:	08 c1       	rjmp	.+528    	; 0x28b0 <_fpadd_parts+0x286>
    26a0:	92 30       	cpi	r25, 0x02	; 2
    26a2:	09 f4       	brne	.+2      	; 0x26a6 <_fpadd_parts+0x7c>
    26a4:	07 c1       	rjmp	.+526    	; 0x28b4 <_fpadd_parts+0x28a>
    26a6:	12 96       	adiw	r26, 0x02	; 2
    26a8:	2d 90       	ld	r2, X+
    26aa:	3c 90       	ld	r3, X
    26ac:	13 97       	sbiw	r26, 0x03	; 3
    26ae:	eb 01       	movw	r28, r22
    26b0:	8a 81       	ldd	r24, Y+2	; 0x02
    26b2:	9b 81       	ldd	r25, Y+3	; 0x03
    26b4:	14 96       	adiw	r26, 0x04	; 4
    26b6:	ad 90       	ld	r10, X+
    26b8:	bd 90       	ld	r11, X+
    26ba:	cd 90       	ld	r12, X+
    26bc:	dc 90       	ld	r13, X
    26be:	17 97       	sbiw	r26, 0x07	; 7
    26c0:	ec 80       	ldd	r14, Y+4	; 0x04
    26c2:	fd 80       	ldd	r15, Y+5	; 0x05
    26c4:	0e 81       	ldd	r16, Y+6	; 0x06
    26c6:	1f 81       	ldd	r17, Y+7	; 0x07
    26c8:	91 01       	movw	r18, r2
    26ca:	28 1b       	sub	r18, r24
    26cc:	39 0b       	sbc	r19, r25
    26ce:	b9 01       	movw	r22, r18
    26d0:	37 ff       	sbrs	r19, 7
    26d2:	04 c0       	rjmp	.+8      	; 0x26dc <_fpadd_parts+0xb2>
    26d4:	66 27       	eor	r22, r22
    26d6:	77 27       	eor	r23, r23
    26d8:	62 1b       	sub	r22, r18
    26da:	73 0b       	sbc	r23, r19
    26dc:	60 32       	cpi	r22, 0x20	; 32
    26de:	71 05       	cpc	r23, r1
    26e0:	0c f0       	brlt	.+2      	; 0x26e4 <_fpadd_parts+0xba>
    26e2:	61 c0       	rjmp	.+194    	; 0x27a6 <_fpadd_parts+0x17c>
    26e4:	12 16       	cp	r1, r18
    26e6:	13 06       	cpc	r1, r19
    26e8:	6c f5       	brge	.+90     	; 0x2744 <_fpadd_parts+0x11a>
    26ea:	37 01       	movw	r6, r14
    26ec:	48 01       	movw	r8, r16
    26ee:	06 2e       	mov	r0, r22
    26f0:	04 c0       	rjmp	.+8      	; 0x26fa <_fpadd_parts+0xd0>
    26f2:	96 94       	lsr	r9
    26f4:	87 94       	ror	r8
    26f6:	77 94       	ror	r7
    26f8:	67 94       	ror	r6
    26fa:	0a 94       	dec	r0
    26fc:	d2 f7       	brpl	.-12     	; 0x26f2 <_fpadd_parts+0xc8>
    26fe:	21 e0       	ldi	r18, 0x01	; 1
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	50 e0       	ldi	r21, 0x00	; 0
    2706:	04 c0       	rjmp	.+8      	; 0x2710 <_fpadd_parts+0xe6>
    2708:	22 0f       	add	r18, r18
    270a:	33 1f       	adc	r19, r19
    270c:	44 1f       	adc	r20, r20
    270e:	55 1f       	adc	r21, r21
    2710:	6a 95       	dec	r22
    2712:	d2 f7       	brpl	.-12     	; 0x2708 <_fpadd_parts+0xde>
    2714:	21 50       	subi	r18, 0x01	; 1
    2716:	30 40       	sbci	r19, 0x00	; 0
    2718:	40 40       	sbci	r20, 0x00	; 0
    271a:	50 40       	sbci	r21, 0x00	; 0
    271c:	2e 21       	and	r18, r14
    271e:	3f 21       	and	r19, r15
    2720:	40 23       	and	r20, r16
    2722:	51 23       	and	r21, r17
    2724:	21 15       	cp	r18, r1
    2726:	31 05       	cpc	r19, r1
    2728:	41 05       	cpc	r20, r1
    272a:	51 05       	cpc	r21, r1
    272c:	21 f0       	breq	.+8      	; 0x2736 <_fpadd_parts+0x10c>
    272e:	21 e0       	ldi	r18, 0x01	; 1
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	50 e0       	ldi	r21, 0x00	; 0
    2736:	79 01       	movw	r14, r18
    2738:	8a 01       	movw	r16, r20
    273a:	e6 28       	or	r14, r6
    273c:	f7 28       	or	r15, r7
    273e:	08 29       	or	r16, r8
    2740:	19 29       	or	r17, r9
    2742:	3c c0       	rjmp	.+120    	; 0x27bc <_fpadd_parts+0x192>
    2744:	23 2b       	or	r18, r19
    2746:	d1 f1       	breq	.+116    	; 0x27bc <_fpadd_parts+0x192>
    2748:	26 0e       	add	r2, r22
    274a:	37 1e       	adc	r3, r23
    274c:	35 01       	movw	r6, r10
    274e:	46 01       	movw	r8, r12
    2750:	06 2e       	mov	r0, r22
    2752:	04 c0       	rjmp	.+8      	; 0x275c <_fpadd_parts+0x132>
    2754:	96 94       	lsr	r9
    2756:	87 94       	ror	r8
    2758:	77 94       	ror	r7
    275a:	67 94       	ror	r6
    275c:	0a 94       	dec	r0
    275e:	d2 f7       	brpl	.-12     	; 0x2754 <_fpadd_parts+0x12a>
    2760:	21 e0       	ldi	r18, 0x01	; 1
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	50 e0       	ldi	r21, 0x00	; 0
    2768:	04 c0       	rjmp	.+8      	; 0x2772 <_fpadd_parts+0x148>
    276a:	22 0f       	add	r18, r18
    276c:	33 1f       	adc	r19, r19
    276e:	44 1f       	adc	r20, r20
    2770:	55 1f       	adc	r21, r21
    2772:	6a 95       	dec	r22
    2774:	d2 f7       	brpl	.-12     	; 0x276a <_fpadd_parts+0x140>
    2776:	21 50       	subi	r18, 0x01	; 1
    2778:	30 40       	sbci	r19, 0x00	; 0
    277a:	40 40       	sbci	r20, 0x00	; 0
    277c:	50 40       	sbci	r21, 0x00	; 0
    277e:	2a 21       	and	r18, r10
    2780:	3b 21       	and	r19, r11
    2782:	4c 21       	and	r20, r12
    2784:	5d 21       	and	r21, r13
    2786:	21 15       	cp	r18, r1
    2788:	31 05       	cpc	r19, r1
    278a:	41 05       	cpc	r20, r1
    278c:	51 05       	cpc	r21, r1
    278e:	21 f0       	breq	.+8      	; 0x2798 <_fpadd_parts+0x16e>
    2790:	21 e0       	ldi	r18, 0x01	; 1
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	50 e0       	ldi	r21, 0x00	; 0
    2798:	59 01       	movw	r10, r18
    279a:	6a 01       	movw	r12, r20
    279c:	a6 28       	or	r10, r6
    279e:	b7 28       	or	r11, r7
    27a0:	c8 28       	or	r12, r8
    27a2:	d9 28       	or	r13, r9
    27a4:	0b c0       	rjmp	.+22     	; 0x27bc <_fpadd_parts+0x192>
    27a6:	82 15       	cp	r24, r2
    27a8:	93 05       	cpc	r25, r3
    27aa:	2c f0       	brlt	.+10     	; 0x27b6 <_fpadd_parts+0x18c>
    27ac:	1c 01       	movw	r2, r24
    27ae:	aa 24       	eor	r10, r10
    27b0:	bb 24       	eor	r11, r11
    27b2:	65 01       	movw	r12, r10
    27b4:	03 c0       	rjmp	.+6      	; 0x27bc <_fpadd_parts+0x192>
    27b6:	ee 24       	eor	r14, r14
    27b8:	ff 24       	eor	r15, r15
    27ba:	87 01       	movw	r16, r14
    27bc:	11 96       	adiw	r26, 0x01	; 1
    27be:	9c 91       	ld	r25, X
    27c0:	d2 01       	movw	r26, r4
    27c2:	11 96       	adiw	r26, 0x01	; 1
    27c4:	8c 91       	ld	r24, X
    27c6:	98 17       	cp	r25, r24
    27c8:	09 f4       	brne	.+2      	; 0x27cc <_fpadd_parts+0x1a2>
    27ca:	45 c0       	rjmp	.+138    	; 0x2856 <_fpadd_parts+0x22c>
    27cc:	99 23       	and	r25, r25
    27ce:	39 f0       	breq	.+14     	; 0x27de <_fpadd_parts+0x1b4>
    27d0:	a8 01       	movw	r20, r16
    27d2:	97 01       	movw	r18, r14
    27d4:	2a 19       	sub	r18, r10
    27d6:	3b 09       	sbc	r19, r11
    27d8:	4c 09       	sbc	r20, r12
    27da:	5d 09       	sbc	r21, r13
    27dc:	06 c0       	rjmp	.+12     	; 0x27ea <_fpadd_parts+0x1c0>
    27de:	a6 01       	movw	r20, r12
    27e0:	95 01       	movw	r18, r10
    27e2:	2e 19       	sub	r18, r14
    27e4:	3f 09       	sbc	r19, r15
    27e6:	40 0b       	sbc	r20, r16
    27e8:	51 0b       	sbc	r21, r17
    27ea:	57 fd       	sbrc	r21, 7
    27ec:	08 c0       	rjmp	.+16     	; 0x27fe <_fpadd_parts+0x1d4>
    27ee:	11 82       	std	Z+1, r1	; 0x01
    27f0:	33 82       	std	Z+3, r3	; 0x03
    27f2:	22 82       	std	Z+2, r2	; 0x02
    27f4:	24 83       	std	Z+4, r18	; 0x04
    27f6:	35 83       	std	Z+5, r19	; 0x05
    27f8:	46 83       	std	Z+6, r20	; 0x06
    27fa:	57 83       	std	Z+7, r21	; 0x07
    27fc:	1d c0       	rjmp	.+58     	; 0x2838 <_fpadd_parts+0x20e>
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	81 83       	std	Z+1, r24	; 0x01
    2802:	33 82       	std	Z+3, r3	; 0x03
    2804:	22 82       	std	Z+2, r2	; 0x02
    2806:	88 27       	eor	r24, r24
    2808:	99 27       	eor	r25, r25
    280a:	dc 01       	movw	r26, r24
    280c:	82 1b       	sub	r24, r18
    280e:	93 0b       	sbc	r25, r19
    2810:	a4 0b       	sbc	r26, r20
    2812:	b5 0b       	sbc	r27, r21
    2814:	84 83       	std	Z+4, r24	; 0x04
    2816:	95 83       	std	Z+5, r25	; 0x05
    2818:	a6 83       	std	Z+6, r26	; 0x06
    281a:	b7 83       	std	Z+7, r27	; 0x07
    281c:	0d c0       	rjmp	.+26     	; 0x2838 <_fpadd_parts+0x20e>
    281e:	22 0f       	add	r18, r18
    2820:	33 1f       	adc	r19, r19
    2822:	44 1f       	adc	r20, r20
    2824:	55 1f       	adc	r21, r21
    2826:	24 83       	std	Z+4, r18	; 0x04
    2828:	35 83       	std	Z+5, r19	; 0x05
    282a:	46 83       	std	Z+6, r20	; 0x06
    282c:	57 83       	std	Z+7, r21	; 0x07
    282e:	82 81       	ldd	r24, Z+2	; 0x02
    2830:	93 81       	ldd	r25, Z+3	; 0x03
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	93 83       	std	Z+3, r25	; 0x03
    2836:	82 83       	std	Z+2, r24	; 0x02
    2838:	24 81       	ldd	r18, Z+4	; 0x04
    283a:	35 81       	ldd	r19, Z+5	; 0x05
    283c:	46 81       	ldd	r20, Z+6	; 0x06
    283e:	57 81       	ldd	r21, Z+7	; 0x07
    2840:	da 01       	movw	r26, r20
    2842:	c9 01       	movw	r24, r18
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	a1 09       	sbc	r26, r1
    2848:	b1 09       	sbc	r27, r1
    284a:	8f 5f       	subi	r24, 0xFF	; 255
    284c:	9f 4f       	sbci	r25, 0xFF	; 255
    284e:	af 4f       	sbci	r26, 0xFF	; 255
    2850:	bf 43       	sbci	r27, 0x3F	; 63
    2852:	28 f3       	brcs	.-54     	; 0x281e <_fpadd_parts+0x1f4>
    2854:	0b c0       	rjmp	.+22     	; 0x286c <_fpadd_parts+0x242>
    2856:	91 83       	std	Z+1, r25	; 0x01
    2858:	33 82       	std	Z+3, r3	; 0x03
    285a:	22 82       	std	Z+2, r2	; 0x02
    285c:	ea 0c       	add	r14, r10
    285e:	fb 1c       	adc	r15, r11
    2860:	0c 1d       	adc	r16, r12
    2862:	1d 1d       	adc	r17, r13
    2864:	e4 82       	std	Z+4, r14	; 0x04
    2866:	f5 82       	std	Z+5, r15	; 0x05
    2868:	06 83       	std	Z+6, r16	; 0x06
    286a:	17 83       	std	Z+7, r17	; 0x07
    286c:	83 e0       	ldi	r24, 0x03	; 3
    286e:	80 83       	st	Z, r24
    2870:	24 81       	ldd	r18, Z+4	; 0x04
    2872:	35 81       	ldd	r19, Z+5	; 0x05
    2874:	46 81       	ldd	r20, Z+6	; 0x06
    2876:	57 81       	ldd	r21, Z+7	; 0x07
    2878:	57 ff       	sbrs	r21, 7
    287a:	1a c0       	rjmp	.+52     	; 0x28b0 <_fpadd_parts+0x286>
    287c:	c9 01       	movw	r24, r18
    287e:	aa 27       	eor	r26, r26
    2880:	97 fd       	sbrc	r25, 7
    2882:	a0 95       	com	r26
    2884:	ba 2f       	mov	r27, r26
    2886:	81 70       	andi	r24, 0x01	; 1
    2888:	90 70       	andi	r25, 0x00	; 0
    288a:	a0 70       	andi	r26, 0x00	; 0
    288c:	b0 70       	andi	r27, 0x00	; 0
    288e:	56 95       	lsr	r21
    2890:	47 95       	ror	r20
    2892:	37 95       	ror	r19
    2894:	27 95       	ror	r18
    2896:	82 2b       	or	r24, r18
    2898:	93 2b       	or	r25, r19
    289a:	a4 2b       	or	r26, r20
    289c:	b5 2b       	or	r27, r21
    289e:	84 83       	std	Z+4, r24	; 0x04
    28a0:	95 83       	std	Z+5, r25	; 0x05
    28a2:	a6 83       	std	Z+6, r26	; 0x06
    28a4:	b7 83       	std	Z+7, r27	; 0x07
    28a6:	82 81       	ldd	r24, Z+2	; 0x02
    28a8:	93 81       	ldd	r25, Z+3	; 0x03
    28aa:	01 96       	adiw	r24, 0x01	; 1
    28ac:	93 83       	std	Z+3, r25	; 0x03
    28ae:	82 83       	std	Z+2, r24	; 0x02
    28b0:	df 01       	movw	r26, r30
    28b2:	01 c0       	rjmp	.+2      	; 0x28b6 <_fpadd_parts+0x28c>
    28b4:	d2 01       	movw	r26, r4
    28b6:	cd 01       	movw	r24, r26
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	e2 e1       	ldi	r30, 0x12	; 18
    28be:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <__epilogue_restores__>

000028c2 <__subsf3>:
    28c2:	a0 e2       	ldi	r26, 0x20	; 32
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e7 e6       	ldi	r30, 0x67	; 103
    28c8:	f4 e1       	ldi	r31, 0x14	; 20
    28ca:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x18>
    28ce:	69 83       	std	Y+1, r22	; 0x01
    28d0:	7a 83       	std	Y+2, r23	; 0x02
    28d2:	8b 83       	std	Y+3, r24	; 0x03
    28d4:	9c 83       	std	Y+4, r25	; 0x04
    28d6:	2d 83       	std	Y+5, r18	; 0x05
    28d8:	3e 83       	std	Y+6, r19	; 0x06
    28da:	4f 83       	std	Y+7, r20	; 0x07
    28dc:	58 87       	std	Y+8, r21	; 0x08
    28de:	e9 e0       	ldi	r30, 0x09	; 9
    28e0:	ee 2e       	mov	r14, r30
    28e2:	f1 2c       	mov	r15, r1
    28e4:	ec 0e       	add	r14, r28
    28e6:	fd 1e       	adc	r15, r29
    28e8:	ce 01       	movw	r24, r28
    28ea:	01 96       	adiw	r24, 0x01	; 1
    28ec:	b7 01       	movw	r22, r14
    28ee:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__unpack_f>
    28f2:	8e 01       	movw	r16, r28
    28f4:	0f 5e       	subi	r16, 0xEF	; 239
    28f6:	1f 4f       	sbci	r17, 0xFF	; 255
    28f8:	ce 01       	movw	r24, r28
    28fa:	05 96       	adiw	r24, 0x05	; 5
    28fc:	b8 01       	movw	r22, r16
    28fe:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__unpack_f>
    2902:	8a 89       	ldd	r24, Y+18	; 0x12
    2904:	91 e0       	ldi	r25, 0x01	; 1
    2906:	89 27       	eor	r24, r25
    2908:	8a 8b       	std	Y+18, r24	; 0x12
    290a:	c7 01       	movw	r24, r14
    290c:	b8 01       	movw	r22, r16
    290e:	ae 01       	movw	r20, r28
    2910:	47 5e       	subi	r20, 0xE7	; 231
    2912:	5f 4f       	sbci	r21, 0xFF	; 255
    2914:	0e 94 15 13 	call	0x262a	; 0x262a <_fpadd_parts>
    2918:	0e 94 11 18 	call	0x3022	; 0x3022 <__pack_f>
    291c:	a0 96       	adiw	r28, 0x20	; 32
    291e:	e6 e0       	ldi	r30, 0x06	; 6
    2920:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x18>

00002924 <__addsf3>:
    2924:	a0 e2       	ldi	r26, 0x20	; 32
    2926:	b0 e0       	ldi	r27, 0x00	; 0
    2928:	e8 e9       	ldi	r30, 0x98	; 152
    292a:	f4 e1       	ldi	r31, 0x14	; 20
    292c:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x18>
    2930:	69 83       	std	Y+1, r22	; 0x01
    2932:	7a 83       	std	Y+2, r23	; 0x02
    2934:	8b 83       	std	Y+3, r24	; 0x03
    2936:	9c 83       	std	Y+4, r25	; 0x04
    2938:	2d 83       	std	Y+5, r18	; 0x05
    293a:	3e 83       	std	Y+6, r19	; 0x06
    293c:	4f 83       	std	Y+7, r20	; 0x07
    293e:	58 87       	std	Y+8, r21	; 0x08
    2940:	f9 e0       	ldi	r31, 0x09	; 9
    2942:	ef 2e       	mov	r14, r31
    2944:	f1 2c       	mov	r15, r1
    2946:	ec 0e       	add	r14, r28
    2948:	fd 1e       	adc	r15, r29
    294a:	ce 01       	movw	r24, r28
    294c:	01 96       	adiw	r24, 0x01	; 1
    294e:	b7 01       	movw	r22, r14
    2950:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__unpack_f>
    2954:	8e 01       	movw	r16, r28
    2956:	0f 5e       	subi	r16, 0xEF	; 239
    2958:	1f 4f       	sbci	r17, 0xFF	; 255
    295a:	ce 01       	movw	r24, r28
    295c:	05 96       	adiw	r24, 0x05	; 5
    295e:	b8 01       	movw	r22, r16
    2960:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__unpack_f>
    2964:	c7 01       	movw	r24, r14
    2966:	b8 01       	movw	r22, r16
    2968:	ae 01       	movw	r20, r28
    296a:	47 5e       	subi	r20, 0xE7	; 231
    296c:	5f 4f       	sbci	r21, 0xFF	; 255
    296e:	0e 94 15 13 	call	0x262a	; 0x262a <_fpadd_parts>
    2972:	0e 94 11 18 	call	0x3022	; 0x3022 <__pack_f>
    2976:	a0 96       	adiw	r28, 0x20	; 32
    2978:	e6 e0       	ldi	r30, 0x06	; 6
    297a:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x18>

0000297e <__mulsf3>:
    297e:	a0 e2       	ldi	r26, 0x20	; 32
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	e5 ec       	ldi	r30, 0xC5	; 197
    2984:	f4 e1       	ldi	r31, 0x14	; 20
    2986:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <__prologue_saves__>
    298a:	69 83       	std	Y+1, r22	; 0x01
    298c:	7a 83       	std	Y+2, r23	; 0x02
    298e:	8b 83       	std	Y+3, r24	; 0x03
    2990:	9c 83       	std	Y+4, r25	; 0x04
    2992:	2d 83       	std	Y+5, r18	; 0x05
    2994:	3e 83       	std	Y+6, r19	; 0x06
    2996:	4f 83       	std	Y+7, r20	; 0x07
    2998:	58 87       	std	Y+8, r21	; 0x08
    299a:	ce 01       	movw	r24, r28
    299c:	01 96       	adiw	r24, 0x01	; 1
    299e:	be 01       	movw	r22, r28
    29a0:	67 5f       	subi	r22, 0xF7	; 247
    29a2:	7f 4f       	sbci	r23, 0xFF	; 255
    29a4:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__unpack_f>
    29a8:	ce 01       	movw	r24, r28
    29aa:	05 96       	adiw	r24, 0x05	; 5
    29ac:	be 01       	movw	r22, r28
    29ae:	6f 5e       	subi	r22, 0xEF	; 239
    29b0:	7f 4f       	sbci	r23, 0xFF	; 255
    29b2:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__unpack_f>
    29b6:	99 85       	ldd	r25, Y+9	; 0x09
    29b8:	92 30       	cpi	r25, 0x02	; 2
    29ba:	88 f0       	brcs	.+34     	; 0x29de <__mulsf3+0x60>
    29bc:	89 89       	ldd	r24, Y+17	; 0x11
    29be:	82 30       	cpi	r24, 0x02	; 2
    29c0:	c8 f0       	brcs	.+50     	; 0x29f4 <__mulsf3+0x76>
    29c2:	94 30       	cpi	r25, 0x04	; 4
    29c4:	19 f4       	brne	.+6      	; 0x29cc <__mulsf3+0x4e>
    29c6:	82 30       	cpi	r24, 0x02	; 2
    29c8:	51 f4       	brne	.+20     	; 0x29de <__mulsf3+0x60>
    29ca:	04 c0       	rjmp	.+8      	; 0x29d4 <__mulsf3+0x56>
    29cc:	84 30       	cpi	r24, 0x04	; 4
    29ce:	29 f4       	brne	.+10     	; 0x29da <__mulsf3+0x5c>
    29d0:	92 30       	cpi	r25, 0x02	; 2
    29d2:	81 f4       	brne	.+32     	; 0x29f4 <__mulsf3+0x76>
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	92 e0       	ldi	r25, 0x02	; 2
    29d8:	c6 c0       	rjmp	.+396    	; 0x2b66 <__mulsf3+0x1e8>
    29da:	92 30       	cpi	r25, 0x02	; 2
    29dc:	49 f4       	brne	.+18     	; 0x29f0 <__mulsf3+0x72>
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e2:	8a 89       	ldd	r24, Y+18	; 0x12
    29e4:	98 13       	cpse	r25, r24
    29e6:	21 e0       	ldi	r18, 0x01	; 1
    29e8:	2a 87       	std	Y+10, r18	; 0x0a
    29ea:	ce 01       	movw	r24, r28
    29ec:	09 96       	adiw	r24, 0x09	; 9
    29ee:	bb c0       	rjmp	.+374    	; 0x2b66 <__mulsf3+0x1e8>
    29f0:	82 30       	cpi	r24, 0x02	; 2
    29f2:	49 f4       	brne	.+18     	; 0x2a06 <__mulsf3+0x88>
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f8:	8a 89       	ldd	r24, Y+18	; 0x12
    29fa:	98 13       	cpse	r25, r24
    29fc:	21 e0       	ldi	r18, 0x01	; 1
    29fe:	2a 8b       	std	Y+18, r18	; 0x12
    2a00:	ce 01       	movw	r24, r28
    2a02:	41 96       	adiw	r24, 0x11	; 17
    2a04:	b0 c0       	rjmp	.+352    	; 0x2b66 <__mulsf3+0x1e8>
    2a06:	2d 84       	ldd	r2, Y+13	; 0x0d
    2a08:	3e 84       	ldd	r3, Y+14	; 0x0e
    2a0a:	4f 84       	ldd	r4, Y+15	; 0x0f
    2a0c:	58 88       	ldd	r5, Y+16	; 0x10
    2a0e:	6d 88       	ldd	r6, Y+21	; 0x15
    2a10:	7e 88       	ldd	r7, Y+22	; 0x16
    2a12:	8f 88       	ldd	r8, Y+23	; 0x17
    2a14:	98 8c       	ldd	r9, Y+24	; 0x18
    2a16:	ee 24       	eor	r14, r14
    2a18:	ff 24       	eor	r15, r15
    2a1a:	87 01       	movw	r16, r14
    2a1c:	aa 24       	eor	r10, r10
    2a1e:	bb 24       	eor	r11, r11
    2a20:	65 01       	movw	r12, r10
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	60 e0       	ldi	r22, 0x00	; 0
    2a28:	70 e0       	ldi	r23, 0x00	; 0
    2a2a:	e0 e0       	ldi	r30, 0x00	; 0
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	c1 01       	movw	r24, r2
    2a30:	81 70       	andi	r24, 0x01	; 1
    2a32:	90 70       	andi	r25, 0x00	; 0
    2a34:	89 2b       	or	r24, r25
    2a36:	e9 f0       	breq	.+58     	; 0x2a72 <__mulsf3+0xf4>
    2a38:	e6 0c       	add	r14, r6
    2a3a:	f7 1c       	adc	r15, r7
    2a3c:	08 1d       	adc	r16, r8
    2a3e:	19 1d       	adc	r17, r9
    2a40:	9a 01       	movw	r18, r20
    2a42:	ab 01       	movw	r20, r22
    2a44:	2a 0d       	add	r18, r10
    2a46:	3b 1d       	adc	r19, r11
    2a48:	4c 1d       	adc	r20, r12
    2a4a:	5d 1d       	adc	r21, r13
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	a0 e0       	ldi	r26, 0x00	; 0
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	e6 14       	cp	r14, r6
    2a56:	f7 04       	cpc	r15, r7
    2a58:	08 05       	cpc	r16, r8
    2a5a:	19 05       	cpc	r17, r9
    2a5c:	20 f4       	brcc	.+8      	; 0x2a66 <__mulsf3+0xe8>
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	a0 e0       	ldi	r26, 0x00	; 0
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	ba 01       	movw	r22, r20
    2a68:	a9 01       	movw	r20, r18
    2a6a:	48 0f       	add	r20, r24
    2a6c:	59 1f       	adc	r21, r25
    2a6e:	6a 1f       	adc	r22, r26
    2a70:	7b 1f       	adc	r23, r27
    2a72:	aa 0c       	add	r10, r10
    2a74:	bb 1c       	adc	r11, r11
    2a76:	cc 1c       	adc	r12, r12
    2a78:	dd 1c       	adc	r13, r13
    2a7a:	97 fe       	sbrs	r9, 7
    2a7c:	08 c0       	rjmp	.+16     	; 0x2a8e <__mulsf3+0x110>
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	a0 e0       	ldi	r26, 0x00	; 0
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	a8 2a       	or	r10, r24
    2a88:	b9 2a       	or	r11, r25
    2a8a:	ca 2a       	or	r12, r26
    2a8c:	db 2a       	or	r13, r27
    2a8e:	31 96       	adiw	r30, 0x01	; 1
    2a90:	e0 32       	cpi	r30, 0x20	; 32
    2a92:	f1 05       	cpc	r31, r1
    2a94:	49 f0       	breq	.+18     	; 0x2aa8 <__mulsf3+0x12a>
    2a96:	66 0c       	add	r6, r6
    2a98:	77 1c       	adc	r7, r7
    2a9a:	88 1c       	adc	r8, r8
    2a9c:	99 1c       	adc	r9, r9
    2a9e:	56 94       	lsr	r5
    2aa0:	47 94       	ror	r4
    2aa2:	37 94       	ror	r3
    2aa4:	27 94       	ror	r2
    2aa6:	c3 cf       	rjmp	.-122    	; 0x2a2e <__mulsf3+0xb0>
    2aa8:	fa 85       	ldd	r31, Y+10	; 0x0a
    2aaa:	ea 89       	ldd	r30, Y+18	; 0x12
    2aac:	2b 89       	ldd	r18, Y+19	; 0x13
    2aae:	3c 89       	ldd	r19, Y+20	; 0x14
    2ab0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ab2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ab4:	28 0f       	add	r18, r24
    2ab6:	39 1f       	adc	r19, r25
    2ab8:	2e 5f       	subi	r18, 0xFE	; 254
    2aba:	3f 4f       	sbci	r19, 0xFF	; 255
    2abc:	17 c0       	rjmp	.+46     	; 0x2aec <__mulsf3+0x16e>
    2abe:	ca 01       	movw	r24, r20
    2ac0:	81 70       	andi	r24, 0x01	; 1
    2ac2:	90 70       	andi	r25, 0x00	; 0
    2ac4:	89 2b       	or	r24, r25
    2ac6:	61 f0       	breq	.+24     	; 0x2ae0 <__mulsf3+0x162>
    2ac8:	16 95       	lsr	r17
    2aca:	07 95       	ror	r16
    2acc:	f7 94       	ror	r15
    2ace:	e7 94       	ror	r14
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	a0 e0       	ldi	r26, 0x00	; 0
    2ad6:	b0 e8       	ldi	r27, 0x80	; 128
    2ad8:	e8 2a       	or	r14, r24
    2ada:	f9 2a       	or	r15, r25
    2adc:	0a 2b       	or	r16, r26
    2ade:	1b 2b       	or	r17, r27
    2ae0:	76 95       	lsr	r23
    2ae2:	67 95       	ror	r22
    2ae4:	57 95       	ror	r21
    2ae6:	47 95       	ror	r20
    2ae8:	2f 5f       	subi	r18, 0xFF	; 255
    2aea:	3f 4f       	sbci	r19, 0xFF	; 255
    2aec:	77 fd       	sbrc	r23, 7
    2aee:	e7 cf       	rjmp	.-50     	; 0x2abe <__mulsf3+0x140>
    2af0:	0c c0       	rjmp	.+24     	; 0x2b0a <__mulsf3+0x18c>
    2af2:	44 0f       	add	r20, r20
    2af4:	55 1f       	adc	r21, r21
    2af6:	66 1f       	adc	r22, r22
    2af8:	77 1f       	adc	r23, r23
    2afa:	17 fd       	sbrc	r17, 7
    2afc:	41 60       	ori	r20, 0x01	; 1
    2afe:	ee 0c       	add	r14, r14
    2b00:	ff 1c       	adc	r15, r15
    2b02:	00 1f       	adc	r16, r16
    2b04:	11 1f       	adc	r17, r17
    2b06:	21 50       	subi	r18, 0x01	; 1
    2b08:	30 40       	sbci	r19, 0x00	; 0
    2b0a:	40 30       	cpi	r20, 0x00	; 0
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	59 07       	cpc	r21, r25
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	69 07       	cpc	r22, r25
    2b14:	90 e4       	ldi	r25, 0x40	; 64
    2b16:	79 07       	cpc	r23, r25
    2b18:	60 f3       	brcs	.-40     	; 0x2af2 <__mulsf3+0x174>
    2b1a:	2b 8f       	std	Y+27, r18	; 0x1b
    2b1c:	3c 8f       	std	Y+28, r19	; 0x1c
    2b1e:	db 01       	movw	r26, r22
    2b20:	ca 01       	movw	r24, r20
    2b22:	8f 77       	andi	r24, 0x7F	; 127
    2b24:	90 70       	andi	r25, 0x00	; 0
    2b26:	a0 70       	andi	r26, 0x00	; 0
    2b28:	b0 70       	andi	r27, 0x00	; 0
    2b2a:	80 34       	cpi	r24, 0x40	; 64
    2b2c:	91 05       	cpc	r25, r1
    2b2e:	a1 05       	cpc	r26, r1
    2b30:	b1 05       	cpc	r27, r1
    2b32:	61 f4       	brne	.+24     	; 0x2b4c <__mulsf3+0x1ce>
    2b34:	47 fd       	sbrc	r20, 7
    2b36:	0a c0       	rjmp	.+20     	; 0x2b4c <__mulsf3+0x1ce>
    2b38:	e1 14       	cp	r14, r1
    2b3a:	f1 04       	cpc	r15, r1
    2b3c:	01 05       	cpc	r16, r1
    2b3e:	11 05       	cpc	r17, r1
    2b40:	29 f0       	breq	.+10     	; 0x2b4c <__mulsf3+0x1ce>
    2b42:	40 5c       	subi	r20, 0xC0	; 192
    2b44:	5f 4f       	sbci	r21, 0xFF	; 255
    2b46:	6f 4f       	sbci	r22, 0xFF	; 255
    2b48:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4a:	40 78       	andi	r20, 0x80	; 128
    2b4c:	1a 8e       	std	Y+26, r1	; 0x1a
    2b4e:	fe 17       	cp	r31, r30
    2b50:	11 f0       	breq	.+4      	; 0x2b56 <__mulsf3+0x1d8>
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	8a 8f       	std	Y+26, r24	; 0x1a
    2b56:	4d 8f       	std	Y+29, r20	; 0x1d
    2b58:	5e 8f       	std	Y+30, r21	; 0x1e
    2b5a:	6f 8f       	std	Y+31, r22	; 0x1f
    2b5c:	78 a3       	std	Y+32, r23	; 0x20
    2b5e:	83 e0       	ldi	r24, 0x03	; 3
    2b60:	89 8f       	std	Y+25, r24	; 0x19
    2b62:	ce 01       	movw	r24, r28
    2b64:	49 96       	adiw	r24, 0x19	; 25
    2b66:	0e 94 11 18 	call	0x3022	; 0x3022 <__pack_f>
    2b6a:	a0 96       	adiw	r28, 0x20	; 32
    2b6c:	e2 e1       	ldi	r30, 0x12	; 18
    2b6e:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <__epilogue_restores__>

00002b72 <__divsf3>:
    2b72:	a8 e1       	ldi	r26, 0x18	; 24
    2b74:	b0 e0       	ldi	r27, 0x00	; 0
    2b76:	ef eb       	ldi	r30, 0xBF	; 191
    2b78:	f5 e1       	ldi	r31, 0x15	; 21
    2b7a:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <__prologue_saves__+0x10>
    2b7e:	69 83       	std	Y+1, r22	; 0x01
    2b80:	7a 83       	std	Y+2, r23	; 0x02
    2b82:	8b 83       	std	Y+3, r24	; 0x03
    2b84:	9c 83       	std	Y+4, r25	; 0x04
    2b86:	2d 83       	std	Y+5, r18	; 0x05
    2b88:	3e 83       	std	Y+6, r19	; 0x06
    2b8a:	4f 83       	std	Y+7, r20	; 0x07
    2b8c:	58 87       	std	Y+8, r21	; 0x08
    2b8e:	b9 e0       	ldi	r27, 0x09	; 9
    2b90:	eb 2e       	mov	r14, r27
    2b92:	f1 2c       	mov	r15, r1
    2b94:	ec 0e       	add	r14, r28
    2b96:	fd 1e       	adc	r15, r29
    2b98:	ce 01       	movw	r24, r28
    2b9a:	01 96       	adiw	r24, 0x01	; 1
    2b9c:	b7 01       	movw	r22, r14
    2b9e:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__unpack_f>
    2ba2:	8e 01       	movw	r16, r28
    2ba4:	0f 5e       	subi	r16, 0xEF	; 239
    2ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba8:	ce 01       	movw	r24, r28
    2baa:	05 96       	adiw	r24, 0x05	; 5
    2bac:	b8 01       	movw	r22, r16
    2bae:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__unpack_f>
    2bb2:	29 85       	ldd	r18, Y+9	; 0x09
    2bb4:	22 30       	cpi	r18, 0x02	; 2
    2bb6:	08 f4       	brcc	.+2      	; 0x2bba <__divsf3+0x48>
    2bb8:	7e c0       	rjmp	.+252    	; 0x2cb6 <__divsf3+0x144>
    2bba:	39 89       	ldd	r19, Y+17	; 0x11
    2bbc:	32 30       	cpi	r19, 0x02	; 2
    2bbe:	10 f4       	brcc	.+4      	; 0x2bc4 <__divsf3+0x52>
    2bc0:	b8 01       	movw	r22, r16
    2bc2:	7c c0       	rjmp	.+248    	; 0x2cbc <__divsf3+0x14a>
    2bc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bc6:	9a 89       	ldd	r25, Y+18	; 0x12
    2bc8:	89 27       	eor	r24, r25
    2bca:	8a 87       	std	Y+10, r24	; 0x0a
    2bcc:	24 30       	cpi	r18, 0x04	; 4
    2bce:	11 f0       	breq	.+4      	; 0x2bd4 <__divsf3+0x62>
    2bd0:	22 30       	cpi	r18, 0x02	; 2
    2bd2:	31 f4       	brne	.+12     	; 0x2be0 <__divsf3+0x6e>
    2bd4:	23 17       	cp	r18, r19
    2bd6:	09 f0       	breq	.+2      	; 0x2bda <__divsf3+0x68>
    2bd8:	6e c0       	rjmp	.+220    	; 0x2cb6 <__divsf3+0x144>
    2bda:	60 e0       	ldi	r22, 0x00	; 0
    2bdc:	72 e0       	ldi	r23, 0x02	; 2
    2bde:	6e c0       	rjmp	.+220    	; 0x2cbc <__divsf3+0x14a>
    2be0:	34 30       	cpi	r19, 0x04	; 4
    2be2:	39 f4       	brne	.+14     	; 0x2bf2 <__divsf3+0x80>
    2be4:	1d 86       	std	Y+13, r1	; 0x0d
    2be6:	1e 86       	std	Y+14, r1	; 0x0e
    2be8:	1f 86       	std	Y+15, r1	; 0x0f
    2bea:	18 8a       	std	Y+16, r1	; 0x10
    2bec:	1c 86       	std	Y+12, r1	; 0x0c
    2bee:	1b 86       	std	Y+11, r1	; 0x0b
    2bf0:	04 c0       	rjmp	.+8      	; 0x2bfa <__divsf3+0x88>
    2bf2:	32 30       	cpi	r19, 0x02	; 2
    2bf4:	21 f4       	brne	.+8      	; 0x2bfe <__divsf3+0x8c>
    2bf6:	84 e0       	ldi	r24, 0x04	; 4
    2bf8:	89 87       	std	Y+9, r24	; 0x09
    2bfa:	b7 01       	movw	r22, r14
    2bfc:	5f c0       	rjmp	.+190    	; 0x2cbc <__divsf3+0x14a>
    2bfe:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c00:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c02:	8b 89       	ldd	r24, Y+19	; 0x13
    2c04:	9c 89       	ldd	r25, Y+20	; 0x14
    2c06:	28 1b       	sub	r18, r24
    2c08:	39 0b       	sbc	r19, r25
    2c0a:	3c 87       	std	Y+12, r19	; 0x0c
    2c0c:	2b 87       	std	Y+11, r18	; 0x0b
    2c0e:	ed 84       	ldd	r14, Y+13	; 0x0d
    2c10:	fe 84       	ldd	r15, Y+14	; 0x0e
    2c12:	0f 85       	ldd	r16, Y+15	; 0x0f
    2c14:	18 89       	ldd	r17, Y+16	; 0x10
    2c16:	ad 88       	ldd	r10, Y+21	; 0x15
    2c18:	be 88       	ldd	r11, Y+22	; 0x16
    2c1a:	cf 88       	ldd	r12, Y+23	; 0x17
    2c1c:	d8 8c       	ldd	r13, Y+24	; 0x18
    2c1e:	ea 14       	cp	r14, r10
    2c20:	fb 04       	cpc	r15, r11
    2c22:	0c 05       	cpc	r16, r12
    2c24:	1d 05       	cpc	r17, r13
    2c26:	40 f4       	brcc	.+16     	; 0x2c38 <__divsf3+0xc6>
    2c28:	ee 0c       	add	r14, r14
    2c2a:	ff 1c       	adc	r15, r15
    2c2c:	00 1f       	adc	r16, r16
    2c2e:	11 1f       	adc	r17, r17
    2c30:	21 50       	subi	r18, 0x01	; 1
    2c32:	30 40       	sbci	r19, 0x00	; 0
    2c34:	3c 87       	std	Y+12, r19	; 0x0c
    2c36:	2b 87       	std	Y+11, r18	; 0x0b
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e0       	ldi	r20, 0x00	; 0
    2c3e:	50 e0       	ldi	r21, 0x00	; 0
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	a0 e0       	ldi	r26, 0x00	; 0
    2c46:	b0 e4       	ldi	r27, 0x40	; 64
    2c48:	60 e0       	ldi	r22, 0x00	; 0
    2c4a:	70 e0       	ldi	r23, 0x00	; 0
    2c4c:	ea 14       	cp	r14, r10
    2c4e:	fb 04       	cpc	r15, r11
    2c50:	0c 05       	cpc	r16, r12
    2c52:	1d 05       	cpc	r17, r13
    2c54:	40 f0       	brcs	.+16     	; 0x2c66 <__divsf3+0xf4>
    2c56:	28 2b       	or	r18, r24
    2c58:	39 2b       	or	r19, r25
    2c5a:	4a 2b       	or	r20, r26
    2c5c:	5b 2b       	or	r21, r27
    2c5e:	ea 18       	sub	r14, r10
    2c60:	fb 08       	sbc	r15, r11
    2c62:	0c 09       	sbc	r16, r12
    2c64:	1d 09       	sbc	r17, r13
    2c66:	b6 95       	lsr	r27
    2c68:	a7 95       	ror	r26
    2c6a:	97 95       	ror	r25
    2c6c:	87 95       	ror	r24
    2c6e:	ee 0c       	add	r14, r14
    2c70:	ff 1c       	adc	r15, r15
    2c72:	00 1f       	adc	r16, r16
    2c74:	11 1f       	adc	r17, r17
    2c76:	6f 5f       	subi	r22, 0xFF	; 255
    2c78:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7a:	6f 31       	cpi	r22, 0x1F	; 31
    2c7c:	71 05       	cpc	r23, r1
    2c7e:	31 f7       	brne	.-52     	; 0x2c4c <__divsf3+0xda>
    2c80:	da 01       	movw	r26, r20
    2c82:	c9 01       	movw	r24, r18
    2c84:	8f 77       	andi	r24, 0x7F	; 127
    2c86:	90 70       	andi	r25, 0x00	; 0
    2c88:	a0 70       	andi	r26, 0x00	; 0
    2c8a:	b0 70       	andi	r27, 0x00	; 0
    2c8c:	80 34       	cpi	r24, 0x40	; 64
    2c8e:	91 05       	cpc	r25, r1
    2c90:	a1 05       	cpc	r26, r1
    2c92:	b1 05       	cpc	r27, r1
    2c94:	61 f4       	brne	.+24     	; 0x2cae <__divsf3+0x13c>
    2c96:	27 fd       	sbrc	r18, 7
    2c98:	0a c0       	rjmp	.+20     	; 0x2cae <__divsf3+0x13c>
    2c9a:	e1 14       	cp	r14, r1
    2c9c:	f1 04       	cpc	r15, r1
    2c9e:	01 05       	cpc	r16, r1
    2ca0:	11 05       	cpc	r17, r1
    2ca2:	29 f0       	breq	.+10     	; 0x2cae <__divsf3+0x13c>
    2ca4:	20 5c       	subi	r18, 0xC0	; 192
    2ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca8:	4f 4f       	sbci	r20, 0xFF	; 255
    2caa:	5f 4f       	sbci	r21, 0xFF	; 255
    2cac:	20 78       	andi	r18, 0x80	; 128
    2cae:	2d 87       	std	Y+13, r18	; 0x0d
    2cb0:	3e 87       	std	Y+14, r19	; 0x0e
    2cb2:	4f 87       	std	Y+15, r20	; 0x0f
    2cb4:	58 8b       	std	Y+16, r21	; 0x10
    2cb6:	be 01       	movw	r22, r28
    2cb8:	67 5f       	subi	r22, 0xF7	; 247
    2cba:	7f 4f       	sbci	r23, 0xFF	; 255
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	0e 94 11 18 	call	0x3022	; 0x3022 <__pack_f>
    2cc2:	68 96       	adiw	r28, 0x18	; 24
    2cc4:	ea e0       	ldi	r30, 0x0A	; 10
    2cc6:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__epilogue_restores__+0x10>

00002cca <__gtsf2>:
    2cca:	a8 e1       	ldi	r26, 0x18	; 24
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	eb e6       	ldi	r30, 0x6B	; 107
    2cd0:	f6 e1       	ldi	r31, 0x16	; 22
    2cd2:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x18>
    2cd6:	69 83       	std	Y+1, r22	; 0x01
    2cd8:	7a 83       	std	Y+2, r23	; 0x02
    2cda:	8b 83       	std	Y+3, r24	; 0x03
    2cdc:	9c 83       	std	Y+4, r25	; 0x04
    2cde:	2d 83       	std	Y+5, r18	; 0x05
    2ce0:	3e 83       	std	Y+6, r19	; 0x06
    2ce2:	4f 83       	std	Y+7, r20	; 0x07
    2ce4:	58 87       	std	Y+8, r21	; 0x08
    2ce6:	89 e0       	ldi	r24, 0x09	; 9
    2ce8:	e8 2e       	mov	r14, r24
    2cea:	f1 2c       	mov	r15, r1
    2cec:	ec 0e       	add	r14, r28
    2cee:	fd 1e       	adc	r15, r29
    2cf0:	ce 01       	movw	r24, r28
    2cf2:	01 96       	adiw	r24, 0x01	; 1
    2cf4:	b7 01       	movw	r22, r14
    2cf6:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__unpack_f>
    2cfa:	8e 01       	movw	r16, r28
    2cfc:	0f 5e       	subi	r16, 0xEF	; 239
    2cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    2d00:	ce 01       	movw	r24, r28
    2d02:	05 96       	adiw	r24, 0x05	; 5
    2d04:	b8 01       	movw	r22, r16
    2d06:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__unpack_f>
    2d0a:	89 85       	ldd	r24, Y+9	; 0x09
    2d0c:	82 30       	cpi	r24, 0x02	; 2
    2d0e:	40 f0       	brcs	.+16     	; 0x2d20 <__gtsf2+0x56>
    2d10:	89 89       	ldd	r24, Y+17	; 0x11
    2d12:	82 30       	cpi	r24, 0x02	; 2
    2d14:	28 f0       	brcs	.+10     	; 0x2d20 <__gtsf2+0x56>
    2d16:	c7 01       	movw	r24, r14
    2d18:	b8 01       	movw	r22, r16
    2d1a:	0e 94 5e 19 	call	0x32bc	; 0x32bc <__fpcmp_parts_f>
    2d1e:	01 c0       	rjmp	.+2      	; 0x2d22 <__gtsf2+0x58>
    2d20:	8f ef       	ldi	r24, 0xFF	; 255
    2d22:	68 96       	adiw	r28, 0x18	; 24
    2d24:	e6 e0       	ldi	r30, 0x06	; 6
    2d26:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x18>

00002d2a <__gesf2>:
    2d2a:	a8 e1       	ldi	r26, 0x18	; 24
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	eb e9       	ldi	r30, 0x9B	; 155
    2d30:	f6 e1       	ldi	r31, 0x16	; 22
    2d32:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x18>
    2d36:	69 83       	std	Y+1, r22	; 0x01
    2d38:	7a 83       	std	Y+2, r23	; 0x02
    2d3a:	8b 83       	std	Y+3, r24	; 0x03
    2d3c:	9c 83       	std	Y+4, r25	; 0x04
    2d3e:	2d 83       	std	Y+5, r18	; 0x05
    2d40:	3e 83       	std	Y+6, r19	; 0x06
    2d42:	4f 83       	std	Y+7, r20	; 0x07
    2d44:	58 87       	std	Y+8, r21	; 0x08
    2d46:	89 e0       	ldi	r24, 0x09	; 9
    2d48:	e8 2e       	mov	r14, r24
    2d4a:	f1 2c       	mov	r15, r1
    2d4c:	ec 0e       	add	r14, r28
    2d4e:	fd 1e       	adc	r15, r29
    2d50:	ce 01       	movw	r24, r28
    2d52:	01 96       	adiw	r24, 0x01	; 1
    2d54:	b7 01       	movw	r22, r14
    2d56:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__unpack_f>
    2d5a:	8e 01       	movw	r16, r28
    2d5c:	0f 5e       	subi	r16, 0xEF	; 239
    2d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d60:	ce 01       	movw	r24, r28
    2d62:	05 96       	adiw	r24, 0x05	; 5
    2d64:	b8 01       	movw	r22, r16
    2d66:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__unpack_f>
    2d6a:	89 85       	ldd	r24, Y+9	; 0x09
    2d6c:	82 30       	cpi	r24, 0x02	; 2
    2d6e:	40 f0       	brcs	.+16     	; 0x2d80 <__gesf2+0x56>
    2d70:	89 89       	ldd	r24, Y+17	; 0x11
    2d72:	82 30       	cpi	r24, 0x02	; 2
    2d74:	28 f0       	brcs	.+10     	; 0x2d80 <__gesf2+0x56>
    2d76:	c7 01       	movw	r24, r14
    2d78:	b8 01       	movw	r22, r16
    2d7a:	0e 94 5e 19 	call	0x32bc	; 0x32bc <__fpcmp_parts_f>
    2d7e:	01 c0       	rjmp	.+2      	; 0x2d82 <__gesf2+0x58>
    2d80:	8f ef       	ldi	r24, 0xFF	; 255
    2d82:	68 96       	adiw	r28, 0x18	; 24
    2d84:	e6 e0       	ldi	r30, 0x06	; 6
    2d86:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x18>

00002d8a <__ltsf2>:
    2d8a:	a8 e1       	ldi	r26, 0x18	; 24
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	eb ec       	ldi	r30, 0xCB	; 203
    2d90:	f6 e1       	ldi	r31, 0x16	; 22
    2d92:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x18>
    2d96:	69 83       	std	Y+1, r22	; 0x01
    2d98:	7a 83       	std	Y+2, r23	; 0x02
    2d9a:	8b 83       	std	Y+3, r24	; 0x03
    2d9c:	9c 83       	std	Y+4, r25	; 0x04
    2d9e:	2d 83       	std	Y+5, r18	; 0x05
    2da0:	3e 83       	std	Y+6, r19	; 0x06
    2da2:	4f 83       	std	Y+7, r20	; 0x07
    2da4:	58 87       	std	Y+8, r21	; 0x08
    2da6:	89 e0       	ldi	r24, 0x09	; 9
    2da8:	e8 2e       	mov	r14, r24
    2daa:	f1 2c       	mov	r15, r1
    2dac:	ec 0e       	add	r14, r28
    2dae:	fd 1e       	adc	r15, r29
    2db0:	ce 01       	movw	r24, r28
    2db2:	01 96       	adiw	r24, 0x01	; 1
    2db4:	b7 01       	movw	r22, r14
    2db6:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__unpack_f>
    2dba:	8e 01       	movw	r16, r28
    2dbc:	0f 5e       	subi	r16, 0xEF	; 239
    2dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc0:	ce 01       	movw	r24, r28
    2dc2:	05 96       	adiw	r24, 0x05	; 5
    2dc4:	b8 01       	movw	r22, r16
    2dc6:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__unpack_f>
    2dca:	89 85       	ldd	r24, Y+9	; 0x09
    2dcc:	82 30       	cpi	r24, 0x02	; 2
    2dce:	40 f0       	brcs	.+16     	; 0x2de0 <__ltsf2+0x56>
    2dd0:	89 89       	ldd	r24, Y+17	; 0x11
    2dd2:	82 30       	cpi	r24, 0x02	; 2
    2dd4:	28 f0       	brcs	.+10     	; 0x2de0 <__ltsf2+0x56>
    2dd6:	c7 01       	movw	r24, r14
    2dd8:	b8 01       	movw	r22, r16
    2dda:	0e 94 5e 19 	call	0x32bc	; 0x32bc <__fpcmp_parts_f>
    2dde:	01 c0       	rjmp	.+2      	; 0x2de2 <__ltsf2+0x58>
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	68 96       	adiw	r28, 0x18	; 24
    2de4:	e6 e0       	ldi	r30, 0x06	; 6
    2de6:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x18>

00002dea <__fixsfsi>:
    2dea:	ac e0       	ldi	r26, 0x0C	; 12
    2dec:	b0 e0       	ldi	r27, 0x00	; 0
    2dee:	eb ef       	ldi	r30, 0xFB	; 251
    2df0:	f6 e1       	ldi	r31, 0x16	; 22
    2df2:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x20>
    2df6:	69 83       	std	Y+1, r22	; 0x01
    2df8:	7a 83       	std	Y+2, r23	; 0x02
    2dfa:	8b 83       	std	Y+3, r24	; 0x03
    2dfc:	9c 83       	std	Y+4, r25	; 0x04
    2dfe:	ce 01       	movw	r24, r28
    2e00:	01 96       	adiw	r24, 0x01	; 1
    2e02:	be 01       	movw	r22, r28
    2e04:	6b 5f       	subi	r22, 0xFB	; 251
    2e06:	7f 4f       	sbci	r23, 0xFF	; 255
    2e08:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__unpack_f>
    2e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0e:	82 30       	cpi	r24, 0x02	; 2
    2e10:	61 f1       	breq	.+88     	; 0x2e6a <__fixsfsi+0x80>
    2e12:	82 30       	cpi	r24, 0x02	; 2
    2e14:	50 f1       	brcs	.+84     	; 0x2e6a <__fixsfsi+0x80>
    2e16:	84 30       	cpi	r24, 0x04	; 4
    2e18:	21 f4       	brne	.+8      	; 0x2e22 <__fixsfsi+0x38>
    2e1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e1c:	88 23       	and	r24, r24
    2e1e:	51 f1       	breq	.+84     	; 0x2e74 <__fixsfsi+0x8a>
    2e20:	2e c0       	rjmp	.+92     	; 0x2e7e <__fixsfsi+0x94>
    2e22:	2f 81       	ldd	r18, Y+7	; 0x07
    2e24:	38 85       	ldd	r19, Y+8	; 0x08
    2e26:	37 fd       	sbrc	r19, 7
    2e28:	20 c0       	rjmp	.+64     	; 0x2e6a <__fixsfsi+0x80>
    2e2a:	6e 81       	ldd	r22, Y+6	; 0x06
    2e2c:	2f 31       	cpi	r18, 0x1F	; 31
    2e2e:	31 05       	cpc	r19, r1
    2e30:	1c f0       	brlt	.+6      	; 0x2e38 <__fixsfsi+0x4e>
    2e32:	66 23       	and	r22, r22
    2e34:	f9 f0       	breq	.+62     	; 0x2e74 <__fixsfsi+0x8a>
    2e36:	23 c0       	rjmp	.+70     	; 0x2e7e <__fixsfsi+0x94>
    2e38:	8e e1       	ldi	r24, 0x1E	; 30
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	82 1b       	sub	r24, r18
    2e3e:	93 0b       	sbc	r25, r19
    2e40:	29 85       	ldd	r18, Y+9	; 0x09
    2e42:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e44:	4b 85       	ldd	r20, Y+11	; 0x0b
    2e46:	5c 85       	ldd	r21, Y+12	; 0x0c
    2e48:	04 c0       	rjmp	.+8      	; 0x2e52 <__fixsfsi+0x68>
    2e4a:	56 95       	lsr	r21
    2e4c:	47 95       	ror	r20
    2e4e:	37 95       	ror	r19
    2e50:	27 95       	ror	r18
    2e52:	8a 95       	dec	r24
    2e54:	d2 f7       	brpl	.-12     	; 0x2e4a <__fixsfsi+0x60>
    2e56:	66 23       	and	r22, r22
    2e58:	b1 f0       	breq	.+44     	; 0x2e86 <__fixsfsi+0x9c>
    2e5a:	50 95       	com	r21
    2e5c:	40 95       	com	r20
    2e5e:	30 95       	com	r19
    2e60:	21 95       	neg	r18
    2e62:	3f 4f       	sbci	r19, 0xFF	; 255
    2e64:	4f 4f       	sbci	r20, 0xFF	; 255
    2e66:	5f 4f       	sbci	r21, 0xFF	; 255
    2e68:	0e c0       	rjmp	.+28     	; 0x2e86 <__fixsfsi+0x9c>
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	40 e0       	ldi	r20, 0x00	; 0
    2e70:	50 e0       	ldi	r21, 0x00	; 0
    2e72:	09 c0       	rjmp	.+18     	; 0x2e86 <__fixsfsi+0x9c>
    2e74:	2f ef       	ldi	r18, 0xFF	; 255
    2e76:	3f ef       	ldi	r19, 0xFF	; 255
    2e78:	4f ef       	ldi	r20, 0xFF	; 255
    2e7a:	5f e7       	ldi	r21, 0x7F	; 127
    2e7c:	04 c0       	rjmp	.+8      	; 0x2e86 <__fixsfsi+0x9c>
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e0       	ldi	r20, 0x00	; 0
    2e84:	50 e8       	ldi	r21, 0x80	; 128
    2e86:	b9 01       	movw	r22, r18
    2e88:	ca 01       	movw	r24, r20
    2e8a:	2c 96       	adiw	r28, 0x0c	; 12
    2e8c:	e2 e0       	ldi	r30, 0x02	; 2
    2e8e:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x20>

00002e92 <__floatunsisf>:
    2e92:	a8 e0       	ldi	r26, 0x08	; 8
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	ef e4       	ldi	r30, 0x4F	; 79
    2e98:	f7 e1       	ldi	r31, 0x17	; 23
    2e9a:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <__prologue_saves__+0x10>
    2e9e:	7b 01       	movw	r14, r22
    2ea0:	8c 01       	movw	r16, r24
    2ea2:	61 15       	cp	r22, r1
    2ea4:	71 05       	cpc	r23, r1
    2ea6:	81 05       	cpc	r24, r1
    2ea8:	91 05       	cpc	r25, r1
    2eaa:	19 f4       	brne	.+6      	; 0x2eb2 <__floatunsisf+0x20>
    2eac:	82 e0       	ldi	r24, 0x02	; 2
    2eae:	89 83       	std	Y+1, r24	; 0x01
    2eb0:	60 c0       	rjmp	.+192    	; 0x2f72 <__floatunsisf+0xe0>
    2eb2:	83 e0       	ldi	r24, 0x03	; 3
    2eb4:	89 83       	std	Y+1, r24	; 0x01
    2eb6:	8e e1       	ldi	r24, 0x1E	; 30
    2eb8:	c8 2e       	mov	r12, r24
    2eba:	d1 2c       	mov	r13, r1
    2ebc:	dc 82       	std	Y+4, r13	; 0x04
    2ebe:	cb 82       	std	Y+3, r12	; 0x03
    2ec0:	ed 82       	std	Y+5, r14	; 0x05
    2ec2:	fe 82       	std	Y+6, r15	; 0x06
    2ec4:	0f 83       	std	Y+7, r16	; 0x07
    2ec6:	18 87       	std	Y+8, r17	; 0x08
    2ec8:	c8 01       	movw	r24, r16
    2eca:	b7 01       	movw	r22, r14
    2ecc:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__clzsi2>
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	31 97       	sbiw	r30, 0x01	; 1
    2ed4:	f7 ff       	sbrs	r31, 7
    2ed6:	3b c0       	rjmp	.+118    	; 0x2f4e <__floatunsisf+0xbc>
    2ed8:	22 27       	eor	r18, r18
    2eda:	33 27       	eor	r19, r19
    2edc:	2e 1b       	sub	r18, r30
    2ede:	3f 0b       	sbc	r19, r31
    2ee0:	57 01       	movw	r10, r14
    2ee2:	68 01       	movw	r12, r16
    2ee4:	02 2e       	mov	r0, r18
    2ee6:	04 c0       	rjmp	.+8      	; 0x2ef0 <__floatunsisf+0x5e>
    2ee8:	d6 94       	lsr	r13
    2eea:	c7 94       	ror	r12
    2eec:	b7 94       	ror	r11
    2eee:	a7 94       	ror	r10
    2ef0:	0a 94       	dec	r0
    2ef2:	d2 f7       	brpl	.-12     	; 0x2ee8 <__floatunsisf+0x56>
    2ef4:	40 e0       	ldi	r20, 0x00	; 0
    2ef6:	50 e0       	ldi	r21, 0x00	; 0
    2ef8:	60 e0       	ldi	r22, 0x00	; 0
    2efa:	70 e0       	ldi	r23, 0x00	; 0
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	a0 e0       	ldi	r26, 0x00	; 0
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	04 c0       	rjmp	.+8      	; 0x2f0e <__floatunsisf+0x7c>
    2f06:	88 0f       	add	r24, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	aa 1f       	adc	r26, r26
    2f0c:	bb 1f       	adc	r27, r27
    2f0e:	2a 95       	dec	r18
    2f10:	d2 f7       	brpl	.-12     	; 0x2f06 <__floatunsisf+0x74>
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	a1 09       	sbc	r26, r1
    2f16:	b1 09       	sbc	r27, r1
    2f18:	8e 21       	and	r24, r14
    2f1a:	9f 21       	and	r25, r15
    2f1c:	a0 23       	and	r26, r16
    2f1e:	b1 23       	and	r27, r17
    2f20:	00 97       	sbiw	r24, 0x00	; 0
    2f22:	a1 05       	cpc	r26, r1
    2f24:	b1 05       	cpc	r27, r1
    2f26:	21 f0       	breq	.+8      	; 0x2f30 <__floatunsisf+0x9e>
    2f28:	41 e0       	ldi	r20, 0x01	; 1
    2f2a:	50 e0       	ldi	r21, 0x00	; 0
    2f2c:	60 e0       	ldi	r22, 0x00	; 0
    2f2e:	70 e0       	ldi	r23, 0x00	; 0
    2f30:	4a 29       	or	r20, r10
    2f32:	5b 29       	or	r21, r11
    2f34:	6c 29       	or	r22, r12
    2f36:	7d 29       	or	r23, r13
    2f38:	4d 83       	std	Y+5, r20	; 0x05
    2f3a:	5e 83       	std	Y+6, r21	; 0x06
    2f3c:	6f 83       	std	Y+7, r22	; 0x07
    2f3e:	78 87       	std	Y+8, r23	; 0x08
    2f40:	8e e1       	ldi	r24, 0x1E	; 30
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	8e 1b       	sub	r24, r30
    2f46:	9f 0b       	sbc	r25, r31
    2f48:	9c 83       	std	Y+4, r25	; 0x04
    2f4a:	8b 83       	std	Y+3, r24	; 0x03
    2f4c:	12 c0       	rjmp	.+36     	; 0x2f72 <__floatunsisf+0xe0>
    2f4e:	30 97       	sbiw	r30, 0x00	; 0
    2f50:	81 f0       	breq	.+32     	; 0x2f72 <__floatunsisf+0xe0>
    2f52:	0e 2e       	mov	r0, r30
    2f54:	04 c0       	rjmp	.+8      	; 0x2f5e <__floatunsisf+0xcc>
    2f56:	ee 0c       	add	r14, r14
    2f58:	ff 1c       	adc	r15, r15
    2f5a:	00 1f       	adc	r16, r16
    2f5c:	11 1f       	adc	r17, r17
    2f5e:	0a 94       	dec	r0
    2f60:	d2 f7       	brpl	.-12     	; 0x2f56 <__floatunsisf+0xc4>
    2f62:	ed 82       	std	Y+5, r14	; 0x05
    2f64:	fe 82       	std	Y+6, r15	; 0x06
    2f66:	0f 83       	std	Y+7, r16	; 0x07
    2f68:	18 87       	std	Y+8, r17	; 0x08
    2f6a:	ce 1a       	sub	r12, r30
    2f6c:	df 0a       	sbc	r13, r31
    2f6e:	dc 82       	std	Y+4, r13	; 0x04
    2f70:	cb 82       	std	Y+3, r12	; 0x03
    2f72:	1a 82       	std	Y+2, r1	; 0x02
    2f74:	ce 01       	movw	r24, r28
    2f76:	01 96       	adiw	r24, 0x01	; 1
    2f78:	0e 94 11 18 	call	0x3022	; 0x3022 <__pack_f>
    2f7c:	28 96       	adiw	r28, 0x08	; 8
    2f7e:	ea e0       	ldi	r30, 0x0A	; 10
    2f80:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__epilogue_restores__+0x10>

00002f84 <__clzsi2>:
    2f84:	ef 92       	push	r14
    2f86:	ff 92       	push	r15
    2f88:	0f 93       	push	r16
    2f8a:	1f 93       	push	r17
    2f8c:	7b 01       	movw	r14, r22
    2f8e:	8c 01       	movw	r16, r24
    2f90:	80 e0       	ldi	r24, 0x00	; 0
    2f92:	e8 16       	cp	r14, r24
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	f8 06       	cpc	r15, r24
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	08 07       	cpc	r16, r24
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	18 07       	cpc	r17, r24
    2fa0:	88 f4       	brcc	.+34     	; 0x2fc4 <__clzsi2+0x40>
    2fa2:	8f ef       	ldi	r24, 0xFF	; 255
    2fa4:	e8 16       	cp	r14, r24
    2fa6:	f1 04       	cpc	r15, r1
    2fa8:	01 05       	cpc	r16, r1
    2faa:	11 05       	cpc	r17, r1
    2fac:	31 f0       	breq	.+12     	; 0x2fba <__clzsi2+0x36>
    2fae:	28 f0       	brcs	.+10     	; 0x2fba <__clzsi2+0x36>
    2fb0:	88 e0       	ldi	r24, 0x08	; 8
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	a0 e0       	ldi	r26, 0x00	; 0
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	17 c0       	rjmp	.+46     	; 0x2fe8 <__clzsi2+0x64>
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	a0 e0       	ldi	r26, 0x00	; 0
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	12 c0       	rjmp	.+36     	; 0x2fe8 <__clzsi2+0x64>
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	e8 16       	cp	r14, r24
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	f8 06       	cpc	r15, r24
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	08 07       	cpc	r16, r24
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	18 07       	cpc	r17, r24
    2fd4:	28 f0       	brcs	.+10     	; 0x2fe0 <__clzsi2+0x5c>
    2fd6:	88 e1       	ldi	r24, 0x18	; 24
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	a0 e0       	ldi	r26, 0x00	; 0
    2fdc:	b0 e0       	ldi	r27, 0x00	; 0
    2fde:	04 c0       	rjmp	.+8      	; 0x2fe8 <__clzsi2+0x64>
    2fe0:	80 e1       	ldi	r24, 0x10	; 16
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	a0 e0       	ldi	r26, 0x00	; 0
    2fe6:	b0 e0       	ldi	r27, 0x00	; 0
    2fe8:	20 e2       	ldi	r18, 0x20	; 32
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e0       	ldi	r20, 0x00	; 0
    2fee:	50 e0       	ldi	r21, 0x00	; 0
    2ff0:	28 1b       	sub	r18, r24
    2ff2:	39 0b       	sbc	r19, r25
    2ff4:	4a 0b       	sbc	r20, r26
    2ff6:	5b 0b       	sbc	r21, r27
    2ff8:	04 c0       	rjmp	.+8      	; 0x3002 <__clzsi2+0x7e>
    2ffa:	16 95       	lsr	r17
    2ffc:	07 95       	ror	r16
    2ffe:	f7 94       	ror	r15
    3000:	e7 94       	ror	r14
    3002:	8a 95       	dec	r24
    3004:	d2 f7       	brpl	.-12     	; 0x2ffa <__clzsi2+0x76>
    3006:	f7 01       	movw	r30, r14
    3008:	e8 5f       	subi	r30, 0xF8	; 248
    300a:	fd 4f       	sbci	r31, 0xFD	; 253
    300c:	80 81       	ld	r24, Z
    300e:	28 1b       	sub	r18, r24
    3010:	31 09       	sbc	r19, r1
    3012:	41 09       	sbc	r20, r1
    3014:	51 09       	sbc	r21, r1
    3016:	c9 01       	movw	r24, r18
    3018:	1f 91       	pop	r17
    301a:	0f 91       	pop	r16
    301c:	ff 90       	pop	r15
    301e:	ef 90       	pop	r14
    3020:	08 95       	ret

00003022 <__pack_f>:
    3022:	df 92       	push	r13
    3024:	ef 92       	push	r14
    3026:	ff 92       	push	r15
    3028:	0f 93       	push	r16
    302a:	1f 93       	push	r17
    302c:	fc 01       	movw	r30, r24
    302e:	e4 80       	ldd	r14, Z+4	; 0x04
    3030:	f5 80       	ldd	r15, Z+5	; 0x05
    3032:	06 81       	ldd	r16, Z+6	; 0x06
    3034:	17 81       	ldd	r17, Z+7	; 0x07
    3036:	d1 80       	ldd	r13, Z+1	; 0x01
    3038:	80 81       	ld	r24, Z
    303a:	82 30       	cpi	r24, 0x02	; 2
    303c:	48 f4       	brcc	.+18     	; 0x3050 <__pack_f+0x2e>
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	a0 e1       	ldi	r26, 0x10	; 16
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	e8 2a       	or	r14, r24
    3048:	f9 2a       	or	r15, r25
    304a:	0a 2b       	or	r16, r26
    304c:	1b 2b       	or	r17, r27
    304e:	a5 c0       	rjmp	.+330    	; 0x319a <__pack_f+0x178>
    3050:	84 30       	cpi	r24, 0x04	; 4
    3052:	09 f4       	brne	.+2      	; 0x3056 <__pack_f+0x34>
    3054:	9f c0       	rjmp	.+318    	; 0x3194 <__pack_f+0x172>
    3056:	82 30       	cpi	r24, 0x02	; 2
    3058:	21 f4       	brne	.+8      	; 0x3062 <__pack_f+0x40>
    305a:	ee 24       	eor	r14, r14
    305c:	ff 24       	eor	r15, r15
    305e:	87 01       	movw	r16, r14
    3060:	05 c0       	rjmp	.+10     	; 0x306c <__pack_f+0x4a>
    3062:	e1 14       	cp	r14, r1
    3064:	f1 04       	cpc	r15, r1
    3066:	01 05       	cpc	r16, r1
    3068:	11 05       	cpc	r17, r1
    306a:	19 f4       	brne	.+6      	; 0x3072 <__pack_f+0x50>
    306c:	e0 e0       	ldi	r30, 0x00	; 0
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	96 c0       	rjmp	.+300    	; 0x319e <__pack_f+0x17c>
    3072:	62 81       	ldd	r22, Z+2	; 0x02
    3074:	73 81       	ldd	r23, Z+3	; 0x03
    3076:	9f ef       	ldi	r25, 0xFF	; 255
    3078:	62 38       	cpi	r22, 0x82	; 130
    307a:	79 07       	cpc	r23, r25
    307c:	0c f0       	brlt	.+2      	; 0x3080 <__pack_f+0x5e>
    307e:	5b c0       	rjmp	.+182    	; 0x3136 <__pack_f+0x114>
    3080:	22 e8       	ldi	r18, 0x82	; 130
    3082:	3f ef       	ldi	r19, 0xFF	; 255
    3084:	26 1b       	sub	r18, r22
    3086:	37 0b       	sbc	r19, r23
    3088:	2a 31       	cpi	r18, 0x1A	; 26
    308a:	31 05       	cpc	r19, r1
    308c:	2c f0       	brlt	.+10     	; 0x3098 <__pack_f+0x76>
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	40 e0       	ldi	r20, 0x00	; 0
    3094:	50 e0       	ldi	r21, 0x00	; 0
    3096:	2a c0       	rjmp	.+84     	; 0x30ec <__pack_f+0xca>
    3098:	b8 01       	movw	r22, r16
    309a:	a7 01       	movw	r20, r14
    309c:	02 2e       	mov	r0, r18
    309e:	04 c0       	rjmp	.+8      	; 0x30a8 <__pack_f+0x86>
    30a0:	76 95       	lsr	r23
    30a2:	67 95       	ror	r22
    30a4:	57 95       	ror	r21
    30a6:	47 95       	ror	r20
    30a8:	0a 94       	dec	r0
    30aa:	d2 f7       	brpl	.-12     	; 0x30a0 <__pack_f+0x7e>
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	a0 e0       	ldi	r26, 0x00	; 0
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	04 c0       	rjmp	.+8      	; 0x30be <__pack_f+0x9c>
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	aa 1f       	adc	r26, r26
    30bc:	bb 1f       	adc	r27, r27
    30be:	2a 95       	dec	r18
    30c0:	d2 f7       	brpl	.-12     	; 0x30b6 <__pack_f+0x94>
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	a1 09       	sbc	r26, r1
    30c6:	b1 09       	sbc	r27, r1
    30c8:	8e 21       	and	r24, r14
    30ca:	9f 21       	and	r25, r15
    30cc:	a0 23       	and	r26, r16
    30ce:	b1 23       	and	r27, r17
    30d0:	00 97       	sbiw	r24, 0x00	; 0
    30d2:	a1 05       	cpc	r26, r1
    30d4:	b1 05       	cpc	r27, r1
    30d6:	21 f0       	breq	.+8      	; 0x30e0 <__pack_f+0xbe>
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	a0 e0       	ldi	r26, 0x00	; 0
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	9a 01       	movw	r18, r20
    30e2:	ab 01       	movw	r20, r22
    30e4:	28 2b       	or	r18, r24
    30e6:	39 2b       	or	r19, r25
    30e8:	4a 2b       	or	r20, r26
    30ea:	5b 2b       	or	r21, r27
    30ec:	da 01       	movw	r26, r20
    30ee:	c9 01       	movw	r24, r18
    30f0:	8f 77       	andi	r24, 0x7F	; 127
    30f2:	90 70       	andi	r25, 0x00	; 0
    30f4:	a0 70       	andi	r26, 0x00	; 0
    30f6:	b0 70       	andi	r27, 0x00	; 0
    30f8:	80 34       	cpi	r24, 0x40	; 64
    30fa:	91 05       	cpc	r25, r1
    30fc:	a1 05       	cpc	r26, r1
    30fe:	b1 05       	cpc	r27, r1
    3100:	39 f4       	brne	.+14     	; 0x3110 <__pack_f+0xee>
    3102:	27 ff       	sbrs	r18, 7
    3104:	09 c0       	rjmp	.+18     	; 0x3118 <__pack_f+0xf6>
    3106:	20 5c       	subi	r18, 0xC0	; 192
    3108:	3f 4f       	sbci	r19, 0xFF	; 255
    310a:	4f 4f       	sbci	r20, 0xFF	; 255
    310c:	5f 4f       	sbci	r21, 0xFF	; 255
    310e:	04 c0       	rjmp	.+8      	; 0x3118 <__pack_f+0xf6>
    3110:	21 5c       	subi	r18, 0xC1	; 193
    3112:	3f 4f       	sbci	r19, 0xFF	; 255
    3114:	4f 4f       	sbci	r20, 0xFF	; 255
    3116:	5f 4f       	sbci	r21, 0xFF	; 255
    3118:	e0 e0       	ldi	r30, 0x00	; 0
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	20 30       	cpi	r18, 0x00	; 0
    311e:	a0 e0       	ldi	r26, 0x00	; 0
    3120:	3a 07       	cpc	r19, r26
    3122:	a0 e0       	ldi	r26, 0x00	; 0
    3124:	4a 07       	cpc	r20, r26
    3126:	a0 e4       	ldi	r26, 0x40	; 64
    3128:	5a 07       	cpc	r21, r26
    312a:	10 f0       	brcs	.+4      	; 0x3130 <__pack_f+0x10e>
    312c:	e1 e0       	ldi	r30, 0x01	; 1
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	79 01       	movw	r14, r18
    3132:	8a 01       	movw	r16, r20
    3134:	27 c0       	rjmp	.+78     	; 0x3184 <__pack_f+0x162>
    3136:	60 38       	cpi	r22, 0x80	; 128
    3138:	71 05       	cpc	r23, r1
    313a:	64 f5       	brge	.+88     	; 0x3194 <__pack_f+0x172>
    313c:	fb 01       	movw	r30, r22
    313e:	e1 58       	subi	r30, 0x81	; 129
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	d8 01       	movw	r26, r16
    3144:	c7 01       	movw	r24, r14
    3146:	8f 77       	andi	r24, 0x7F	; 127
    3148:	90 70       	andi	r25, 0x00	; 0
    314a:	a0 70       	andi	r26, 0x00	; 0
    314c:	b0 70       	andi	r27, 0x00	; 0
    314e:	80 34       	cpi	r24, 0x40	; 64
    3150:	91 05       	cpc	r25, r1
    3152:	a1 05       	cpc	r26, r1
    3154:	b1 05       	cpc	r27, r1
    3156:	39 f4       	brne	.+14     	; 0x3166 <__pack_f+0x144>
    3158:	e7 fe       	sbrs	r14, 7
    315a:	0d c0       	rjmp	.+26     	; 0x3176 <__pack_f+0x154>
    315c:	80 e4       	ldi	r24, 0x40	; 64
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	a0 e0       	ldi	r26, 0x00	; 0
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	04 c0       	rjmp	.+8      	; 0x316e <__pack_f+0x14c>
    3166:	8f e3       	ldi	r24, 0x3F	; 63
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	a0 e0       	ldi	r26, 0x00	; 0
    316c:	b0 e0       	ldi	r27, 0x00	; 0
    316e:	e8 0e       	add	r14, r24
    3170:	f9 1e       	adc	r15, r25
    3172:	0a 1f       	adc	r16, r26
    3174:	1b 1f       	adc	r17, r27
    3176:	17 ff       	sbrs	r17, 7
    3178:	05 c0       	rjmp	.+10     	; 0x3184 <__pack_f+0x162>
    317a:	16 95       	lsr	r17
    317c:	07 95       	ror	r16
    317e:	f7 94       	ror	r15
    3180:	e7 94       	ror	r14
    3182:	31 96       	adiw	r30, 0x01	; 1
    3184:	87 e0       	ldi	r24, 0x07	; 7
    3186:	16 95       	lsr	r17
    3188:	07 95       	ror	r16
    318a:	f7 94       	ror	r15
    318c:	e7 94       	ror	r14
    318e:	8a 95       	dec	r24
    3190:	d1 f7       	brne	.-12     	; 0x3186 <__pack_f+0x164>
    3192:	05 c0       	rjmp	.+10     	; 0x319e <__pack_f+0x17c>
    3194:	ee 24       	eor	r14, r14
    3196:	ff 24       	eor	r15, r15
    3198:	87 01       	movw	r16, r14
    319a:	ef ef       	ldi	r30, 0xFF	; 255
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	6e 2f       	mov	r22, r30
    31a0:	67 95       	ror	r22
    31a2:	66 27       	eor	r22, r22
    31a4:	67 95       	ror	r22
    31a6:	90 2f       	mov	r25, r16
    31a8:	9f 77       	andi	r25, 0x7F	; 127
    31aa:	d7 94       	ror	r13
    31ac:	dd 24       	eor	r13, r13
    31ae:	d7 94       	ror	r13
    31b0:	8e 2f       	mov	r24, r30
    31b2:	86 95       	lsr	r24
    31b4:	49 2f       	mov	r20, r25
    31b6:	46 2b       	or	r20, r22
    31b8:	58 2f       	mov	r21, r24
    31ba:	5d 29       	or	r21, r13
    31bc:	b7 01       	movw	r22, r14
    31be:	ca 01       	movw	r24, r20
    31c0:	1f 91       	pop	r17
    31c2:	0f 91       	pop	r16
    31c4:	ff 90       	pop	r15
    31c6:	ef 90       	pop	r14
    31c8:	df 90       	pop	r13
    31ca:	08 95       	ret

000031cc <__unpack_f>:
    31cc:	fc 01       	movw	r30, r24
    31ce:	db 01       	movw	r26, r22
    31d0:	40 81       	ld	r20, Z
    31d2:	51 81       	ldd	r21, Z+1	; 0x01
    31d4:	22 81       	ldd	r18, Z+2	; 0x02
    31d6:	62 2f       	mov	r22, r18
    31d8:	6f 77       	andi	r22, 0x7F	; 127
    31da:	70 e0       	ldi	r23, 0x00	; 0
    31dc:	22 1f       	adc	r18, r18
    31de:	22 27       	eor	r18, r18
    31e0:	22 1f       	adc	r18, r18
    31e2:	93 81       	ldd	r25, Z+3	; 0x03
    31e4:	89 2f       	mov	r24, r25
    31e6:	88 0f       	add	r24, r24
    31e8:	82 2b       	or	r24, r18
    31ea:	28 2f       	mov	r18, r24
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	99 1f       	adc	r25, r25
    31f0:	99 27       	eor	r25, r25
    31f2:	99 1f       	adc	r25, r25
    31f4:	11 96       	adiw	r26, 0x01	; 1
    31f6:	9c 93       	st	X, r25
    31f8:	11 97       	sbiw	r26, 0x01	; 1
    31fa:	21 15       	cp	r18, r1
    31fc:	31 05       	cpc	r19, r1
    31fe:	a9 f5       	brne	.+106    	; 0x326a <__unpack_f+0x9e>
    3200:	41 15       	cp	r20, r1
    3202:	51 05       	cpc	r21, r1
    3204:	61 05       	cpc	r22, r1
    3206:	71 05       	cpc	r23, r1
    3208:	11 f4       	brne	.+4      	; 0x320e <__unpack_f+0x42>
    320a:	82 e0       	ldi	r24, 0x02	; 2
    320c:	37 c0       	rjmp	.+110    	; 0x327c <__unpack_f+0xb0>
    320e:	82 e8       	ldi	r24, 0x82	; 130
    3210:	9f ef       	ldi	r25, 0xFF	; 255
    3212:	13 96       	adiw	r26, 0x03	; 3
    3214:	9c 93       	st	X, r25
    3216:	8e 93       	st	-X, r24
    3218:	12 97       	sbiw	r26, 0x02	; 2
    321a:	9a 01       	movw	r18, r20
    321c:	ab 01       	movw	r20, r22
    321e:	67 e0       	ldi	r22, 0x07	; 7
    3220:	22 0f       	add	r18, r18
    3222:	33 1f       	adc	r19, r19
    3224:	44 1f       	adc	r20, r20
    3226:	55 1f       	adc	r21, r21
    3228:	6a 95       	dec	r22
    322a:	d1 f7       	brne	.-12     	; 0x3220 <__unpack_f+0x54>
    322c:	83 e0       	ldi	r24, 0x03	; 3
    322e:	8c 93       	st	X, r24
    3230:	0d c0       	rjmp	.+26     	; 0x324c <__unpack_f+0x80>
    3232:	22 0f       	add	r18, r18
    3234:	33 1f       	adc	r19, r19
    3236:	44 1f       	adc	r20, r20
    3238:	55 1f       	adc	r21, r21
    323a:	12 96       	adiw	r26, 0x02	; 2
    323c:	8d 91       	ld	r24, X+
    323e:	9c 91       	ld	r25, X
    3240:	13 97       	sbiw	r26, 0x03	; 3
    3242:	01 97       	sbiw	r24, 0x01	; 1
    3244:	13 96       	adiw	r26, 0x03	; 3
    3246:	9c 93       	st	X, r25
    3248:	8e 93       	st	-X, r24
    324a:	12 97       	sbiw	r26, 0x02	; 2
    324c:	20 30       	cpi	r18, 0x00	; 0
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	38 07       	cpc	r19, r24
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	48 07       	cpc	r20, r24
    3256:	80 e4       	ldi	r24, 0x40	; 64
    3258:	58 07       	cpc	r21, r24
    325a:	58 f3       	brcs	.-42     	; 0x3232 <__unpack_f+0x66>
    325c:	14 96       	adiw	r26, 0x04	; 4
    325e:	2d 93       	st	X+, r18
    3260:	3d 93       	st	X+, r19
    3262:	4d 93       	st	X+, r20
    3264:	5c 93       	st	X, r21
    3266:	17 97       	sbiw	r26, 0x07	; 7
    3268:	08 95       	ret
    326a:	2f 3f       	cpi	r18, 0xFF	; 255
    326c:	31 05       	cpc	r19, r1
    326e:	79 f4       	brne	.+30     	; 0x328e <__unpack_f+0xc2>
    3270:	41 15       	cp	r20, r1
    3272:	51 05       	cpc	r21, r1
    3274:	61 05       	cpc	r22, r1
    3276:	71 05       	cpc	r23, r1
    3278:	19 f4       	brne	.+6      	; 0x3280 <__unpack_f+0xb4>
    327a:	84 e0       	ldi	r24, 0x04	; 4
    327c:	8c 93       	st	X, r24
    327e:	08 95       	ret
    3280:	64 ff       	sbrs	r22, 4
    3282:	03 c0       	rjmp	.+6      	; 0x328a <__unpack_f+0xbe>
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	8c 93       	st	X, r24
    3288:	12 c0       	rjmp	.+36     	; 0x32ae <__unpack_f+0xe2>
    328a:	1c 92       	st	X, r1
    328c:	10 c0       	rjmp	.+32     	; 0x32ae <__unpack_f+0xe2>
    328e:	2f 57       	subi	r18, 0x7F	; 127
    3290:	30 40       	sbci	r19, 0x00	; 0
    3292:	13 96       	adiw	r26, 0x03	; 3
    3294:	3c 93       	st	X, r19
    3296:	2e 93       	st	-X, r18
    3298:	12 97       	sbiw	r26, 0x02	; 2
    329a:	83 e0       	ldi	r24, 0x03	; 3
    329c:	8c 93       	st	X, r24
    329e:	87 e0       	ldi	r24, 0x07	; 7
    32a0:	44 0f       	add	r20, r20
    32a2:	55 1f       	adc	r21, r21
    32a4:	66 1f       	adc	r22, r22
    32a6:	77 1f       	adc	r23, r23
    32a8:	8a 95       	dec	r24
    32aa:	d1 f7       	brne	.-12     	; 0x32a0 <__unpack_f+0xd4>
    32ac:	70 64       	ori	r23, 0x40	; 64
    32ae:	14 96       	adiw	r26, 0x04	; 4
    32b0:	4d 93       	st	X+, r20
    32b2:	5d 93       	st	X+, r21
    32b4:	6d 93       	st	X+, r22
    32b6:	7c 93       	st	X, r23
    32b8:	17 97       	sbiw	r26, 0x07	; 7
    32ba:	08 95       	ret

000032bc <__fpcmp_parts_f>:
    32bc:	1f 93       	push	r17
    32be:	dc 01       	movw	r26, r24
    32c0:	fb 01       	movw	r30, r22
    32c2:	9c 91       	ld	r25, X
    32c4:	92 30       	cpi	r25, 0x02	; 2
    32c6:	08 f4       	brcc	.+2      	; 0x32ca <__fpcmp_parts_f+0xe>
    32c8:	47 c0       	rjmp	.+142    	; 0x3358 <__fpcmp_parts_f+0x9c>
    32ca:	80 81       	ld	r24, Z
    32cc:	82 30       	cpi	r24, 0x02	; 2
    32ce:	08 f4       	brcc	.+2      	; 0x32d2 <__fpcmp_parts_f+0x16>
    32d0:	43 c0       	rjmp	.+134    	; 0x3358 <__fpcmp_parts_f+0x9c>
    32d2:	94 30       	cpi	r25, 0x04	; 4
    32d4:	51 f4       	brne	.+20     	; 0x32ea <__fpcmp_parts_f+0x2e>
    32d6:	11 96       	adiw	r26, 0x01	; 1
    32d8:	1c 91       	ld	r17, X
    32da:	84 30       	cpi	r24, 0x04	; 4
    32dc:	99 f5       	brne	.+102    	; 0x3344 <__fpcmp_parts_f+0x88>
    32de:	81 81       	ldd	r24, Z+1	; 0x01
    32e0:	68 2f       	mov	r22, r24
    32e2:	70 e0       	ldi	r23, 0x00	; 0
    32e4:	61 1b       	sub	r22, r17
    32e6:	71 09       	sbc	r23, r1
    32e8:	3f c0       	rjmp	.+126    	; 0x3368 <__fpcmp_parts_f+0xac>
    32ea:	84 30       	cpi	r24, 0x04	; 4
    32ec:	21 f0       	breq	.+8      	; 0x32f6 <__fpcmp_parts_f+0x3a>
    32ee:	92 30       	cpi	r25, 0x02	; 2
    32f0:	31 f4       	brne	.+12     	; 0x32fe <__fpcmp_parts_f+0x42>
    32f2:	82 30       	cpi	r24, 0x02	; 2
    32f4:	b9 f1       	breq	.+110    	; 0x3364 <__fpcmp_parts_f+0xa8>
    32f6:	81 81       	ldd	r24, Z+1	; 0x01
    32f8:	88 23       	and	r24, r24
    32fa:	89 f1       	breq	.+98     	; 0x335e <__fpcmp_parts_f+0xa2>
    32fc:	2d c0       	rjmp	.+90     	; 0x3358 <__fpcmp_parts_f+0x9c>
    32fe:	11 96       	adiw	r26, 0x01	; 1
    3300:	1c 91       	ld	r17, X
    3302:	11 97       	sbiw	r26, 0x01	; 1
    3304:	82 30       	cpi	r24, 0x02	; 2
    3306:	f1 f0       	breq	.+60     	; 0x3344 <__fpcmp_parts_f+0x88>
    3308:	81 81       	ldd	r24, Z+1	; 0x01
    330a:	18 17       	cp	r17, r24
    330c:	d9 f4       	brne	.+54     	; 0x3344 <__fpcmp_parts_f+0x88>
    330e:	12 96       	adiw	r26, 0x02	; 2
    3310:	2d 91       	ld	r18, X+
    3312:	3c 91       	ld	r19, X
    3314:	13 97       	sbiw	r26, 0x03	; 3
    3316:	82 81       	ldd	r24, Z+2	; 0x02
    3318:	93 81       	ldd	r25, Z+3	; 0x03
    331a:	82 17       	cp	r24, r18
    331c:	93 07       	cpc	r25, r19
    331e:	94 f0       	brlt	.+36     	; 0x3344 <__fpcmp_parts_f+0x88>
    3320:	28 17       	cp	r18, r24
    3322:	39 07       	cpc	r19, r25
    3324:	bc f0       	brlt	.+46     	; 0x3354 <__fpcmp_parts_f+0x98>
    3326:	14 96       	adiw	r26, 0x04	; 4
    3328:	8d 91       	ld	r24, X+
    332a:	9d 91       	ld	r25, X+
    332c:	0d 90       	ld	r0, X+
    332e:	bc 91       	ld	r27, X
    3330:	a0 2d       	mov	r26, r0
    3332:	24 81       	ldd	r18, Z+4	; 0x04
    3334:	35 81       	ldd	r19, Z+5	; 0x05
    3336:	46 81       	ldd	r20, Z+6	; 0x06
    3338:	57 81       	ldd	r21, Z+7	; 0x07
    333a:	28 17       	cp	r18, r24
    333c:	39 07       	cpc	r19, r25
    333e:	4a 07       	cpc	r20, r26
    3340:	5b 07       	cpc	r21, r27
    3342:	18 f4       	brcc	.+6      	; 0x334a <__fpcmp_parts_f+0x8e>
    3344:	11 23       	and	r17, r17
    3346:	41 f0       	breq	.+16     	; 0x3358 <__fpcmp_parts_f+0x9c>
    3348:	0a c0       	rjmp	.+20     	; 0x335e <__fpcmp_parts_f+0xa2>
    334a:	82 17       	cp	r24, r18
    334c:	93 07       	cpc	r25, r19
    334e:	a4 07       	cpc	r26, r20
    3350:	b5 07       	cpc	r27, r21
    3352:	40 f4       	brcc	.+16     	; 0x3364 <__fpcmp_parts_f+0xa8>
    3354:	11 23       	and	r17, r17
    3356:	19 f0       	breq	.+6      	; 0x335e <__fpcmp_parts_f+0xa2>
    3358:	61 e0       	ldi	r22, 0x01	; 1
    335a:	70 e0       	ldi	r23, 0x00	; 0
    335c:	05 c0       	rjmp	.+10     	; 0x3368 <__fpcmp_parts_f+0xac>
    335e:	6f ef       	ldi	r22, 0xFF	; 255
    3360:	7f ef       	ldi	r23, 0xFF	; 255
    3362:	02 c0       	rjmp	.+4      	; 0x3368 <__fpcmp_parts_f+0xac>
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	70 e0       	ldi	r23, 0x00	; 0
    3368:	cb 01       	movw	r24, r22
    336a:	1f 91       	pop	r17
    336c:	08 95       	ret

0000336e <__udivmodhi4>:
    336e:	aa 1b       	sub	r26, r26
    3370:	bb 1b       	sub	r27, r27
    3372:	51 e1       	ldi	r21, 0x11	; 17
    3374:	07 c0       	rjmp	.+14     	; 0x3384 <__udivmodhi4_ep>

00003376 <__udivmodhi4_loop>:
    3376:	aa 1f       	adc	r26, r26
    3378:	bb 1f       	adc	r27, r27
    337a:	a6 17       	cp	r26, r22
    337c:	b7 07       	cpc	r27, r23
    337e:	10 f0       	brcs	.+4      	; 0x3384 <__udivmodhi4_ep>
    3380:	a6 1b       	sub	r26, r22
    3382:	b7 0b       	sbc	r27, r23

00003384 <__udivmodhi4_ep>:
    3384:	88 1f       	adc	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	5a 95       	dec	r21
    338a:	a9 f7       	brne	.-22     	; 0x3376 <__udivmodhi4_loop>
    338c:	80 95       	com	r24
    338e:	90 95       	com	r25
    3390:	bc 01       	movw	r22, r24
    3392:	cd 01       	movw	r24, r26
    3394:	08 95       	ret

00003396 <__prologue_saves__>:
    3396:	2f 92       	push	r2
    3398:	3f 92       	push	r3
    339a:	4f 92       	push	r4
    339c:	5f 92       	push	r5
    339e:	6f 92       	push	r6
    33a0:	7f 92       	push	r7
    33a2:	8f 92       	push	r8
    33a4:	9f 92       	push	r9
    33a6:	af 92       	push	r10
    33a8:	bf 92       	push	r11
    33aa:	cf 92       	push	r12
    33ac:	df 92       	push	r13
    33ae:	ef 92       	push	r14
    33b0:	ff 92       	push	r15
    33b2:	0f 93       	push	r16
    33b4:	1f 93       	push	r17
    33b6:	cf 93       	push	r28
    33b8:	df 93       	push	r29
    33ba:	cd b7       	in	r28, 0x3d	; 61
    33bc:	de b7       	in	r29, 0x3e	; 62
    33be:	ca 1b       	sub	r28, r26
    33c0:	db 0b       	sbc	r29, r27
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	f8 94       	cli
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	19 94       	eijmp

000033ce <__epilogue_restores__>:
    33ce:	2a 88       	ldd	r2, Y+18	; 0x12
    33d0:	39 88       	ldd	r3, Y+17	; 0x11
    33d2:	48 88       	ldd	r4, Y+16	; 0x10
    33d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    33d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    33d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    33da:	8c 84       	ldd	r8, Y+12	; 0x0c
    33dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    33de:	aa 84       	ldd	r10, Y+10	; 0x0a
    33e0:	b9 84       	ldd	r11, Y+9	; 0x09
    33e2:	c8 84       	ldd	r12, Y+8	; 0x08
    33e4:	df 80       	ldd	r13, Y+7	; 0x07
    33e6:	ee 80       	ldd	r14, Y+6	; 0x06
    33e8:	fd 80       	ldd	r15, Y+5	; 0x05
    33ea:	0c 81       	ldd	r16, Y+4	; 0x04
    33ec:	1b 81       	ldd	r17, Y+3	; 0x03
    33ee:	aa 81       	ldd	r26, Y+2	; 0x02
    33f0:	b9 81       	ldd	r27, Y+1	; 0x01
    33f2:	ce 0f       	add	r28, r30
    33f4:	d1 1d       	adc	r29, r1
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	f8 94       	cli
    33fa:	de bf       	out	0x3e, r29	; 62
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	cd bf       	out	0x3d, r28	; 61
    3400:	ed 01       	movw	r28, r26
    3402:	08 95       	ret

00003404 <_exit>:
    3404:	f8 94       	cli

00003406 <__stop_program>:
    3406:	ff cf       	rjmp	.-2      	; 0x3406 <__stop_program>
